#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class User:
  """
  Attributes:
   - uid
   - uid_type
   - user_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'uid', None, None, ), # 1
    (2, TType.I32, 'uid_type', None, None, ), # 2
    (3, TType.I64, 'user_id', None, 0, ), # 3
  )

  def __init__(self, uid=None, uid_type=None, user_id=thrift_spec[3][4],):
    self.uid = uid
    self.uid_type = uid_type
    self.user_id = user_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.uid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.uid_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.user_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('User')
    if self.uid is not None:
      oprot.writeFieldBegin('uid', TType.STRING, 1)
      oprot.writeString(self.uid)
      oprot.writeFieldEnd()
    if self.uid_type is not None:
      oprot.writeFieldBegin('uid_type', TType.I32, 2)
      oprot.writeI32(self.uid_type)
      oprot.writeFieldEnd()
    if self.user_id is not None:
      oprot.writeFieldBegin('user_id', TType.I64, 3)
      oprot.writeI64(self.user_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AdWeight:
  """
  Attributes:
   - creative_id
   - score
   - unit_id
   - campaign_id
   - user_id
   - bid_price
   - click_num
   - impr_num
   - cost_type
   - app_id
   - industry
   - imp_frequency
   - ad_type
   - group_op
   - groups
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'creative_id', None, None, ), # 1
    (2, TType.DOUBLE, 'score', None, None, ), # 2
    (3, TType.I32, 'unit_id', None, None, ), # 3
    (4, TType.I32, 'campaign_id', None, None, ), # 4
    (5, TType.I32, 'user_id', None, None, ), # 5
    (6, TType.I64, 'bid_price', None, None, ), # 6
    (7, TType.I32, 'click_num', None, None, ), # 7
    (8, TType.I32, 'impr_num', None, None, ), # 8
    (9, TType.I16, 'cost_type', None, None, ), # 9
    (10, TType.I64, 'app_id', None, None, ), # 10
    (11, TType.I16, 'industry', None, None, ), # 11
    (12, TType.I32, 'imp_frequency', None, None, ), # 12
    (13, TType.I16, 'ad_type', None, None, ), # 13
    (14, TType.I16, 'group_op', None, None, ), # 14
    (15, TType.LIST, 'groups', (TType.I32,None), None, ), # 15
  )

  def __init__(self, creative_id=None, score=None, unit_id=None, campaign_id=None, user_id=None, bid_price=None, click_num=None, impr_num=None, cost_type=None, app_id=None, industry=None, imp_frequency=None, ad_type=None, group_op=None, groups=None,):
    self.creative_id = creative_id
    self.score = score
    self.unit_id = unit_id
    self.campaign_id = campaign_id
    self.user_id = user_id
    self.bid_price = bid_price
    self.click_num = click_num
    self.impr_num = impr_num
    self.cost_type = cost_type
    self.app_id = app_id
    self.industry = industry
    self.imp_frequency = imp_frequency
    self.ad_type = ad_type
    self.group_op = group_op
    self.groups = groups

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.creative_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.score = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.unit_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.campaign_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.user_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.bid_price = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.click_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.impr_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I16:
          self.cost_type = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I64:
          self.app_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I16:
          self.industry = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.imp_frequency = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I16:
          self.ad_type = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I16:
          self.group_op = iprot.readI16()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.LIST:
          self.groups = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readI32()
            self.groups.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AdWeight')
    if self.creative_id is not None:
      oprot.writeFieldBegin('creative_id', TType.I32, 1)
      oprot.writeI32(self.creative_id)
      oprot.writeFieldEnd()
    if self.score is not None:
      oprot.writeFieldBegin('score', TType.DOUBLE, 2)
      oprot.writeDouble(self.score)
      oprot.writeFieldEnd()
    if self.unit_id is not None:
      oprot.writeFieldBegin('unit_id', TType.I32, 3)
      oprot.writeI32(self.unit_id)
      oprot.writeFieldEnd()
    if self.campaign_id is not None:
      oprot.writeFieldBegin('campaign_id', TType.I32, 4)
      oprot.writeI32(self.campaign_id)
      oprot.writeFieldEnd()
    if self.user_id is not None:
      oprot.writeFieldBegin('user_id', TType.I32, 5)
      oprot.writeI32(self.user_id)
      oprot.writeFieldEnd()
    if self.bid_price is not None:
      oprot.writeFieldBegin('bid_price', TType.I64, 6)
      oprot.writeI64(self.bid_price)
      oprot.writeFieldEnd()
    if self.click_num is not None:
      oprot.writeFieldBegin('click_num', TType.I32, 7)
      oprot.writeI32(self.click_num)
      oprot.writeFieldEnd()
    if self.impr_num is not None:
      oprot.writeFieldBegin('impr_num', TType.I32, 8)
      oprot.writeI32(self.impr_num)
      oprot.writeFieldEnd()
    if self.cost_type is not None:
      oprot.writeFieldBegin('cost_type', TType.I16, 9)
      oprot.writeI16(self.cost_type)
      oprot.writeFieldEnd()
    if self.app_id is not None:
      oprot.writeFieldBegin('app_id', TType.I64, 10)
      oprot.writeI64(self.app_id)
      oprot.writeFieldEnd()
    if self.industry is not None:
      oprot.writeFieldBegin('industry', TType.I16, 11)
      oprot.writeI16(self.industry)
      oprot.writeFieldEnd()
    if self.imp_frequency is not None:
      oprot.writeFieldBegin('imp_frequency', TType.I32, 12)
      oprot.writeI32(self.imp_frequency)
      oprot.writeFieldEnd()
    if self.ad_type is not None:
      oprot.writeFieldBegin('ad_type', TType.I16, 13)
      oprot.writeI16(self.ad_type)
      oprot.writeFieldEnd()
    if self.group_op is not None:
      oprot.writeFieldBegin('group_op', TType.I16, 14)
      oprot.writeI16(self.group_op)
      oprot.writeFieldEnd()
    if self.groups is not None:
      oprot.writeFieldBegin('groups', TType.LIST, 15)
      oprot.writeListBegin(TType.I32, len(self.groups))
      for iter6 in self.groups:
        oprot.writeI32(iter6)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.creative_id)
    value = (value * 31) ^ hash(self.score)
    value = (value * 31) ^ hash(self.unit_id)
    value = (value * 31) ^ hash(self.campaign_id)
    value = (value * 31) ^ hash(self.user_id)
    value = (value * 31) ^ hash(self.bid_price)
    value = (value * 31) ^ hash(self.click_num)
    value = (value * 31) ^ hash(self.impr_num)
    value = (value * 31) ^ hash(self.cost_type)
    value = (value * 31) ^ hash(self.app_id)
    value = (value * 31) ^ hash(self.industry)
    value = (value * 31) ^ hash(self.imp_frequency)
    value = (value * 31) ^ hash(self.ad_type)
    value = (value * 31) ^ hash(self.group_op)
    value = (value * 31) ^ hash(self.groups)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TargetingSolid:
  """
  Attributes:
   - slot_id
   - target_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'slot_id', None, None, ), # 1
    (2, TType.I32, 'target_id', None, None, ), # 2
  )

  def __init__(self, slot_id=None, target_id=None,):
    self.slot_id = slot_id
    self.target_id = target_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.slot_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.target_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TargetingSolid')
    if self.slot_id is not None:
      oprot.writeFieldBegin('slot_id', TType.I32, 1)
      oprot.writeI32(self.slot_id)
      oprot.writeFieldEnd()
    if self.target_id is not None:
      oprot.writeFieldBegin('target_id', TType.I32, 2)
      oprot.writeI32(self.target_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Req:
  """
  Attributes:
   - user
   - count
   - targeting_solids
   - filter_creative_ids
   - abtest_parameters
   - filter_unit_ids
   - filter_user_ids
   - filter_app_ids
   - keep_industry_ids
   - filter_industry_ids
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'user', (User, User.thrift_spec), None, ), # 1
    (2, TType.I32, 'count', None, 1000, ), # 2
    (3, TType.LIST, 'targeting_solids', (TType.STRUCT,(TargetingSolid, TargetingSolid.thrift_spec)), None, ), # 3
    (4, TType.LIST, 'filter_creative_ids', (TType.I32,None), None, ), # 4
    (5, TType.STRING, 'abtest_parameters', None, None, ), # 5
    (6, TType.LIST, 'filter_unit_ids', (TType.I32,None), None, ), # 6
    (7, TType.LIST, 'filter_user_ids', (TType.I32,None), None, ), # 7
    (8, TType.LIST, 'filter_app_ids', (TType.I64,None), None, ), # 8
    (9, TType.LIST, 'keep_industry_ids', (TType.I32,None), None, ), # 9
    (10, TType.LIST, 'filter_industry_ids', (TType.I32,None), None, ), # 10
  )

  def __init__(self, user=None, count=thrift_spec[2][4], targeting_solids=None, filter_creative_ids=None, abtest_parameters=None, filter_unit_ids=None, filter_user_ids=None, filter_app_ids=None, keep_industry_ids=None, filter_industry_ids=None,):
    self.user = user
    self.count = count
    self.targeting_solids = targeting_solids
    self.filter_creative_ids = filter_creative_ids
    self.abtest_parameters = abtest_parameters
    self.filter_unit_ids = filter_unit_ids
    self.filter_user_ids = filter_user_ids
    self.filter_app_ids = filter_app_ids
    self.keep_industry_ids = keep_industry_ids
    self.filter_industry_ids = filter_industry_ids

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.user = User()
          self.user.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.count = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.targeting_solids = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = TargetingSolid()
            _elem12.read(iprot)
            self.targeting_solids.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.filter_creative_ids = []
          (_etype16, _size13) = iprot.readListBegin()
          for _i17 in xrange(_size13):
            _elem18 = iprot.readI32()
            self.filter_creative_ids.append(_elem18)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.abtest_parameters = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.filter_unit_ids = []
          (_etype22, _size19) = iprot.readListBegin()
          for _i23 in xrange(_size19):
            _elem24 = iprot.readI32()
            self.filter_unit_ids.append(_elem24)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.filter_user_ids = []
          (_etype28, _size25) = iprot.readListBegin()
          for _i29 in xrange(_size25):
            _elem30 = iprot.readI32()
            self.filter_user_ids.append(_elem30)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.LIST:
          self.filter_app_ids = []
          (_etype34, _size31) = iprot.readListBegin()
          for _i35 in xrange(_size31):
            _elem36 = iprot.readI64()
            self.filter_app_ids.append(_elem36)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.LIST:
          self.keep_industry_ids = []
          (_etype40, _size37) = iprot.readListBegin()
          for _i41 in xrange(_size37):
            _elem42 = iprot.readI32()
            self.keep_industry_ids.append(_elem42)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.LIST:
          self.filter_industry_ids = []
          (_etype46, _size43) = iprot.readListBegin()
          for _i47 in xrange(_size43):
            _elem48 = iprot.readI32()
            self.filter_industry_ids.append(_elem48)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Req')
    if self.user is not None:
      oprot.writeFieldBegin('user', TType.STRUCT, 1)
      self.user.write(oprot)
      oprot.writeFieldEnd()
    if self.count is not None:
      oprot.writeFieldBegin('count', TType.I32, 2)
      oprot.writeI32(self.count)
      oprot.writeFieldEnd()
    if self.targeting_solids is not None:
      oprot.writeFieldBegin('targeting_solids', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.targeting_solids))
      for iter49 in self.targeting_solids:
        iter49.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.filter_creative_ids is not None:
      oprot.writeFieldBegin('filter_creative_ids', TType.LIST, 4)
      oprot.writeListBegin(TType.I32, len(self.filter_creative_ids))
      for iter50 in self.filter_creative_ids:
        oprot.writeI32(iter50)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.abtest_parameters is not None:
      oprot.writeFieldBegin('abtest_parameters', TType.STRING, 5)
      oprot.writeString(self.abtest_parameters)
      oprot.writeFieldEnd()
    if self.filter_unit_ids is not None:
      oprot.writeFieldBegin('filter_unit_ids', TType.LIST, 6)
      oprot.writeListBegin(TType.I32, len(self.filter_unit_ids))
      for iter51 in self.filter_unit_ids:
        oprot.writeI32(iter51)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.filter_user_ids is not None:
      oprot.writeFieldBegin('filter_user_ids', TType.LIST, 7)
      oprot.writeListBegin(TType.I32, len(self.filter_user_ids))
      for iter52 in self.filter_user_ids:
        oprot.writeI32(iter52)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.filter_app_ids is not None:
      oprot.writeFieldBegin('filter_app_ids', TType.LIST, 8)
      oprot.writeListBegin(TType.I64, len(self.filter_app_ids))
      for iter53 in self.filter_app_ids:
        oprot.writeI64(iter53)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.keep_industry_ids is not None:
      oprot.writeFieldBegin('keep_industry_ids', TType.LIST, 9)
      oprot.writeListBegin(TType.I32, len(self.keep_industry_ids))
      for iter54 in self.keep_industry_ids:
        oprot.writeI32(iter54)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.filter_industry_ids is not None:
      oprot.writeFieldBegin('filter_industry_ids', TType.LIST, 10)
      oprot.writeListBegin(TType.I32, len(self.filter_industry_ids))
      for iter55 in self.filter_industry_ids:
        oprot.writeI32(iter55)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.user)
    value = (value * 31) ^ hash(self.count)
    value = (value * 31) ^ hash(self.targeting_solids)
    value = (value * 31) ^ hash(self.filter_creative_ids)
    value = (value * 31) ^ hash(self.abtest_parameters)
    value = (value * 31) ^ hash(self.filter_unit_ids)
    value = (value * 31) ^ hash(self.filter_user_ids)
    value = (value * 31) ^ hash(self.filter_app_ids)
    value = (value * 31) ^ hash(self.keep_industry_ids)
    value = (value * 31) ^ hash(self.filter_industry_ids)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Rsp:
  """
  Attributes:
   - ad_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'ad_list', (TType.STRUCT,(AdWeight, AdWeight.thrift_spec)), None, ), # 1
  )

  def __init__(self, ad_list=None,):
    self.ad_list = ad_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.ad_list = []
          (_etype59, _size56) = iprot.readListBegin()
          for _i60 in xrange(_size56):
            _elem61 = AdWeight()
            _elem61.read(iprot)
            self.ad_list.append(_elem61)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Rsp')
    if self.ad_list is not None:
      oprot.writeFieldBegin('ad_list', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.ad_list))
      for iter62 in self.ad_list:
        iter62.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
