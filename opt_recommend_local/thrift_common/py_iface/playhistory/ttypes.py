#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class PlayHistoryReq:
  """
  Attributes:
   - app
   - udid
   - count
   - sources
   - startTime
   - typ
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'app', None, None, ), # 1
    (2, TType.STRING, 'udid', None, None, ), # 2
    (3, TType.I32, 'count', None, None, ), # 3
    (4, TType.LIST, 'sources', (TType.I32,None), None, ), # 4
    (5, TType.I64, 'startTime', None, None, ), # 5
    (6, TType.I32, 'typ', None, None, ), # 6
  )

  def __init__(self, app=None, udid=None, count=None, sources=None, startTime=None, typ=None,):
    self.app = app
    self.udid = udid
    self.count = count
    self.sources = sources
    self.startTime = startTime
    self.typ = typ

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.app = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.udid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.count = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.sources = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readI32();
            self.sources.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.startTime = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.typ = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PlayHistoryReq')
    if self.app is not None:
      oprot.writeFieldBegin('app', TType.STRING, 1)
      oprot.writeString(self.app)
      oprot.writeFieldEnd()
    if self.udid is not None:
      oprot.writeFieldBegin('udid', TType.STRING, 2)
      oprot.writeString(self.udid)
      oprot.writeFieldEnd()
    if self.count is not None:
      oprot.writeFieldBegin('count', TType.I32, 3)
      oprot.writeI32(self.count)
      oprot.writeFieldEnd()
    if self.sources is not None:
      oprot.writeFieldBegin('sources', TType.LIST, 4)
      oprot.writeListBegin(TType.I32, len(self.sources))
      for iter6 in self.sources:
        oprot.writeI32(iter6)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.startTime is not None:
      oprot.writeFieldBegin('startTime', TType.I64, 5)
      oprot.writeI64(self.startTime)
      oprot.writeFieldEnd()
    if self.typ is not None:
      oprot.writeFieldBegin('typ', TType.I32, 6)
      oprot.writeI32(self.typ)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PlayHistoryRes:
  """
  Attributes:
   - cid
   - source
   - playDuration
   - timestamp
   - typ
   - aid
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'cid', None, None, ), # 1
    (2, TType.I32, 'source', None, None, ), # 2
    (3, TType.I32, 'playDuration', None, None, ), # 3
    (4, TType.I64, 'timestamp', None, None, ), # 4
    (5, TType.I32, 'typ', None, None, ), # 5
    (6, TType.I64, 'aid', None, None, ), # 6
  )

  def __init__(self, cid=None, source=None, playDuration=None, timestamp=None, typ=None, aid=None,):
    self.cid = cid
    self.source = source
    self.playDuration = playDuration
    self.timestamp = timestamp
    self.typ = typ
    self.aid = aid

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.cid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.source = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.playDuration = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.timestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.typ = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.aid = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PlayHistoryRes')
    if self.cid is not None:
      oprot.writeFieldBegin('cid', TType.I64, 1)
      oprot.writeI64(self.cid)
      oprot.writeFieldEnd()
    if self.source is not None:
      oprot.writeFieldBegin('source', TType.I32, 2)
      oprot.writeI32(self.source)
      oprot.writeFieldEnd()
    if self.playDuration is not None:
      oprot.writeFieldBegin('playDuration', TType.I32, 3)
      oprot.writeI32(self.playDuration)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.I64, 4)
      oprot.writeI64(self.timestamp)
      oprot.writeFieldEnd()
    if self.typ is not None:
      oprot.writeFieldBegin('typ', TType.I32, 5)
      oprot.writeI32(self.typ)
      oprot.writeFieldEnd()
    if self.aid is not None:
      oprot.writeFieldBegin('aid', TType.I64, 6)
      oprot.writeI64(self.aid)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
