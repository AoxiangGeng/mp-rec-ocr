#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class User:
  """
  Attributes:
   - uid
   - uid_type
   - user_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'uid', None, None, ), # 1
    (2, TType.I32, 'uid_type', None, None, ), # 2
    (3, TType.I64, 'user_id', None, 0, ), # 3
  )

  def __init__(self, uid=None, uid_type=None, user_id=thrift_spec[3][4],):
    self.uid = uid
    self.uid_type = uid_type
    self.user_id = user_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.uid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.uid_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.user_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('User')
    if self.uid is not None:
      oprot.writeFieldBegin('uid', TType.STRING, 1)
      oprot.writeString(self.uid)
      oprot.writeFieldEnd()
    if self.uid_type is not None:
      oprot.writeFieldBegin('uid_type', TType.I32, 2)
      oprot.writeI32(self.uid_type)
      oprot.writeFieldEnd()
    if self.user_id is not None:
      oprot.writeFieldBegin('user_id', TType.I64, 3)
      oprot.writeI64(self.user_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class VideoWeight:
  """
  Attributes:
   - content_id
   - weight
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'content_id', None, None, ), # 1
    (2, TType.DOUBLE, 'weight', None, None, ), # 2
  )

  def __init__(self, content_id=None, weight=None,):
    self.content_id = content_id
    self.weight = weight

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.content_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.weight = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('VideoWeight')
    if self.content_id is not None:
      oprot.writeFieldBegin('content_id', TType.I64, 1)
      oprot.writeI64(self.content_id)
      oprot.writeFieldEnd()
    if self.weight is not None:
      oprot.writeFieldBegin('weight', TType.DOUBLE, 2)
      oprot.writeDouble(self.weight)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Req:
  """
  Attributes:
   - user
   - start_time
   - end_time
   - count
   - channel_id
   - strategy
   - abtest_parameters
   - info
   - video_candidate
   - impr_gids
   - filter_gids
   - context_info_json
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'user', (User, User.thrift_spec), None, ), # 1
    (2, TType.I32, 'start_time', None, 0, ), # 2
    (3, TType.I32, 'end_time', None, 0, ), # 3
    (4, TType.I32, 'count', None, 1000, ), # 4
    (5, TType.I32, 'channel_id', None, 0, ), # 5
    (6, TType.STRING, 'strategy', None, None, ), # 6
    (7, TType.STRING, 'abtest_parameters', None, None, ), # 7
    (8, TType.MAP, 'info', (TType.STRING,None,TType.STRING,None), {
    }, ), # 8
    (9, TType.LIST, 'video_candidate', (TType.I64,None), [
    ], ), # 9
    (10, TType.LIST, 'impr_gids', (TType.I64,None), None, ), # 10
    (11, TType.LIST, 'filter_gids', (TType.I64,None), None, ), # 11
    (12, TType.STRING, 'context_info_json', None, None, ), # 12
  )

  def __init__(self, user=None, start_time=thrift_spec[2][4], end_time=thrift_spec[3][4], count=thrift_spec[4][4], channel_id=thrift_spec[5][4], strategy=None, abtest_parameters=None, info=thrift_spec[8][4], video_candidate=thrift_spec[9][4], impr_gids=None, filter_gids=None, context_info_json=None,):
    self.user = user
    self.start_time = start_time
    self.end_time = end_time
    self.count = count
    self.channel_id = channel_id
    self.strategy = strategy
    self.abtest_parameters = abtest_parameters
    if info is self.thrift_spec[8][4]:
      info = {
    }
    self.info = info
    if video_candidate is self.thrift_spec[9][4]:
      video_candidate = [
    ]
    self.video_candidate = video_candidate
    self.impr_gids = impr_gids
    self.filter_gids = filter_gids
    self.context_info_json = context_info_json

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.user = User()
          self.user.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.start_time = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.end_time = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.count = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.channel_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.strategy = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.abtest_parameters = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.MAP:
          self.info = {}
          (_ktype1, _vtype2, _size0 ) = iprot.readMapBegin()
          for _i4 in xrange(_size0):
            _key5 = iprot.readString();
            _val6 = iprot.readString();
            self.info[_key5] = _val6
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.LIST:
          self.video_candidate = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = iprot.readI64();
            self.video_candidate.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.LIST:
          self.impr_gids = []
          (_etype16, _size13) = iprot.readListBegin()
          for _i17 in xrange(_size13):
            _elem18 = iprot.readI64();
            self.impr_gids.append(_elem18)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.LIST:
          self.filter_gids = []
          (_etype22, _size19) = iprot.readListBegin()
          for _i23 in xrange(_size19):
            _elem24 = iprot.readI64();
            self.filter_gids.append(_elem24)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.context_info_json = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Req')
    if self.user is not None:
      oprot.writeFieldBegin('user', TType.STRUCT, 1)
      self.user.write(oprot)
      oprot.writeFieldEnd()
    if self.start_time is not None:
      oprot.writeFieldBegin('start_time', TType.I32, 2)
      oprot.writeI32(self.start_time)
      oprot.writeFieldEnd()
    if self.end_time is not None:
      oprot.writeFieldBegin('end_time', TType.I32, 3)
      oprot.writeI32(self.end_time)
      oprot.writeFieldEnd()
    if self.count is not None:
      oprot.writeFieldBegin('count', TType.I32, 4)
      oprot.writeI32(self.count)
      oprot.writeFieldEnd()
    if self.channel_id is not None:
      oprot.writeFieldBegin('channel_id', TType.I32, 5)
      oprot.writeI32(self.channel_id)
      oprot.writeFieldEnd()
    if self.strategy is not None:
      oprot.writeFieldBegin('strategy', TType.STRING, 6)
      oprot.writeString(self.strategy)
      oprot.writeFieldEnd()
    if self.abtest_parameters is not None:
      oprot.writeFieldBegin('abtest_parameters', TType.STRING, 7)
      oprot.writeString(self.abtest_parameters)
      oprot.writeFieldEnd()
    if self.info is not None:
      oprot.writeFieldBegin('info', TType.MAP, 8)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.info))
      for kiter25,viter26 in self.info.items():
        oprot.writeString(kiter25)
        oprot.writeString(viter26)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.video_candidate is not None:
      oprot.writeFieldBegin('video_candidate', TType.LIST, 9)
      oprot.writeListBegin(TType.I64, len(self.video_candidate))
      for iter27 in self.video_candidate:
        oprot.writeI64(iter27)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.impr_gids is not None:
      oprot.writeFieldBegin('impr_gids', TType.LIST, 10)
      oprot.writeListBegin(TType.I64, len(self.impr_gids))
      for iter28 in self.impr_gids:
        oprot.writeI64(iter28)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.filter_gids is not None:
      oprot.writeFieldBegin('filter_gids', TType.LIST, 11)
      oprot.writeListBegin(TType.I64, len(self.filter_gids))
      for iter29 in self.filter_gids:
        oprot.writeI64(iter29)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.context_info_json is not None:
      oprot.writeFieldBegin('context_info_json', TType.STRING, 12)
      oprot.writeString(self.context_info_json)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Rsp:
  """
  Attributes:
   - video_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'video_list', (TType.STRUCT,(VideoWeight, VideoWeight.thrift_spec)), None, ), # 1
  )

  def __init__(self, video_list=None,):
    self.video_list = video_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.video_list = []
          (_etype33, _size30) = iprot.readListBegin()
          for _i34 in xrange(_size30):
            _elem35 = VideoWeight()
            _elem35.read(iprot)
            self.video_list.append(_elem35)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Rsp')
    if self.video_list is not None:
      oprot.writeFieldBegin('video_list', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.video_list))
      for iter36 in self.video_list:
        iter36.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
