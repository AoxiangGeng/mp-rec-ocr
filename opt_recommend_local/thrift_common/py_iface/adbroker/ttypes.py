#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class Req:
  """
  Attributes:
   - uid_type
   - uid
   - app_id
   - pos_id
   - count
   - abtest_parameters
   - abtest_ids
   - channel_id
   - user_id
   - refresh_time
   - req_ip
   - area
   - device_brand
   - network
   - device_info
   - video_num
   - platform
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'uid_type', None, None, ), # 1
    (2, TType.STRING, 'uid', None, None, ), # 2
    (3, TType.I32, 'app_id', None, 0, ), # 3
    (4, TType.I32, 'pos_id', None, 0, ), # 4
    (5, TType.I32, 'count', None, 1, ), # 5
    (6, TType.STRING, 'abtest_parameters', None, "", ), # 6
    (7, TType.STRING, 'abtest_ids', None, "", ), # 7
    (8, TType.I32, 'channel_id', None, 0, ), # 8
    (9, TType.I64, 'user_id', None, 0, ), # 9
    (10, TType.I32, 'refresh_time', None, 0, ), # 10
    (11, TType.STRING, 'req_ip', None, "", ), # 11
    (12, TType.STRING, 'area', None, "", ), # 12
    (13, TType.STRING, 'device_brand', None, "", ), # 13
    (14, TType.STRING, 'network', None, "", ), # 14
    (15, TType.STRING, 'device_info', None, "", ), # 15
    (16, TType.I32, 'video_num', None, 8, ), # 16
    (17, TType.I32, 'platform', None, 0, ), # 17
  )

  def __init__(self, uid_type=None, uid=None, app_id=thrift_spec[3][4], pos_id=thrift_spec[4][4], count=thrift_spec[5][4], abtest_parameters=thrift_spec[6][4], abtest_ids=thrift_spec[7][4], channel_id=thrift_spec[8][4], user_id=thrift_spec[9][4], refresh_time=thrift_spec[10][4], req_ip=thrift_spec[11][4], area=thrift_spec[12][4], device_brand=thrift_spec[13][4], network=thrift_spec[14][4], device_info=thrift_spec[15][4], video_num=thrift_spec[16][4], platform=thrift_spec[17][4],):
    self.uid_type = uid_type
    self.uid = uid
    self.app_id = app_id
    self.pos_id = pos_id
    self.count = count
    self.abtest_parameters = abtest_parameters
    self.abtest_ids = abtest_ids
    self.channel_id = channel_id
    self.user_id = user_id
    self.refresh_time = refresh_time
    self.req_ip = req_ip
    self.area = area
    self.device_brand = device_brand
    self.network = network
    self.device_info = device_info
    self.video_num = video_num
    self.platform = platform

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.uid_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.uid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.app_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.pos_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.count = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.abtest_parameters = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.abtest_ids = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.channel_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I64:
          self.user_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.refresh_time = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.req_ip = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.area = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.device_brand = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRING:
          self.network = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.STRING:
          self.device_info = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.I32:
          self.video_num = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.I32:
          self.platform = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Req')
    if self.uid_type is not None:
      oprot.writeFieldBegin('uid_type', TType.I32, 1)
      oprot.writeI32(self.uid_type)
      oprot.writeFieldEnd()
    if self.uid is not None:
      oprot.writeFieldBegin('uid', TType.STRING, 2)
      oprot.writeString(self.uid)
      oprot.writeFieldEnd()
    if self.app_id is not None:
      oprot.writeFieldBegin('app_id', TType.I32, 3)
      oprot.writeI32(self.app_id)
      oprot.writeFieldEnd()
    if self.pos_id is not None:
      oprot.writeFieldBegin('pos_id', TType.I32, 4)
      oprot.writeI32(self.pos_id)
      oprot.writeFieldEnd()
    if self.count is not None:
      oprot.writeFieldBegin('count', TType.I32, 5)
      oprot.writeI32(self.count)
      oprot.writeFieldEnd()
    if self.abtest_parameters is not None:
      oprot.writeFieldBegin('abtest_parameters', TType.STRING, 6)
      oprot.writeString(self.abtest_parameters)
      oprot.writeFieldEnd()
    if self.abtest_ids is not None:
      oprot.writeFieldBegin('abtest_ids', TType.STRING, 7)
      oprot.writeString(self.abtest_ids)
      oprot.writeFieldEnd()
    if self.channel_id is not None:
      oprot.writeFieldBegin('channel_id', TType.I32, 8)
      oprot.writeI32(self.channel_id)
      oprot.writeFieldEnd()
    if self.user_id is not None:
      oprot.writeFieldBegin('user_id', TType.I64, 9)
      oprot.writeI64(self.user_id)
      oprot.writeFieldEnd()
    if self.refresh_time is not None:
      oprot.writeFieldBegin('refresh_time', TType.I32, 10)
      oprot.writeI32(self.refresh_time)
      oprot.writeFieldEnd()
    if self.req_ip is not None:
      oprot.writeFieldBegin('req_ip', TType.STRING, 11)
      oprot.writeString(self.req_ip)
      oprot.writeFieldEnd()
    if self.area is not None:
      oprot.writeFieldBegin('area', TType.STRING, 12)
      oprot.writeString(self.area)
      oprot.writeFieldEnd()
    if self.device_brand is not None:
      oprot.writeFieldBegin('device_brand', TType.STRING, 13)
      oprot.writeString(self.device_brand)
      oprot.writeFieldEnd()
    if self.network is not None:
      oprot.writeFieldBegin('network', TType.STRING, 14)
      oprot.writeString(self.network)
      oprot.writeFieldEnd()
    if self.device_info is not None:
      oprot.writeFieldBegin('device_info', TType.STRING, 15)
      oprot.writeString(self.device_info)
      oprot.writeFieldEnd()
    if self.video_num is not None:
      oprot.writeFieldBegin('video_num', TType.I32, 16)
      oprot.writeI32(self.video_num)
      oprot.writeFieldEnd()
    if self.platform is not None:
      oprot.writeFieldBegin('platform', TType.I32, 17)
      oprot.writeI32(self.platform)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.uid_type)
    value = (value * 31) ^ hash(self.uid)
    value = (value * 31) ^ hash(self.app_id)
    value = (value * 31) ^ hash(self.pos_id)
    value = (value * 31) ^ hash(self.count)
    value = (value * 31) ^ hash(self.abtest_parameters)
    value = (value * 31) ^ hash(self.abtest_ids)
    value = (value * 31) ^ hash(self.channel_id)
    value = (value * 31) ^ hash(self.user_id)
    value = (value * 31) ^ hash(self.refresh_time)
    value = (value * 31) ^ hash(self.req_ip)
    value = (value * 31) ^ hash(self.area)
    value = (value * 31) ^ hash(self.device_brand)
    value = (value * 31) ^ hash(self.network)
    value = (value * 31) ^ hash(self.device_info)
    value = (value * 31) ^ hash(self.video_num)
    value = (value * 31) ^ hash(self.platform)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Rsp:
  """
  Attributes:
   - status
   - ads
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'status', None, "", ), # 1
    (2, TType.LIST, 'ads', (TType.STRING,None), None, ), # 2
  )

  def __init__(self, status=thrift_spec[1][4], ads=None,):
    self.status = status
    self.ads = ads

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.status = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.ads = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readString();
            self.ads.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Rsp')
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.STRING, 1)
      oprot.writeString(self.status)
      oprot.writeFieldEnd()
    if self.ads is not None:
      oprot.writeFieldBegin('ads', TType.LIST, 2)
      oprot.writeListBegin(TType.STRING, len(self.ads))
      for iter6 in self.ads:
        oprot.writeString(iter6)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
