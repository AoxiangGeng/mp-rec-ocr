#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class Req:
  """
  Attributes:
   - user
   - reg_time
   - start_time
   - end_time
   - count
   - req_id
   - ids
   - abtest_parameters
   - debug_enable
   - ab_id
   - json_context_info
   - json_user_info
   - json_content_info
   - json_author_info
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'user', None, None, ), # 1
    (2, TType.I32, 'reg_time', None, 0, ), # 2
    (3, TType.I32, 'start_time', None, None, ), # 3
    (4, TType.I32, 'end_time', None, None, ), # 4
    (5, TType.I32, 'count', None, 50, ), # 5
    (6, TType.STRING, 'req_id', None, None, ), # 6
    (7, TType.LIST, 'ids', (TType.I64,None), None, ), # 7
    (8, TType.STRING, 'abtest_parameters', None, None, ), # 8
    (9, TType.BOOL, 'debug_enable', None, False, ), # 9
    (10, TType.STRING, 'ab_id', None, None, ), # 10
    (11, TType.STRING, 'json_context_info', None, None, ), # 11
    (12, TType.STRING, 'json_user_info', None, None, ), # 12
    (13, TType.LIST, 'json_content_info', (TType.STRING,None), None, ), # 13
    (14, TType.LIST, 'json_author_info', (TType.STRING,None), None, ), # 14
  )

  def __init__(self, user=None, reg_time=thrift_spec[2][4], start_time=None, end_time=None, count=thrift_spec[5][4], req_id=None, ids=None, abtest_parameters=None, debug_enable=thrift_spec[9][4], ab_id=None, json_context_info=None, json_user_info=None, json_content_info=None, json_author_info=None,):
    self.user = user
    self.reg_time = reg_time
    self.start_time = start_time
    self.end_time = end_time
    self.count = count
    self.req_id = req_id
    self.ids = ids
    self.abtest_parameters = abtest_parameters
    self.debug_enable = debug_enable
    self.ab_id = ab_id
    self.json_context_info = json_context_info
    self.json_user_info = json_user_info
    self.json_content_info = json_content_info
    self.json_author_info = json_author_info

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.user = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.reg_time = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.start_time = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.end_time = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.count = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.req_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.ids = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readI64();
            self.ids.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.abtest_parameters = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.BOOL:
          self.debug_enable = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.ab_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.json_context_info = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.json_user_info = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.LIST:
          self.json_content_info = []
          (_etype9, _size6) = iprot.readListBegin()
          for _i10 in xrange(_size6):
            _elem11 = iprot.readString();
            self.json_content_info.append(_elem11)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.LIST:
          self.json_author_info = []
          (_etype15, _size12) = iprot.readListBegin()
          for _i16 in xrange(_size12):
            _elem17 = iprot.readString();
            self.json_author_info.append(_elem17)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Req')
    if self.user is not None:
      oprot.writeFieldBegin('user', TType.STRING, 1)
      oprot.writeString(self.user)
      oprot.writeFieldEnd()
    if self.reg_time is not None:
      oprot.writeFieldBegin('reg_time', TType.I32, 2)
      oprot.writeI32(self.reg_time)
      oprot.writeFieldEnd()
    if self.start_time is not None:
      oprot.writeFieldBegin('start_time', TType.I32, 3)
      oprot.writeI32(self.start_time)
      oprot.writeFieldEnd()
    if self.end_time is not None:
      oprot.writeFieldBegin('end_time', TType.I32, 4)
      oprot.writeI32(self.end_time)
      oprot.writeFieldEnd()
    if self.count is not None:
      oprot.writeFieldBegin('count', TType.I32, 5)
      oprot.writeI32(self.count)
      oprot.writeFieldEnd()
    if self.req_id is not None:
      oprot.writeFieldBegin('req_id', TType.STRING, 6)
      oprot.writeString(self.req_id)
      oprot.writeFieldEnd()
    if self.ids is not None:
      oprot.writeFieldBegin('ids', TType.LIST, 7)
      oprot.writeListBegin(TType.I64, len(self.ids))
      for iter18 in self.ids:
        oprot.writeI64(iter18)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.abtest_parameters is not None:
      oprot.writeFieldBegin('abtest_parameters', TType.STRING, 8)
      oprot.writeString(self.abtest_parameters)
      oprot.writeFieldEnd()
    if self.debug_enable is not None:
      oprot.writeFieldBegin('debug_enable', TType.BOOL, 9)
      oprot.writeBool(self.debug_enable)
      oprot.writeFieldEnd()
    if self.ab_id is not None:
      oprot.writeFieldBegin('ab_id', TType.STRING, 10)
      oprot.writeString(self.ab_id)
      oprot.writeFieldEnd()
    if self.json_context_info is not None:
      oprot.writeFieldBegin('json_context_info', TType.STRING, 11)
      oprot.writeString(self.json_context_info)
      oprot.writeFieldEnd()
    if self.json_user_info is not None:
      oprot.writeFieldBegin('json_user_info', TType.STRING, 12)
      oprot.writeString(self.json_user_info)
      oprot.writeFieldEnd()
    if self.json_content_info is not None:
      oprot.writeFieldBegin('json_content_info', TType.LIST, 13)
      oprot.writeListBegin(TType.STRING, len(self.json_content_info))
      for iter19 in self.json_content_info:
        oprot.writeString(iter19)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.json_author_info is not None:
      oprot.writeFieldBegin('json_author_info', TType.LIST, 14)
      oprot.writeListBegin(TType.STRING, len(self.json_author_info))
      for iter20 in self.json_author_info:
        oprot.writeString(iter20)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class SortContent:
  """
  Attributes:
   - id
   - score
  """

  thrift_spec = (
    None, # 0
    None, # 1
    (2, TType.I64, 'id', None, None, ), # 2
    (3, TType.DOUBLE, 'score', None, None, ), # 3
  )

  def __init__(self, id=None, score=None,):
    self.id = id
    self.score = score

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 2:
        if ftype == TType.I64:
          self.id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.score = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('SortContent')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I64, 2)
      oprot.writeI64(self.id)
      oprot.writeFieldEnd()
    if self.score is not None:
      oprot.writeFieldBegin('score', TType.DOUBLE, 3)
      oprot.writeDouble(self.score)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Rsp:
  """
  Attributes:
   - contents
   - status
   - features
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'contents', (TType.STRUCT,(SortContent, SortContent.thrift_spec)), None, ), # 1
    (2, TType.STRING, 'status', None, "", ), # 2
    (3, TType.LIST, 'features', (TType.STRING,None), [
    ], ), # 3
  )

  def __init__(self, contents=None, status=thrift_spec[2][4], features=thrift_spec[3][4],):
    self.contents = contents
    self.status = status
    if features is self.thrift_spec[3][4]:
      features = [
    ]
    self.features = features

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.contents = []
          (_etype24, _size21) = iprot.readListBegin()
          for _i25 in xrange(_size21):
            _elem26 = SortContent()
            _elem26.read(iprot)
            self.contents.append(_elem26)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.status = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.features = []
          (_etype30, _size27) = iprot.readListBegin()
          for _i31 in xrange(_size27):
            _elem32 = iprot.readString();
            self.features.append(_elem32)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Rsp')
    if self.contents is not None:
      oprot.writeFieldBegin('contents', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.contents))
      for iter33 in self.contents:
        iter33.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.STRING, 2)
      oprot.writeString(self.status)
      oprot.writeFieldEnd()
    if self.features is not None:
      oprot.writeFieldBegin('features', TType.LIST, 3)
      oprot.writeListBegin(TType.STRING, len(self.features))
      for iter34 in self.features:
        oprot.writeString(iter34)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
