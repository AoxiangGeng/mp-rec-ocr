#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class User:
  """
  Attributes:
   - uid
   - uid_type
   - user_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'uid', None, None, ), # 1
    (2, TType.I32, 'uid_type', None, None, ), # 2
    (3, TType.I64, 'user_id', None, 0, ), # 3
  )

  def __init__(self, uid=None, uid_type=None, user_id=thrift_spec[3][4],):
    self.uid = uid
    self.uid_type = uid_type
    self.user_id = user_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.uid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.uid_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.user_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('User')
    if self.uid is not None:
      oprot.writeFieldBegin('uid', TType.STRING, 1)
      oprot.writeString(self.uid)
      oprot.writeFieldEnd()
    if self.uid_type is not None:
      oprot.writeFieldBegin('uid_type', TType.I32, 2)
      oprot.writeI32(self.uid_type)
      oprot.writeFieldEnd()
    if self.user_id is not None:
      oprot.writeFieldBegin('user_id', TType.I64, 3)
      oprot.writeI64(self.user_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AD:
  """
  Attributes:
   - campaign_id
   - creative_id
   - user_id
   - unit_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'campaign_id', None, None, ), # 1
    (2, TType.I32, 'creative_id', None, None, ), # 2
    (3, TType.I32, 'user_id', None, None, ), # 3
    (4, TType.I32, 'unit_id', None, None, ), # 4
  )

  def __init__(self, campaign_id=None, creative_id=None, user_id=None, unit_id=None,):
    self.campaign_id = campaign_id
    self.creative_id = creative_id
    self.user_id = user_id
    self.unit_id = unit_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.campaign_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.creative_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.user_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.unit_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AD')
    if self.campaign_id is not None:
      oprot.writeFieldBegin('campaign_id', TType.I32, 1)
      oprot.writeI32(self.campaign_id)
      oprot.writeFieldEnd()
    if self.creative_id is not None:
      oprot.writeFieldBegin('creative_id', TType.I32, 2)
      oprot.writeI32(self.creative_id)
      oprot.writeFieldEnd()
    if self.user_id is not None:
      oprot.writeFieldBegin('user_id', TType.I32, 3)
      oprot.writeI32(self.user_id)
      oprot.writeFieldEnd()
    if self.unit_id is not None:
      oprot.writeFieldBegin('unit_id', TType.I32, 4)
      oprot.writeI32(self.unit_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Behavior:
  """
  Attributes:
   - click_duraiton
   - down_duration
   - up_duration
   - down_pos_x
   - down_pos_y
   - drag_flag
   - switch_flag
   - play_duration
   - display_width
   - display_height
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'click_duraiton', None, None, ), # 1
    (2, TType.I32, 'down_duration', None, None, ), # 2
    (3, TType.I32, 'up_duration', None, None, ), # 3
    (4, TType.I32, 'down_pos_x', None, None, ), # 4
    (5, TType.I32, 'down_pos_y', None, None, ), # 5
    (6, TType.I16, 'drag_flag', None, None, ), # 6
    (7, TType.I16, 'switch_flag', None, None, ), # 7
    (8, TType.I32, 'play_duration', None, None, ), # 8
    (9, TType.I32, 'display_width', None, None, ), # 9
    (10, TType.I32, 'display_height', None, None, ), # 10
  )

  def __init__(self, click_duraiton=None, down_duration=None, up_duration=None, down_pos_x=None, down_pos_y=None, drag_flag=None, switch_flag=None, play_duration=None, display_width=None, display_height=None,):
    self.click_duraiton = click_duraiton
    self.down_duration = down_duration
    self.up_duration = up_duration
    self.down_pos_x = down_pos_x
    self.down_pos_y = down_pos_y
    self.drag_flag = drag_flag
    self.switch_flag = switch_flag
    self.play_duration = play_duration
    self.display_width = display_width
    self.display_height = display_height

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.click_duraiton = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.down_duration = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.up_duration = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.down_pos_x = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.down_pos_y = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I16:
          self.drag_flag = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I16:
          self.switch_flag = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.play_duration = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.display_width = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.display_height = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Behavior')
    if self.click_duraiton is not None:
      oprot.writeFieldBegin('click_duraiton', TType.I32, 1)
      oprot.writeI32(self.click_duraiton)
      oprot.writeFieldEnd()
    if self.down_duration is not None:
      oprot.writeFieldBegin('down_duration', TType.I32, 2)
      oprot.writeI32(self.down_duration)
      oprot.writeFieldEnd()
    if self.up_duration is not None:
      oprot.writeFieldBegin('up_duration', TType.I32, 3)
      oprot.writeI32(self.up_duration)
      oprot.writeFieldEnd()
    if self.down_pos_x is not None:
      oprot.writeFieldBegin('down_pos_x', TType.I32, 4)
      oprot.writeI32(self.down_pos_x)
      oprot.writeFieldEnd()
    if self.down_pos_y is not None:
      oprot.writeFieldBegin('down_pos_y', TType.I32, 5)
      oprot.writeI32(self.down_pos_y)
      oprot.writeFieldEnd()
    if self.drag_flag is not None:
      oprot.writeFieldBegin('drag_flag', TType.I16, 6)
      oprot.writeI16(self.drag_flag)
      oprot.writeFieldEnd()
    if self.switch_flag is not None:
      oprot.writeFieldBegin('switch_flag', TType.I16, 7)
      oprot.writeI16(self.switch_flag)
      oprot.writeFieldEnd()
    if self.play_duration is not None:
      oprot.writeFieldBegin('play_duration', TType.I32, 8)
      oprot.writeI32(self.play_duration)
      oprot.writeFieldEnd()
    if self.display_width is not None:
      oprot.writeFieldBegin('display_width', TType.I32, 9)
      oprot.writeI32(self.display_width)
      oprot.writeFieldEnd()
    if self.display_height is not None:
      oprot.writeFieldBegin('display_height', TType.I32, 10)
      oprot.writeI32(self.display_height)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AdOperation:
  """
  Attributes:
   - user
   - ad
   - view_time
   - click_time
   - view_ip
   - click_ip
   - price_type
   - behavior
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'user', (User, User.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ad', (AD, AD.thrift_spec), None, ), # 2
    (3, TType.I32, 'view_time', None, None, ), # 3
    (4, TType.I32, 'click_time', None, None, ), # 4
    (5, TType.STRING, 'view_ip', None, None, ), # 5
    (6, TType.STRING, 'click_ip', None, None, ), # 6
    (7, TType.I16, 'price_type', None, None, ), # 7
    (8, TType.STRUCT, 'behavior', (Behavior, Behavior.thrift_spec), None, ), # 8
  )

  def __init__(self, user=None, ad=None, view_time=None, click_time=None, view_ip=None, click_ip=None, price_type=None, behavior=None,):
    self.user = user
    self.ad = ad
    self.view_time = view_time
    self.click_time = click_time
    self.view_ip = view_ip
    self.click_ip = click_ip
    self.price_type = price_type
    self.behavior = behavior

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.user = User()
          self.user.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ad = AD()
          self.ad.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.view_time = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.click_time = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.view_ip = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.click_ip = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I16:
          self.price_type = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRUCT:
          self.behavior = Behavior()
          self.behavior.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AdOperation')
    if self.user is not None:
      oprot.writeFieldBegin('user', TType.STRUCT, 1)
      self.user.write(oprot)
      oprot.writeFieldEnd()
    if self.ad is not None:
      oprot.writeFieldBegin('ad', TType.STRUCT, 2)
      self.ad.write(oprot)
      oprot.writeFieldEnd()
    if self.view_time is not None:
      oprot.writeFieldBegin('view_time', TType.I32, 3)
      oprot.writeI32(self.view_time)
      oprot.writeFieldEnd()
    if self.click_time is not None:
      oprot.writeFieldBegin('click_time', TType.I32, 4)
      oprot.writeI32(self.click_time)
      oprot.writeFieldEnd()
    if self.view_ip is not None:
      oprot.writeFieldBegin('view_ip', TType.STRING, 5)
      oprot.writeString(self.view_ip)
      oprot.writeFieldEnd()
    if self.click_ip is not None:
      oprot.writeFieldBegin('click_ip', TType.STRING, 6)
      oprot.writeString(self.click_ip)
      oprot.writeFieldEnd()
    if self.price_type is not None:
      oprot.writeFieldBegin('price_type', TType.I16, 7)
      oprot.writeI16(self.price_type)
      oprot.writeFieldEnd()
    if self.behavior is not None:
      oprot.writeFieldBegin('behavior', TType.STRUCT, 8)
      self.behavior.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AntiSpamResult:
  """
  Attributes:
   - status
   - fraud_type
  """

  thrift_spec = (
    None, # 0
    (1, TType.I16, 'status', None, None, ), # 1
    (2, TType.I16, 'fraud_type', None, None, ), # 2
  )

  def __init__(self, status=None, fraud_type=None,):
    self.status = status
    self.fraud_type = fraud_type

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I16:
          self.status = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I16:
          self.fraud_type = iprot.readI16();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AntiSpamResult')
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I16, 1)
      oprot.writeI16(self.status)
      oprot.writeFieldEnd()
    if self.fraud_type is not None:
      oprot.writeFieldBegin('fraud_type', TType.I16, 2)
      oprot.writeI16(self.fraud_type)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AntiSpamCheckReq:
  """
  Attributes:
   - ad_operate_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'ad_operate_list', (TType.STRUCT,(AdOperation, AdOperation.thrift_spec)), None, ), # 1
  )

  def __init__(self, ad_operate_list=None,):
    self.ad_operate_list = ad_operate_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.ad_operate_list = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = AdOperation()
            _elem5.read(iprot)
            self.ad_operate_list.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AntiSpamCheckReq')
    if self.ad_operate_list is not None:
      oprot.writeFieldBegin('ad_operate_list', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.ad_operate_list))
      for iter6 in self.ad_operate_list:
        iter6.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AntiSpamCheckGetRsp:
  """
  Attributes:
   - antispam_result_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'antispam_result_list', (TType.STRUCT,(AntiSpamResult, AntiSpamResult.thrift_spec)), None, ), # 1
  )

  def __init__(self, antispam_result_list=None,):
    self.antispam_result_list = antispam_result_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.antispam_result_list = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = AntiSpamResult()
            _elem12.read(iprot)
            self.antispam_result_list.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AntiSpamCheckGetRsp')
    if self.antispam_result_list is not None:
      oprot.writeFieldBegin('antispam_result_list', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.antispam_result_list))
      for iter13 in self.antispam_result_list:
        iter13.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
