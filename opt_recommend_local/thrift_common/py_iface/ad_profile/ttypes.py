#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class KV:
  """
  Attributes:
   - key
   - weight
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'key', None, None, ), # 1
    (2, TType.DOUBLE, 'weight', None, None, ), # 2
  )

  def __init__(self, key=None, weight=None,):
    self.key = key
    self.weight = weight

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.key = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.weight = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('KV')
    if self.key is not None:
      oprot.writeFieldBegin('key', TType.I64, 1)
      oprot.writeI64(self.key)
      oprot.writeFieldEnd()
    if self.weight is not None:
      oprot.writeFieldBegin('weight', TType.DOUBLE, 2)
      oprot.writeDouble(self.weight)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AD:
  """
  Attributes:
   - creative_id
   - ad_user_id
   - title
   - image_url
   - sponsor_name
   - industry_catagory
   - campaign_id
   - unit_id
   - bid_price
   - cost_type
   - creative_type
   - create_time
   - start_time
   - end_time
   - product_type
   - landing_url
   - ext
   - unit_day_budget
   - camp_day_budget
   - monitor_url
   - area_code
   - device_brand
   - network
   - time_target
   - balance
   - impr_num
   - click_num
   - status
   - unit_day_cost
   - camp_day_cost
   - unit_impr_num
   - unit_click_num
   - camp_impr_num
   - camp_click_num
   - creative_day_impr_num
   - creative_day_click_num
   - download_url
   - sponsor_icon
   - package_info
   - btn_text_key
   - btn_text_value
   - video_resource
   - quantity
   - unit_day_impr_num
   - ad_title_keyword
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'creative_id', None, None, ), # 1
    (2, TType.I32, 'ad_user_id', None, None, ), # 2
    (3, TType.STRING, 'title', None, None, ), # 3
    (4, TType.STRING, 'image_url', None, None, ), # 4
    (5, TType.STRING, 'sponsor_name', None, None, ), # 5
    (6, TType.I16, 'industry_catagory', None, None, ), # 6
    (7, TType.I32, 'campaign_id', None, None, ), # 7
    (8, TType.I32, 'unit_id', None, None, ), # 8
    (9, TType.I64, 'bid_price', None, None, ), # 9
    (10, TType.I16, 'cost_type', None, None, ), # 10
    (11, TType.I16, 'creative_type', None, None, ), # 11
    (12, TType.I32, 'create_time', None, None, ), # 12
    (13, TType.I32, 'start_time', None, None, ), # 13
    (14, TType.I32, 'end_time', None, None, ), # 14
    (15, TType.I16, 'product_type', None, None, ), # 15
    (16, TType.STRING, 'landing_url', None, None, ), # 16
    (17, TType.STRING, 'ext', None, None, ), # 17
    (18, TType.I64, 'unit_day_budget', None, None, ), # 18
    (19, TType.I64, 'camp_day_budget', None, None, ), # 19
    (20, TType.STRING, 'monitor_url', None, None, ), # 20
    (21, TType.LIST, 'area_code', (TType.STRUCT,(KV, KV.thrift_spec)), None, ), # 21
    (22, TType.LIST, 'device_brand', (TType.STRUCT,(KV, KV.thrift_spec)), None, ), # 22
    (23, TType.LIST, 'network', (TType.STRUCT,(KV, KV.thrift_spec)), None, ), # 23
    (24, TType.LIST, 'time_target', (TType.I64,None), None, ), # 24
    (25, TType.I64, 'balance', None, None, ), # 25
    (26, TType.I32, 'impr_num', None, None, ), # 26
    (27, TType.I32, 'click_num', None, None, ), # 27
    (28, TType.I16, 'status', None, None, ), # 28
    (29, TType.I64, 'unit_day_cost', None, None, ), # 29
    (30, TType.I64, 'camp_day_cost', None, None, ), # 30
    (31, TType.I32, 'unit_impr_num', None, None, ), # 31
    (32, TType.I32, 'unit_click_num', None, None, ), # 32
    (33, TType.I32, 'camp_impr_num', None, None, ), # 33
    (34, TType.I32, 'camp_click_num', None, None, ), # 34
    (35, TType.I32, 'creative_day_impr_num', None, None, ), # 35
    (36, TType.I32, 'creative_day_click_num', None, None, ), # 36
    (37, TType.STRING, 'download_url', None, None, ), # 37
    (38, TType.STRING, 'sponsor_icon', None, None, ), # 38
    (39, TType.STRING, 'package_info', None, None, ), # 39
    (40, TType.I16, 'btn_text_key', None, None, ), # 40
    (41, TType.STRING, 'btn_text_value', None, None, ), # 41
    (42, TType.STRING, 'video_resource', None, None, ), # 42
    (43, TType.I32, 'quantity', None, None, ), # 43
    (44, TType.I32, 'unit_day_impr_num', None, None, ), # 44
    (45, TType.STRING, 'ad_title_keyword', None, None, ), # 45
  )

  def __init__(self, creative_id=None, ad_user_id=None, title=None, image_url=None, sponsor_name=None, industry_catagory=None, campaign_id=None, unit_id=None, bid_price=None, cost_type=None, creative_type=None, create_time=None, start_time=None, end_time=None, product_type=None, landing_url=None, ext=None, unit_day_budget=None, camp_day_budget=None, monitor_url=None, area_code=None, device_brand=None, network=None, time_target=None, balance=None, impr_num=None, click_num=None, status=None, unit_day_cost=None, camp_day_cost=None, unit_impr_num=None, unit_click_num=None, camp_impr_num=None, camp_click_num=None, creative_day_impr_num=None, creative_day_click_num=None, download_url=None, sponsor_icon=None, package_info=None, btn_text_key=None, btn_text_value=None, video_resource=None, quantity=None, unit_day_impr_num=None, ad_title_keyword=None,):
    self.creative_id = creative_id
    self.ad_user_id = ad_user_id
    self.title = title
    self.image_url = image_url
    self.sponsor_name = sponsor_name
    self.industry_catagory = industry_catagory
    self.campaign_id = campaign_id
    self.unit_id = unit_id
    self.bid_price = bid_price
    self.cost_type = cost_type
    self.creative_type = creative_type
    self.create_time = create_time
    self.start_time = start_time
    self.end_time = end_time
    self.product_type = product_type
    self.landing_url = landing_url
    self.ext = ext
    self.unit_day_budget = unit_day_budget
    self.camp_day_budget = camp_day_budget
    self.monitor_url = monitor_url
    self.area_code = area_code
    self.device_brand = device_brand
    self.network = network
    self.time_target = time_target
    self.balance = balance
    self.impr_num = impr_num
    self.click_num = click_num
    self.status = status
    self.unit_day_cost = unit_day_cost
    self.camp_day_cost = camp_day_cost
    self.unit_impr_num = unit_impr_num
    self.unit_click_num = unit_click_num
    self.camp_impr_num = camp_impr_num
    self.camp_click_num = camp_click_num
    self.creative_day_impr_num = creative_day_impr_num
    self.creative_day_click_num = creative_day_click_num
    self.download_url = download_url
    self.sponsor_icon = sponsor_icon
    self.package_info = package_info
    self.btn_text_key = btn_text_key
    self.btn_text_value = btn_text_value
    self.video_resource = video_resource
    self.quantity = quantity
    self.unit_day_impr_num = unit_day_impr_num
    self.ad_title_keyword = ad_title_keyword

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.creative_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.ad_user_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.title = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.image_url = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.sponsor_name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I16:
          self.industry_catagory = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.campaign_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.unit_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I64:
          self.bid_price = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I16:
          self.cost_type = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I16:
          self.creative_type = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.create_time = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I32:
          self.start_time = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I32:
          self.end_time = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.I16:
          self.product_type = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.STRING:
          self.landing_url = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.STRING:
          self.ext = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.I64:
          self.unit_day_budget = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.I64:
          self.camp_day_budget = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.STRING:
          self.monitor_url = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.LIST:
          self.area_code = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = KV()
            _elem5.read(iprot)
            self.area_code.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.LIST:
          self.device_brand = []
          (_etype9, _size6) = iprot.readListBegin()
          for _i10 in xrange(_size6):
            _elem11 = KV()
            _elem11.read(iprot)
            self.device_brand.append(_elem11)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.LIST:
          self.network = []
          (_etype15, _size12) = iprot.readListBegin()
          for _i16 in xrange(_size12):
            _elem17 = KV()
            _elem17.read(iprot)
            self.network.append(_elem17)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 24:
        if ftype == TType.LIST:
          self.time_target = []
          (_etype21, _size18) = iprot.readListBegin()
          for _i22 in xrange(_size18):
            _elem23 = iprot.readI64();
            self.time_target.append(_elem23)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 25:
        if ftype == TType.I64:
          self.balance = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 26:
        if ftype == TType.I32:
          self.impr_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 27:
        if ftype == TType.I32:
          self.click_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 28:
        if ftype == TType.I16:
          self.status = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 29:
        if ftype == TType.I64:
          self.unit_day_cost = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.I64:
          self.camp_day_cost = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 31:
        if ftype == TType.I32:
          self.unit_impr_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 32:
        if ftype == TType.I32:
          self.unit_click_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 33:
        if ftype == TType.I32:
          self.camp_impr_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 34:
        if ftype == TType.I32:
          self.camp_click_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 35:
        if ftype == TType.I32:
          self.creative_day_impr_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 36:
        if ftype == TType.I32:
          self.creative_day_click_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 37:
        if ftype == TType.STRING:
          self.download_url = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 38:
        if ftype == TType.STRING:
          self.sponsor_icon = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 39:
        if ftype == TType.STRING:
          self.package_info = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 40:
        if ftype == TType.I16:
          self.btn_text_key = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 41:
        if ftype == TType.STRING:
          self.btn_text_value = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 42:
        if ftype == TType.STRING:
          self.video_resource = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 43:
        if ftype == TType.I32:
          self.quantity = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 44:
        if ftype == TType.I32:
          self.unit_day_impr_num = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 45:
        if ftype == TType.STRING:
          self.ad_title_keyword = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AD')
    if self.creative_id is not None:
      oprot.writeFieldBegin('creative_id', TType.I32, 1)
      oprot.writeI32(self.creative_id)
      oprot.writeFieldEnd()
    if self.ad_user_id is not None:
      oprot.writeFieldBegin('ad_user_id', TType.I32, 2)
      oprot.writeI32(self.ad_user_id)
      oprot.writeFieldEnd()
    if self.title is not None:
      oprot.writeFieldBegin('title', TType.STRING, 3)
      oprot.writeString(self.title)
      oprot.writeFieldEnd()
    if self.image_url is not None:
      oprot.writeFieldBegin('image_url', TType.STRING, 4)
      oprot.writeString(self.image_url)
      oprot.writeFieldEnd()
    if self.sponsor_name is not None:
      oprot.writeFieldBegin('sponsor_name', TType.STRING, 5)
      oprot.writeString(self.sponsor_name)
      oprot.writeFieldEnd()
    if self.industry_catagory is not None:
      oprot.writeFieldBegin('industry_catagory', TType.I16, 6)
      oprot.writeI16(self.industry_catagory)
      oprot.writeFieldEnd()
    if self.campaign_id is not None:
      oprot.writeFieldBegin('campaign_id', TType.I32, 7)
      oprot.writeI32(self.campaign_id)
      oprot.writeFieldEnd()
    if self.unit_id is not None:
      oprot.writeFieldBegin('unit_id', TType.I32, 8)
      oprot.writeI32(self.unit_id)
      oprot.writeFieldEnd()
    if self.bid_price is not None:
      oprot.writeFieldBegin('bid_price', TType.I64, 9)
      oprot.writeI64(self.bid_price)
      oprot.writeFieldEnd()
    if self.cost_type is not None:
      oprot.writeFieldBegin('cost_type', TType.I16, 10)
      oprot.writeI16(self.cost_type)
      oprot.writeFieldEnd()
    if self.creative_type is not None:
      oprot.writeFieldBegin('creative_type', TType.I16, 11)
      oprot.writeI16(self.creative_type)
      oprot.writeFieldEnd()
    if self.create_time is not None:
      oprot.writeFieldBegin('create_time', TType.I32, 12)
      oprot.writeI32(self.create_time)
      oprot.writeFieldEnd()
    if self.start_time is not None:
      oprot.writeFieldBegin('start_time', TType.I32, 13)
      oprot.writeI32(self.start_time)
      oprot.writeFieldEnd()
    if self.end_time is not None:
      oprot.writeFieldBegin('end_time', TType.I32, 14)
      oprot.writeI32(self.end_time)
      oprot.writeFieldEnd()
    if self.product_type is not None:
      oprot.writeFieldBegin('product_type', TType.I16, 15)
      oprot.writeI16(self.product_type)
      oprot.writeFieldEnd()
    if self.landing_url is not None:
      oprot.writeFieldBegin('landing_url', TType.STRING, 16)
      oprot.writeString(self.landing_url)
      oprot.writeFieldEnd()
    if self.ext is not None:
      oprot.writeFieldBegin('ext', TType.STRING, 17)
      oprot.writeString(self.ext)
      oprot.writeFieldEnd()
    if self.unit_day_budget is not None:
      oprot.writeFieldBegin('unit_day_budget', TType.I64, 18)
      oprot.writeI64(self.unit_day_budget)
      oprot.writeFieldEnd()
    if self.camp_day_budget is not None:
      oprot.writeFieldBegin('camp_day_budget', TType.I64, 19)
      oprot.writeI64(self.camp_day_budget)
      oprot.writeFieldEnd()
    if self.monitor_url is not None:
      oprot.writeFieldBegin('monitor_url', TType.STRING, 20)
      oprot.writeString(self.monitor_url)
      oprot.writeFieldEnd()
    if self.area_code is not None:
      oprot.writeFieldBegin('area_code', TType.LIST, 21)
      oprot.writeListBegin(TType.STRUCT, len(self.area_code))
      for iter24 in self.area_code:
        iter24.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.device_brand is not None:
      oprot.writeFieldBegin('device_brand', TType.LIST, 22)
      oprot.writeListBegin(TType.STRUCT, len(self.device_brand))
      for iter25 in self.device_brand:
        iter25.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.network is not None:
      oprot.writeFieldBegin('network', TType.LIST, 23)
      oprot.writeListBegin(TType.STRUCT, len(self.network))
      for iter26 in self.network:
        iter26.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.time_target is not None:
      oprot.writeFieldBegin('time_target', TType.LIST, 24)
      oprot.writeListBegin(TType.I64, len(self.time_target))
      for iter27 in self.time_target:
        oprot.writeI64(iter27)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.balance is not None:
      oprot.writeFieldBegin('balance', TType.I64, 25)
      oprot.writeI64(self.balance)
      oprot.writeFieldEnd()
    if self.impr_num is not None:
      oprot.writeFieldBegin('impr_num', TType.I32, 26)
      oprot.writeI32(self.impr_num)
      oprot.writeFieldEnd()
    if self.click_num is not None:
      oprot.writeFieldBegin('click_num', TType.I32, 27)
      oprot.writeI32(self.click_num)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I16, 28)
      oprot.writeI16(self.status)
      oprot.writeFieldEnd()
    if self.unit_day_cost is not None:
      oprot.writeFieldBegin('unit_day_cost', TType.I64, 29)
      oprot.writeI64(self.unit_day_cost)
      oprot.writeFieldEnd()
    if self.camp_day_cost is not None:
      oprot.writeFieldBegin('camp_day_cost', TType.I64, 30)
      oprot.writeI64(self.camp_day_cost)
      oprot.writeFieldEnd()
    if self.unit_impr_num is not None:
      oprot.writeFieldBegin('unit_impr_num', TType.I32, 31)
      oprot.writeI32(self.unit_impr_num)
      oprot.writeFieldEnd()
    if self.unit_click_num is not None:
      oprot.writeFieldBegin('unit_click_num', TType.I32, 32)
      oprot.writeI32(self.unit_click_num)
      oprot.writeFieldEnd()
    if self.camp_impr_num is not None:
      oprot.writeFieldBegin('camp_impr_num', TType.I32, 33)
      oprot.writeI32(self.camp_impr_num)
      oprot.writeFieldEnd()
    if self.camp_click_num is not None:
      oprot.writeFieldBegin('camp_click_num', TType.I32, 34)
      oprot.writeI32(self.camp_click_num)
      oprot.writeFieldEnd()
    if self.creative_day_impr_num is not None:
      oprot.writeFieldBegin('creative_day_impr_num', TType.I32, 35)
      oprot.writeI32(self.creative_day_impr_num)
      oprot.writeFieldEnd()
    if self.creative_day_click_num is not None:
      oprot.writeFieldBegin('creative_day_click_num', TType.I32, 36)
      oprot.writeI32(self.creative_day_click_num)
      oprot.writeFieldEnd()
    if self.download_url is not None:
      oprot.writeFieldBegin('download_url', TType.STRING, 37)
      oprot.writeString(self.download_url)
      oprot.writeFieldEnd()
    if self.sponsor_icon is not None:
      oprot.writeFieldBegin('sponsor_icon', TType.STRING, 38)
      oprot.writeString(self.sponsor_icon)
      oprot.writeFieldEnd()
    if self.package_info is not None:
      oprot.writeFieldBegin('package_info', TType.STRING, 39)
      oprot.writeString(self.package_info)
      oprot.writeFieldEnd()
    if self.btn_text_key is not None:
      oprot.writeFieldBegin('btn_text_key', TType.I16, 40)
      oprot.writeI16(self.btn_text_key)
      oprot.writeFieldEnd()
    if self.btn_text_value is not None:
      oprot.writeFieldBegin('btn_text_value', TType.STRING, 41)
      oprot.writeString(self.btn_text_value)
      oprot.writeFieldEnd()
    if self.video_resource is not None:
      oprot.writeFieldBegin('video_resource', TType.STRING, 42)
      oprot.writeString(self.video_resource)
      oprot.writeFieldEnd()
    if self.quantity is not None:
      oprot.writeFieldBegin('quantity', TType.I32, 43)
      oprot.writeI32(self.quantity)
      oprot.writeFieldEnd()
    if self.unit_day_impr_num is not None:
      oprot.writeFieldBegin('unit_day_impr_num', TType.I32, 44)
      oprot.writeI32(self.unit_day_impr_num)
      oprot.writeFieldEnd()
    if self.ad_title_keyword is not None:
      oprot.writeFieldBegin('ad_title_keyword', TType.STRING, 45)
      oprot.writeString(self.ad_title_keyword)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.creative_id)
    value = (value * 31) ^ hash(self.ad_user_id)
    value = (value * 31) ^ hash(self.title)
    value = (value * 31) ^ hash(self.image_url)
    value = (value * 31) ^ hash(self.sponsor_name)
    value = (value * 31) ^ hash(self.industry_catagory)
    value = (value * 31) ^ hash(self.campaign_id)
    value = (value * 31) ^ hash(self.unit_id)
    value = (value * 31) ^ hash(self.bid_price)
    value = (value * 31) ^ hash(self.cost_type)
    value = (value * 31) ^ hash(self.creative_type)
    value = (value * 31) ^ hash(self.create_time)
    value = (value * 31) ^ hash(self.start_time)
    value = (value * 31) ^ hash(self.end_time)
    value = (value * 31) ^ hash(self.product_type)
    value = (value * 31) ^ hash(self.landing_url)
    value = (value * 31) ^ hash(self.ext)
    value = (value * 31) ^ hash(self.unit_day_budget)
    value = (value * 31) ^ hash(self.camp_day_budget)
    value = (value * 31) ^ hash(self.monitor_url)
    value = (value * 31) ^ hash(self.area_code)
    value = (value * 31) ^ hash(self.device_brand)
    value = (value * 31) ^ hash(self.network)
    value = (value * 31) ^ hash(self.time_target)
    value = (value * 31) ^ hash(self.balance)
    value = (value * 31) ^ hash(self.impr_num)
    value = (value * 31) ^ hash(self.click_num)
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.unit_day_cost)
    value = (value * 31) ^ hash(self.camp_day_cost)
    value = (value * 31) ^ hash(self.unit_impr_num)
    value = (value * 31) ^ hash(self.unit_click_num)
    value = (value * 31) ^ hash(self.camp_impr_num)
    value = (value * 31) ^ hash(self.camp_click_num)
    value = (value * 31) ^ hash(self.creative_day_impr_num)
    value = (value * 31) ^ hash(self.creative_day_click_num)
    value = (value * 31) ^ hash(self.download_url)
    value = (value * 31) ^ hash(self.sponsor_icon)
    value = (value * 31) ^ hash(self.package_info)
    value = (value * 31) ^ hash(self.btn_text_key)
    value = (value * 31) ^ hash(self.btn_text_value)
    value = (value * 31) ^ hash(self.video_resource)
    value = (value * 31) ^ hash(self.quantity)
    value = (value * 31) ^ hash(self.unit_day_impr_num)
    value = (value * 31) ^ hash(self.ad_title_keyword)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ADGetReq:
  """
  Attributes:
   - creative_id_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'creative_id_list', (TType.I32,None), None, ), # 1
  )

  def __init__(self, creative_id_list=None,):
    self.creative_id_list = creative_id_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.creative_id_list = []
          (_etype31, _size28) = iprot.readListBegin()
          for _i32 in xrange(_size28):
            _elem33 = iprot.readI32();
            self.creative_id_list.append(_elem33)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ADGetReq')
    if self.creative_id_list is not None:
      oprot.writeFieldBegin('creative_id_list', TType.LIST, 1)
      oprot.writeListBegin(TType.I32, len(self.creative_id_list))
      for iter34 in self.creative_id_list:
        oprot.writeI32(iter34)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ADGetRsp:
  """
  Attributes:
   - ad_list
   - status
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'ad_list', (TType.STRUCT,(AD, AD.thrift_spec)), None, ), # 1
    (2, TType.STRING, 'status', None, None, ), # 2
  )

  def __init__(self, ad_list=None, status=None,):
    self.ad_list = ad_list
    self.status = status

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.ad_list = []
          (_etype38, _size35) = iprot.readListBegin()
          for _i39 in xrange(_size35):
            _elem40 = AD()
            _elem40.read(iprot)
            self.ad_list.append(_elem40)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.status = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ADGetRsp')
    if self.ad_list is not None:
      oprot.writeFieldBegin('ad_list', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.ad_list))
      for iter41 in self.ad_list:
        iter41.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.STRING, 2)
      oprot.writeString(self.status)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ADPutReq:
  """
  Attributes:
   - ad_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'ad_list', (TType.STRUCT,(AD, AD.thrift_spec)), None, ), # 1
  )

  def __init__(self, ad_list=None,):
    self.ad_list = ad_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.ad_list = []
          (_etype45, _size42) = iprot.readListBegin()
          for _i46 in xrange(_size42):
            _elem47 = AD()
            _elem47.read(iprot)
            self.ad_list.append(_elem47)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ADPutReq')
    if self.ad_list is not None:
      oprot.writeFieldBegin('ad_list', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.ad_list))
      for iter48 in self.ad_list:
        iter48.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ADPutRsp:
  """
  Attributes:
   - status
   - count
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'status', None, None, ), # 1
    (2, TType.I32, 'count', None, None, ), # 2
  )

  def __init__(self, status=None, count=None,):
    self.status = status
    self.count = count

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.status = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.count = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ADPutRsp')
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.STRING, 1)
      oprot.writeString(self.status)
      oprot.writeFieldEnd()
    if self.count is not None:
      oprot.writeFieldBegin('count', TType.I32, 2)
      oprot.writeI32(self.count)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
