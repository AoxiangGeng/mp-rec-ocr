#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class Req:
  """
  Attributes:
   - image_uri
   - title
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'image_uri', None, None, ), # 1
    (2, TType.STRING, 'title', None, None, ), # 2
  )

  def __init__(self, image_uri=None, title=None,):
    self.image_uri = image_uri
    self.title = title

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.image_uri = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.title = iprot.readString()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Req')
    if self.image_uri is not None:
      oprot.writeFieldBegin('image_uri', TType.STRING, 1)
      oprot.writeString(self.image_uri)
      oprot.writeFieldEnd()
    if self.title is not None:
      oprot.writeFieldBegin('title', TType.STRING, 2)
      oprot.writeString(self.title)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.image_uri)
    value = (value * 31) ^ hash(self.title)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Rsp:
  """
  Attributes:
   - is_safe
   - image_safe_score
   - image_unsafe_score
   - title_safe_score
   - title_unsafe_score
   - reason
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'is_safe', None, None, ), # 1
    (2, TType.DOUBLE, 'image_safe_score', None, None, ), # 2
    (3, TType.DOUBLE, 'image_unsafe_score', None, None, ), # 3
    (4, TType.DOUBLE, 'title_safe_score', None, None, ), # 4
    (5, TType.DOUBLE, 'title_unsafe_score', None, None, ), # 5
    (6, TType.STRING, 'reason', None, None, ), # 6
  )

  def __init__(self, is_safe=None, image_safe_score=None, image_unsafe_score=None, title_safe_score=None, title_unsafe_score=None, reason=None,):
    self.is_safe = is_safe
    self.image_safe_score = image_safe_score
    self.image_unsafe_score = image_unsafe_score
    self.title_safe_score = title_safe_score
    self.title_unsafe_score = title_unsafe_score
    self.reason = reason

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.is_safe = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.image_safe_score = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.DOUBLE:
          self.image_unsafe_score = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.DOUBLE:
          self.title_safe_score = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.title_unsafe_score = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.reason = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Rsp')
    if self.is_safe is not None:
      oprot.writeFieldBegin('is_safe', TType.I32, 1)
      oprot.writeI32(self.is_safe)
      oprot.writeFieldEnd()
    if self.image_safe_score is not None:
      oprot.writeFieldBegin('image_safe_score', TType.DOUBLE, 2)
      oprot.writeDouble(self.image_safe_score)
      oprot.writeFieldEnd()
    if self.image_unsafe_score is not None:
      oprot.writeFieldBegin('image_unsafe_score', TType.DOUBLE, 3)
      oprot.writeDouble(self.image_unsafe_score)
      oprot.writeFieldEnd()
    if self.title_safe_score is not None:
      oprot.writeFieldBegin('title_safe_score', TType.DOUBLE, 4)
      oprot.writeDouble(self.title_safe_score)
      oprot.writeFieldEnd()
    if self.title_unsafe_score is not None:
      oprot.writeFieldBegin('title_unsafe_score', TType.DOUBLE, 5)
      oprot.writeDouble(self.title_unsafe_score)
      oprot.writeFieldEnd()
    if self.reason is not None:
      oprot.writeFieldBegin('reason', TType.STRING, 6)
      oprot.writeString(self.reason)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
