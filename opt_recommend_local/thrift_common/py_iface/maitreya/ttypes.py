#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class Video:
  """
  Attributes:
   - content_id
   - score
   - strategy
   - video_info
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'content_id', None, None, ), # 1
    (2, TType.DOUBLE, 'score', None, None, ), # 2
    (3, TType.STRING, 'strategy', None, None, ), # 3
    (4, TType.MAP, 'video_info', (TType.STRING,None,TType.STRING,None), {
    }, ), # 4
  )

  def __init__(self, content_id=None, score=None, strategy=None, video_info=thrift_spec[4][4],):
    self.content_id = content_id
    self.score = score
    self.strategy = strategy
    if video_info is self.thrift_spec[4][4]:
      video_info = {
    }
    self.video_info = video_info

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.content_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.score = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.strategy = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.MAP:
          self.video_info = {}
          (_ktype1, _vtype2, _size0 ) = iprot.readMapBegin()
          for _i4 in xrange(_size0):
            _key5 = iprot.readString();
            _val6 = iprot.readString();
            self.video_info[_key5] = _val6
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Video')
    if self.content_id is not None:
      oprot.writeFieldBegin('content_id', TType.I64, 1)
      oprot.writeI64(self.content_id)
      oprot.writeFieldEnd()
    if self.score is not None:
      oprot.writeFieldBegin('score', TType.DOUBLE, 2)
      oprot.writeDouble(self.score)
      oprot.writeFieldEnd()
    if self.strategy is not None:
      oprot.writeFieldBegin('strategy', TType.STRING, 3)
      oprot.writeString(self.strategy)
      oprot.writeFieldEnd()
    if self.video_info is not None:
      oprot.writeFieldBegin('video_info', TType.MAP, 4)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.video_info))
      for kiter7,viter8 in self.video_info.items():
        oprot.writeString(kiter7)
        oprot.writeString(viter8)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Req:
  """
  Attributes:
   - uid_type
   - uid
   - app_id
   - channel_id
   - start_time
   - end_time
   - count
   - abtest_parameters
   - impression_id
   - context_info
   - user_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'uid_type', None, None, ), # 1
    (2, TType.STRING, 'uid', None, None, ), # 2
    (3, TType.STRING, 'app_id', None, None, ), # 3
    (4, TType.I32, 'channel_id', None, None, ), # 4
    (5, TType.I32, 'start_time', None, None, ), # 5
    (6, TType.I32, 'end_time', None, None, ), # 6
    (7, TType.I32, 'count', None, 40, ), # 7
    (8, TType.STRING, 'abtest_parameters', None, "", ), # 8
    (9, TType.STRING, 'impression_id', None, "", ), # 9
    (10, TType.MAP, 'context_info', (TType.STRING,None,TType.STRING,None), {
    }, ), # 10
    (11, TType.I64, 'user_id', None, 0, ), # 11
  )

  def __init__(self, uid_type=None, uid=None, app_id=None, channel_id=None, start_time=None, end_time=None, count=thrift_spec[7][4], abtest_parameters=thrift_spec[8][4], impression_id=thrift_spec[9][4], context_info=thrift_spec[10][4], user_id=thrift_spec[11][4],):
    self.uid_type = uid_type
    self.uid = uid
    self.app_id = app_id
    self.channel_id = channel_id
    self.start_time = start_time
    self.end_time = end_time
    self.count = count
    self.abtest_parameters = abtest_parameters
    self.impression_id = impression_id
    if context_info is self.thrift_spec[10][4]:
      context_info = {
    }
    self.context_info = context_info
    self.user_id = user_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.uid_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.uid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.app_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.channel_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.start_time = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.end_time = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.count = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.abtest_parameters = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.impression_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.MAP:
          self.context_info = {}
          (_ktype10, _vtype11, _size9 ) = iprot.readMapBegin()
          for _i13 in xrange(_size9):
            _key14 = iprot.readString();
            _val15 = iprot.readString();
            self.context_info[_key14] = _val15
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I64:
          self.user_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Req')
    if self.uid_type is not None:
      oprot.writeFieldBegin('uid_type', TType.I32, 1)
      oprot.writeI32(self.uid_type)
      oprot.writeFieldEnd()
    if self.uid is not None:
      oprot.writeFieldBegin('uid', TType.STRING, 2)
      oprot.writeString(self.uid)
      oprot.writeFieldEnd()
    if self.app_id is not None:
      oprot.writeFieldBegin('app_id', TType.STRING, 3)
      oprot.writeString(self.app_id)
      oprot.writeFieldEnd()
    if self.channel_id is not None:
      oprot.writeFieldBegin('channel_id', TType.I32, 4)
      oprot.writeI32(self.channel_id)
      oprot.writeFieldEnd()
    if self.start_time is not None:
      oprot.writeFieldBegin('start_time', TType.I32, 5)
      oprot.writeI32(self.start_time)
      oprot.writeFieldEnd()
    if self.end_time is not None:
      oprot.writeFieldBegin('end_time', TType.I32, 6)
      oprot.writeI32(self.end_time)
      oprot.writeFieldEnd()
    if self.count is not None:
      oprot.writeFieldBegin('count', TType.I32, 7)
      oprot.writeI32(self.count)
      oprot.writeFieldEnd()
    if self.abtest_parameters is not None:
      oprot.writeFieldBegin('abtest_parameters', TType.STRING, 8)
      oprot.writeString(self.abtest_parameters)
      oprot.writeFieldEnd()
    if self.impression_id is not None:
      oprot.writeFieldBegin('impression_id', TType.STRING, 9)
      oprot.writeString(self.impression_id)
      oprot.writeFieldEnd()
    if self.context_info is not None:
      oprot.writeFieldBegin('context_info', TType.MAP, 10)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.context_info))
      for kiter16,viter17 in self.context_info.items():
        oprot.writeString(kiter16)
        oprot.writeString(viter17)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.user_id is not None:
      oprot.writeFieldBegin('user_id', TType.I64, 11)
      oprot.writeI64(self.user_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Rsp:
  """
  Attributes:
   - status
   - videos
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'status', None, "", ), # 1
    (2, TType.LIST, 'videos', (TType.STRUCT,(Video, Video.thrift_spec)), None, ), # 2
  )

  def __init__(self, status=thrift_spec[1][4], videos=None,):
    self.status = status
    self.videos = videos

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.status = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.videos = []
          (_etype21, _size18) = iprot.readListBegin()
          for _i22 in xrange(_size18):
            _elem23 = Video()
            _elem23.read(iprot)
            self.videos.append(_elem23)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Rsp')
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.STRING, 1)
      oprot.writeString(self.status)
      oprot.writeFieldEnd()
    if self.videos is not None:
      oprot.writeFieldBegin('videos', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.videos))
      for iter24 in self.videos:
        iter24.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
