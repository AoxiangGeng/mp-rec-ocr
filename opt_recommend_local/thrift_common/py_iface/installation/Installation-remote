#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import TSSLSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from installation import Installation
from installation.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print('')
  print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] function [arg1 [arg2...]]')
  print('')
  print('Functions:')
  print('  bool put_installation(string udid, string fudid,  iList)')
  print('   get_installation(string udid, i32 typ)')
  print('   get_installation_package_name(string udid, i32 typ)')
  print('   get_installation_app_name(string udid, i32 typ)')
  print('   get_installation_id(string udid, i32 typ)')
  print('   get_installation_package_name_id(string udid, i32 typ)')
  print('   get_installation_app_name_id(string udid, i32 typ)')
  print('')
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
  ssl = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSSLSocket.TSSLSocket(host, port, validate=False) if ssl else TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = Installation.Client(protocol)
transport.open()

if cmd == 'put_installation':
  if len(args) != 3:
    print('put_installation requires 3 args')
    sys.exit(1)
  pp.pprint(client.put_installation(args[0],args[1],eval(args[2]),))

elif cmd == 'get_installation':
  if len(args) != 2:
    print('get_installation requires 2 args')
    sys.exit(1)
  pp.pprint(client.get_installation(args[0],eval(args[1]),))

elif cmd == 'get_installation_package_name':
  if len(args) != 2:
    print('get_installation_package_name requires 2 args')
    sys.exit(1)
  pp.pprint(client.get_installation_package_name(args[0],eval(args[1]),))

elif cmd == 'get_installation_app_name':
  if len(args) != 2:
    print('get_installation_app_name requires 2 args')
    sys.exit(1)
  pp.pprint(client.get_installation_app_name(args[0],eval(args[1]),))

elif cmd == 'get_installation_id':
  if len(args) != 2:
    print('get_installation_id requires 2 args')
    sys.exit(1)
  pp.pprint(client.get_installation_id(args[0],eval(args[1]),))

elif cmd == 'get_installation_package_name_id':
  if len(args) != 2:
    print('get_installation_package_name_id requires 2 args')
    sys.exit(1)
  pp.pprint(client.get_installation_package_name_id(args[0],eval(args[1]),))

elif cmd == 'get_installation_app_name_id':
  if len(args) != 2:
    print('get_installation_app_name_id requires 2 args')
    sys.exit(1)
  pp.pprint(client.get_installation_app_name_id(args[0],eval(args[1]),))

else:
  print('Unrecognized method %s' % cmd)
  sys.exit(1)

transport.close()
