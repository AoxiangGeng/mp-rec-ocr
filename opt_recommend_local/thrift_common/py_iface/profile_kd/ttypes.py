#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class KV:
  """
  Attributes:
   - key
   - weight
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'key', None, None, ), # 1
    (2, TType.DOUBLE, 'weight', None, None, ), # 2
  )

  def __init__(self, key=None, weight=None,):
    self.key = key
    self.weight = weight

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.key = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.weight = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('KV')
    if self.key is not None:
      oprot.writeFieldBegin('key', TType.I64, 1)
      oprot.writeI64(self.key)
      oprot.writeFieldEnd()
    if self.weight is not None:
      oprot.writeFieldBegin('weight', TType.DOUBLE, 2)
      oprot.writeDouble(self.weight)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Content:
  """
  Attributes:
   - cid
   - c_category
   - c_keyword
   - c_topic
   - c_author_id
   - c_create_time
   - c_duration
   - c_down_num
   - c_digg_num
   - c_bury_num
   - c_play_num
   - c_comment_num
   - c_favorate_num
   - c_share_btn_num
   - c_share_platform_num
   - c_share_ok_num
   - c_crawl_digg_num
   - c_crawl_bury_num
   - c_crawl_play_num
   - c_crawl_comment_num
   - c_crawl_favorate_num
   - c_crawl_share_num
   - c_cover_image
   - c_title_len
   - c_title_reo
   - c_total_impr
   - c_total_playtime
   - c_title_regular
   - c_title_semantic
   - c_cover_content
   - c_cover_resolution
   - c_cover_cont_ads
   - c_cover_vul
   - c_video_watermark
   - c_video_cont_ads
   - c_video_original
   - c_video_exclusive
   - c_video_content_safe
   - c_usertag
   - c_enable
   - c_usertags
   - c_dislike_count
   - c_shoot_type
   - c_recommend_label
   - c_pool
   - c_online_time
   - c_video_quality
   - c_tags_class
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'cid', None, None, ), # 1
    (2, TType.LIST, 'c_category', (TType.STRUCT,(KV, KV.thrift_spec)), None, ), # 2
    (3, TType.LIST, 'c_keyword', (TType.STRUCT,(KV, KV.thrift_spec)), None, ), # 3
    (4, TType.LIST, 'c_topic', (TType.STRUCT,(KV, KV.thrift_spec)), None, ), # 4
    (5, TType.I64, 'c_author_id', None, None, ), # 5
    (6, TType.I32, 'c_create_time', None, None, ), # 6
    (7, TType.I32, 'c_duration', None, None, ), # 7
    (8, TType.I32, 'c_down_num', None, None, ), # 8
    (9, TType.I32, 'c_digg_num', None, None, ), # 9
    (10, TType.I32, 'c_bury_num', None, None, ), # 10
    (11, TType.I32, 'c_play_num', None, None, ), # 11
    (12, TType.I32, 'c_comment_num', None, None, ), # 12
    (13, TType.I32, 'c_favorate_num', None, None, ), # 13
    (14, TType.I32, 'c_share_btn_num', None, None, ), # 14
    (15, TType.I32, 'c_share_platform_num', None, None, ), # 15
    (16, TType.I32, 'c_share_ok_num', None, None, ), # 16
    (17, TType.I32, 'c_crawl_digg_num', None, None, ), # 17
    (18, TType.I32, 'c_crawl_bury_num', None, None, ), # 18
    (19, TType.I32, 'c_crawl_play_num', None, None, ), # 19
    (20, TType.I32, 'c_crawl_comment_num', None, None, ), # 20
    (21, TType.I32, 'c_crawl_favorate_num', None, None, ), # 21
    (22, TType.I32, 'c_crawl_share_num', None, None, ), # 22
    (23, TType.I32, 'c_cover_image', None, None, ), # 23
    (24, TType.I32, 'c_title_len', None, None, ), # 24
    (25, TType.I32, 'c_title_reo', None, None, ), # 25
    (26, TType.I32, 'c_total_impr', None, None, ), # 26
    (27, TType.I32, 'c_total_playtime', None, None, ), # 27
    (28, TType.I32, 'c_title_regular', None, None, ), # 28
    (29, TType.I32, 'c_title_semantic', None, None, ), # 29
    (30, TType.I32, 'c_cover_content', None, None, ), # 30
    (31, TType.I32, 'c_cover_resolution', None, None, ), # 31
    (32, TType.I32, 'c_cover_cont_ads', None, None, ), # 32
    (33, TType.I32, 'c_cover_vul', None, None, ), # 33
    (34, TType.I32, 'c_video_watermark', None, None, ), # 34
    (35, TType.I32, 'c_video_cont_ads', None, None, ), # 35
    (36, TType.I32, 'c_video_original', None, None, ), # 36
    (37, TType.I32, 'c_video_exclusive', None, None, ), # 37
    (38, TType.I32, 'c_video_content_safe', None, None, ), # 38
    (39, TType.I32, 'c_usertag', None, None, ), # 39
    (40, TType.I32, 'c_enable', None, None, ), # 40
    (41, TType.LIST, 'c_usertags', (TType.STRUCT,(KV, KV.thrift_spec)), None, ), # 41
    (42, TType.I32, 'c_dislike_count', None, None, ), # 42
    (43, TType.I32, 'c_shoot_type', None, None, ), # 43
    (44, TType.LIST, 'c_recommend_label', (TType.STRUCT,(KV, KV.thrift_spec)), None, ), # 44
    (45, TType.I32, 'c_pool', None, None, ), # 45
    (46, TType.I32, 'c_online_time', None, None, ), # 46
    (47, TType.I32, 'c_video_quality', None, None, ), # 47
    (48, TType.LIST, 'c_tags_class', (TType.STRUCT,(KV, KV.thrift_spec)), None, ), # 48
  )

  def __init__(self, cid=None, c_category=None, c_keyword=None, c_topic=None, c_author_id=None, c_create_time=None, c_duration=None, c_down_num=None, c_digg_num=None, c_bury_num=None, c_play_num=None, c_comment_num=None, c_favorate_num=None, c_share_btn_num=None, c_share_platform_num=None, c_share_ok_num=None, c_crawl_digg_num=None, c_crawl_bury_num=None, c_crawl_play_num=None, c_crawl_comment_num=None, c_crawl_favorate_num=None, c_crawl_share_num=None, c_cover_image=None, c_title_len=None, c_title_reo=None, c_total_impr=None, c_total_playtime=None, c_title_regular=None, c_title_semantic=None, c_cover_content=None, c_cover_resolution=None, c_cover_cont_ads=None, c_cover_vul=None, c_video_watermark=None, c_video_cont_ads=None, c_video_original=None, c_video_exclusive=None, c_video_content_safe=None, c_usertag=None, c_enable=None, c_usertags=None, c_dislike_count=None, c_shoot_type=None, c_recommend_label=None, c_pool=None, c_online_time=None, c_video_quality=None, c_tags_class=None,):
    self.cid = cid
    self.c_category = c_category
    self.c_keyword = c_keyword
    self.c_topic = c_topic
    self.c_author_id = c_author_id
    self.c_create_time = c_create_time
    self.c_duration = c_duration
    self.c_down_num = c_down_num
    self.c_digg_num = c_digg_num
    self.c_bury_num = c_bury_num
    self.c_play_num = c_play_num
    self.c_comment_num = c_comment_num
    self.c_favorate_num = c_favorate_num
    self.c_share_btn_num = c_share_btn_num
    self.c_share_platform_num = c_share_platform_num
    self.c_share_ok_num = c_share_ok_num
    self.c_crawl_digg_num = c_crawl_digg_num
    self.c_crawl_bury_num = c_crawl_bury_num
    self.c_crawl_play_num = c_crawl_play_num
    self.c_crawl_comment_num = c_crawl_comment_num
    self.c_crawl_favorate_num = c_crawl_favorate_num
    self.c_crawl_share_num = c_crawl_share_num
    self.c_cover_image = c_cover_image
    self.c_title_len = c_title_len
    self.c_title_reo = c_title_reo
    self.c_total_impr = c_total_impr
    self.c_total_playtime = c_total_playtime
    self.c_title_regular = c_title_regular
    self.c_title_semantic = c_title_semantic
    self.c_cover_content = c_cover_content
    self.c_cover_resolution = c_cover_resolution
    self.c_cover_cont_ads = c_cover_cont_ads
    self.c_cover_vul = c_cover_vul
    self.c_video_watermark = c_video_watermark
    self.c_video_cont_ads = c_video_cont_ads
    self.c_video_original = c_video_original
    self.c_video_exclusive = c_video_exclusive
    self.c_video_content_safe = c_video_content_safe
    self.c_usertag = c_usertag
    self.c_enable = c_enable
    self.c_usertags = c_usertags
    self.c_dislike_count = c_dislike_count
    self.c_shoot_type = c_shoot_type
    self.c_recommend_label = c_recommend_label
    self.c_pool = c_pool
    self.c_online_time = c_online_time
    self.c_video_quality = c_video_quality
    self.c_tags_class = c_tags_class

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.cid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.c_category = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = KV()
            _elem5.read(iprot)
            self.c_category.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.c_keyword = []
          (_etype9, _size6) = iprot.readListBegin()
          for _i10 in xrange(_size6):
            _elem11 = KV()
            _elem11.read(iprot)
            self.c_keyword.append(_elem11)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.c_topic = []
          (_etype15, _size12) = iprot.readListBegin()
          for _i16 in xrange(_size12):
            _elem17 = KV()
            _elem17.read(iprot)
            self.c_topic.append(_elem17)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.c_author_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.c_create_time = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.c_duration = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.c_down_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.c_digg_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.c_bury_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.c_play_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.c_comment_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I32:
          self.c_favorate_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I32:
          self.c_share_btn_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.I32:
          self.c_share_platform_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.I32:
          self.c_share_ok_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.I32:
          self.c_crawl_digg_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.I32:
          self.c_crawl_bury_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.I32:
          self.c_crawl_play_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.I32:
          self.c_crawl_comment_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.I32:
          self.c_crawl_favorate_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.I32:
          self.c_crawl_share_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.I32:
          self.c_cover_image = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 24:
        if ftype == TType.I32:
          self.c_title_len = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 25:
        if ftype == TType.I32:
          self.c_title_reo = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 26:
        if ftype == TType.I32:
          self.c_total_impr = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 27:
        if ftype == TType.I32:
          self.c_total_playtime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 28:
        if ftype == TType.I32:
          self.c_title_regular = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 29:
        if ftype == TType.I32:
          self.c_title_semantic = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.I32:
          self.c_cover_content = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 31:
        if ftype == TType.I32:
          self.c_cover_resolution = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 32:
        if ftype == TType.I32:
          self.c_cover_cont_ads = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 33:
        if ftype == TType.I32:
          self.c_cover_vul = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 34:
        if ftype == TType.I32:
          self.c_video_watermark = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 35:
        if ftype == TType.I32:
          self.c_video_cont_ads = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 36:
        if ftype == TType.I32:
          self.c_video_original = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 37:
        if ftype == TType.I32:
          self.c_video_exclusive = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 38:
        if ftype == TType.I32:
          self.c_video_content_safe = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 39:
        if ftype == TType.I32:
          self.c_usertag = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 40:
        if ftype == TType.I32:
          self.c_enable = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 41:
        if ftype == TType.LIST:
          self.c_usertags = []
          (_etype21, _size18) = iprot.readListBegin()
          for _i22 in xrange(_size18):
            _elem23 = KV()
            _elem23.read(iprot)
            self.c_usertags.append(_elem23)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 42:
        if ftype == TType.I32:
          self.c_dislike_count = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 43:
        if ftype == TType.I32:
          self.c_shoot_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 44:
        if ftype == TType.LIST:
          self.c_recommend_label = []
          (_etype27, _size24) = iprot.readListBegin()
          for _i28 in xrange(_size24):
            _elem29 = KV()
            _elem29.read(iprot)
            self.c_recommend_label.append(_elem29)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 45:
        if ftype == TType.I32:
          self.c_pool = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 46:
        if ftype == TType.I32:
          self.c_online_time = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 47:
        if ftype == TType.I32:
          self.c_video_quality = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 48:
        if ftype == TType.LIST:
          self.c_tags_class = []
          (_etype33, _size30) = iprot.readListBegin()
          for _i34 in xrange(_size30):
            _elem35 = KV()
            _elem35.read(iprot)
            self.c_tags_class.append(_elem35)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Content')
    if self.cid is not None:
      oprot.writeFieldBegin('cid', TType.I64, 1)
      oprot.writeI64(self.cid)
      oprot.writeFieldEnd()
    if self.c_category is not None:
      oprot.writeFieldBegin('c_category', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.c_category))
      for iter36 in self.c_category:
        iter36.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.c_keyword is not None:
      oprot.writeFieldBegin('c_keyword', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.c_keyword))
      for iter37 in self.c_keyword:
        iter37.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.c_topic is not None:
      oprot.writeFieldBegin('c_topic', TType.LIST, 4)
      oprot.writeListBegin(TType.STRUCT, len(self.c_topic))
      for iter38 in self.c_topic:
        iter38.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.c_author_id is not None:
      oprot.writeFieldBegin('c_author_id', TType.I64, 5)
      oprot.writeI64(self.c_author_id)
      oprot.writeFieldEnd()
    if self.c_create_time is not None:
      oprot.writeFieldBegin('c_create_time', TType.I32, 6)
      oprot.writeI32(self.c_create_time)
      oprot.writeFieldEnd()
    if self.c_duration is not None:
      oprot.writeFieldBegin('c_duration', TType.I32, 7)
      oprot.writeI32(self.c_duration)
      oprot.writeFieldEnd()
    if self.c_down_num is not None:
      oprot.writeFieldBegin('c_down_num', TType.I32, 8)
      oprot.writeI32(self.c_down_num)
      oprot.writeFieldEnd()
    if self.c_digg_num is not None:
      oprot.writeFieldBegin('c_digg_num', TType.I32, 9)
      oprot.writeI32(self.c_digg_num)
      oprot.writeFieldEnd()
    if self.c_bury_num is not None:
      oprot.writeFieldBegin('c_bury_num', TType.I32, 10)
      oprot.writeI32(self.c_bury_num)
      oprot.writeFieldEnd()
    if self.c_play_num is not None:
      oprot.writeFieldBegin('c_play_num', TType.I32, 11)
      oprot.writeI32(self.c_play_num)
      oprot.writeFieldEnd()
    if self.c_comment_num is not None:
      oprot.writeFieldBegin('c_comment_num', TType.I32, 12)
      oprot.writeI32(self.c_comment_num)
      oprot.writeFieldEnd()
    if self.c_favorate_num is not None:
      oprot.writeFieldBegin('c_favorate_num', TType.I32, 13)
      oprot.writeI32(self.c_favorate_num)
      oprot.writeFieldEnd()
    if self.c_share_btn_num is not None:
      oprot.writeFieldBegin('c_share_btn_num', TType.I32, 14)
      oprot.writeI32(self.c_share_btn_num)
      oprot.writeFieldEnd()
    if self.c_share_platform_num is not None:
      oprot.writeFieldBegin('c_share_platform_num', TType.I32, 15)
      oprot.writeI32(self.c_share_platform_num)
      oprot.writeFieldEnd()
    if self.c_share_ok_num is not None:
      oprot.writeFieldBegin('c_share_ok_num', TType.I32, 16)
      oprot.writeI32(self.c_share_ok_num)
      oprot.writeFieldEnd()
    if self.c_crawl_digg_num is not None:
      oprot.writeFieldBegin('c_crawl_digg_num', TType.I32, 17)
      oprot.writeI32(self.c_crawl_digg_num)
      oprot.writeFieldEnd()
    if self.c_crawl_bury_num is not None:
      oprot.writeFieldBegin('c_crawl_bury_num', TType.I32, 18)
      oprot.writeI32(self.c_crawl_bury_num)
      oprot.writeFieldEnd()
    if self.c_crawl_play_num is not None:
      oprot.writeFieldBegin('c_crawl_play_num', TType.I32, 19)
      oprot.writeI32(self.c_crawl_play_num)
      oprot.writeFieldEnd()
    if self.c_crawl_comment_num is not None:
      oprot.writeFieldBegin('c_crawl_comment_num', TType.I32, 20)
      oprot.writeI32(self.c_crawl_comment_num)
      oprot.writeFieldEnd()
    if self.c_crawl_favorate_num is not None:
      oprot.writeFieldBegin('c_crawl_favorate_num', TType.I32, 21)
      oprot.writeI32(self.c_crawl_favorate_num)
      oprot.writeFieldEnd()
    if self.c_crawl_share_num is not None:
      oprot.writeFieldBegin('c_crawl_share_num', TType.I32, 22)
      oprot.writeI32(self.c_crawl_share_num)
      oprot.writeFieldEnd()
    if self.c_cover_image is not None:
      oprot.writeFieldBegin('c_cover_image', TType.I32, 23)
      oprot.writeI32(self.c_cover_image)
      oprot.writeFieldEnd()
    if self.c_title_len is not None:
      oprot.writeFieldBegin('c_title_len', TType.I32, 24)
      oprot.writeI32(self.c_title_len)
      oprot.writeFieldEnd()
    if self.c_title_reo is not None:
      oprot.writeFieldBegin('c_title_reo', TType.I32, 25)
      oprot.writeI32(self.c_title_reo)
      oprot.writeFieldEnd()
    if self.c_total_impr is not None:
      oprot.writeFieldBegin('c_total_impr', TType.I32, 26)
      oprot.writeI32(self.c_total_impr)
      oprot.writeFieldEnd()
    if self.c_total_playtime is not None:
      oprot.writeFieldBegin('c_total_playtime', TType.I32, 27)
      oprot.writeI32(self.c_total_playtime)
      oprot.writeFieldEnd()
    if self.c_title_regular is not None:
      oprot.writeFieldBegin('c_title_regular', TType.I32, 28)
      oprot.writeI32(self.c_title_regular)
      oprot.writeFieldEnd()
    if self.c_title_semantic is not None:
      oprot.writeFieldBegin('c_title_semantic', TType.I32, 29)
      oprot.writeI32(self.c_title_semantic)
      oprot.writeFieldEnd()
    if self.c_cover_content is not None:
      oprot.writeFieldBegin('c_cover_content', TType.I32, 30)
      oprot.writeI32(self.c_cover_content)
      oprot.writeFieldEnd()
    if self.c_cover_resolution is not None:
      oprot.writeFieldBegin('c_cover_resolution', TType.I32, 31)
      oprot.writeI32(self.c_cover_resolution)
      oprot.writeFieldEnd()
    if self.c_cover_cont_ads is not None:
      oprot.writeFieldBegin('c_cover_cont_ads', TType.I32, 32)
      oprot.writeI32(self.c_cover_cont_ads)
      oprot.writeFieldEnd()
    if self.c_cover_vul is not None:
      oprot.writeFieldBegin('c_cover_vul', TType.I32, 33)
      oprot.writeI32(self.c_cover_vul)
      oprot.writeFieldEnd()
    if self.c_video_watermark is not None:
      oprot.writeFieldBegin('c_video_watermark', TType.I32, 34)
      oprot.writeI32(self.c_video_watermark)
      oprot.writeFieldEnd()
    if self.c_video_cont_ads is not None:
      oprot.writeFieldBegin('c_video_cont_ads', TType.I32, 35)
      oprot.writeI32(self.c_video_cont_ads)
      oprot.writeFieldEnd()
    if self.c_video_original is not None:
      oprot.writeFieldBegin('c_video_original', TType.I32, 36)
      oprot.writeI32(self.c_video_original)
      oprot.writeFieldEnd()
    if self.c_video_exclusive is not None:
      oprot.writeFieldBegin('c_video_exclusive', TType.I32, 37)
      oprot.writeI32(self.c_video_exclusive)
      oprot.writeFieldEnd()
    if self.c_video_content_safe is not None:
      oprot.writeFieldBegin('c_video_content_safe', TType.I32, 38)
      oprot.writeI32(self.c_video_content_safe)
      oprot.writeFieldEnd()
    if self.c_usertag is not None:
      oprot.writeFieldBegin('c_usertag', TType.I32, 39)
      oprot.writeI32(self.c_usertag)
      oprot.writeFieldEnd()
    if self.c_enable is not None:
      oprot.writeFieldBegin('c_enable', TType.I32, 40)
      oprot.writeI32(self.c_enable)
      oprot.writeFieldEnd()
    if self.c_usertags is not None:
      oprot.writeFieldBegin('c_usertags', TType.LIST, 41)
      oprot.writeListBegin(TType.STRUCT, len(self.c_usertags))
      for iter39 in self.c_usertags:
        iter39.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.c_dislike_count is not None:
      oprot.writeFieldBegin('c_dislike_count', TType.I32, 42)
      oprot.writeI32(self.c_dislike_count)
      oprot.writeFieldEnd()
    if self.c_shoot_type is not None:
      oprot.writeFieldBegin('c_shoot_type', TType.I32, 43)
      oprot.writeI32(self.c_shoot_type)
      oprot.writeFieldEnd()
    if self.c_recommend_label is not None:
      oprot.writeFieldBegin('c_recommend_label', TType.LIST, 44)
      oprot.writeListBegin(TType.STRUCT, len(self.c_recommend_label))
      for iter40 in self.c_recommend_label:
        iter40.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.c_pool is not None:
      oprot.writeFieldBegin('c_pool', TType.I32, 45)
      oprot.writeI32(self.c_pool)
      oprot.writeFieldEnd()
    if self.c_online_time is not None:
      oprot.writeFieldBegin('c_online_time', TType.I32, 46)
      oprot.writeI32(self.c_online_time)
      oprot.writeFieldEnd()
    if self.c_video_quality is not None:
      oprot.writeFieldBegin('c_video_quality', TType.I32, 47)
      oprot.writeI32(self.c_video_quality)
      oprot.writeFieldEnd()
    if self.c_tags_class is not None:
      oprot.writeFieldBegin('c_tags_class', TType.LIST, 48)
      oprot.writeListBegin(TType.STRUCT, len(self.c_tags_class))
      for iter41 in self.c_tags_class:
        iter41.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.cid)
    value = (value * 31) ^ hash(self.c_category)
    value = (value * 31) ^ hash(self.c_keyword)
    value = (value * 31) ^ hash(self.c_topic)
    value = (value * 31) ^ hash(self.c_author_id)
    value = (value * 31) ^ hash(self.c_create_time)
    value = (value * 31) ^ hash(self.c_duration)
    value = (value * 31) ^ hash(self.c_down_num)
    value = (value * 31) ^ hash(self.c_digg_num)
    value = (value * 31) ^ hash(self.c_bury_num)
    value = (value * 31) ^ hash(self.c_play_num)
    value = (value * 31) ^ hash(self.c_comment_num)
    value = (value * 31) ^ hash(self.c_favorate_num)
    value = (value * 31) ^ hash(self.c_share_btn_num)
    value = (value * 31) ^ hash(self.c_share_platform_num)
    value = (value * 31) ^ hash(self.c_share_ok_num)
    value = (value * 31) ^ hash(self.c_crawl_digg_num)
    value = (value * 31) ^ hash(self.c_crawl_bury_num)
    value = (value * 31) ^ hash(self.c_crawl_play_num)
    value = (value * 31) ^ hash(self.c_crawl_comment_num)
    value = (value * 31) ^ hash(self.c_crawl_favorate_num)
    value = (value * 31) ^ hash(self.c_crawl_share_num)
    value = (value * 31) ^ hash(self.c_cover_image)
    value = (value * 31) ^ hash(self.c_title_len)
    value = (value * 31) ^ hash(self.c_title_reo)
    value = (value * 31) ^ hash(self.c_total_impr)
    value = (value * 31) ^ hash(self.c_total_playtime)
    value = (value * 31) ^ hash(self.c_title_regular)
    value = (value * 31) ^ hash(self.c_title_semantic)
    value = (value * 31) ^ hash(self.c_cover_content)
    value = (value * 31) ^ hash(self.c_cover_resolution)
    value = (value * 31) ^ hash(self.c_cover_cont_ads)
    value = (value * 31) ^ hash(self.c_cover_vul)
    value = (value * 31) ^ hash(self.c_video_watermark)
    value = (value * 31) ^ hash(self.c_video_cont_ads)
    value = (value * 31) ^ hash(self.c_video_original)
    value = (value * 31) ^ hash(self.c_video_exclusive)
    value = (value * 31) ^ hash(self.c_video_content_safe)
    value = (value * 31) ^ hash(self.c_usertag)
    value = (value * 31) ^ hash(self.c_enable)
    value = (value * 31) ^ hash(self.c_usertags)
    value = (value * 31) ^ hash(self.c_dislike_count)
    value = (value * 31) ^ hash(self.c_shoot_type)
    value = (value * 31) ^ hash(self.c_recommend_label)
    value = (value * 31) ^ hash(self.c_pool)
    value = (value * 31) ^ hash(self.c_online_time)
    value = (value * 31) ^ hash(self.c_video_quality)
    value = (value * 31) ^ hash(self.c_tags_class)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class User:
  """
  Attributes:
   - uid
   - u_age
   - u_gender
   - u_area
   - u_keyword
   - u_follow
   - u_video_topic
   - u_cluster
   - u_category
   - u_search_keyword
   - u_reg
   - u_installed_apps
   - u_dislike_authors
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'uid', None, None, ), # 1
    (2, TType.I32, 'u_age', None, None, ), # 2
    (3, TType.I32, 'u_gender', None, None, ), # 3
    (4, TType.I32, 'u_area', None, None, ), # 4
    (5, TType.LIST, 'u_keyword', (TType.STRUCT,(KV, KV.thrift_spec)), None, ), # 5
    (6, TType.LIST, 'u_follow', (TType.STRUCT,(KV, KV.thrift_spec)), None, ), # 6
    (7, TType.LIST, 'u_video_topic', (TType.STRUCT,(KV, KV.thrift_spec)), None, ), # 7
    (8, TType.LIST, 'u_cluster', (TType.STRUCT,(KV, KV.thrift_spec)), None, ), # 8
    (9, TType.LIST, 'u_category', (TType.STRUCT,(KV, KV.thrift_spec)), None, ), # 9
    (10, TType.LIST, 'u_search_keyword', (TType.STRUCT,(KV, KV.thrift_spec)), None, ), # 10
    (11, TType.I32, 'u_reg', None, None, ), # 11
    (12, TType.LIST, 'u_installed_apps', (TType.STRUCT,(KV, KV.thrift_spec)), None, ), # 12
    (13, TType.LIST, 'u_dislike_authors', (TType.STRUCT,(KV, KV.thrift_spec)), None, ), # 13
  )

  def __init__(self, uid=None, u_age=None, u_gender=None, u_area=None, u_keyword=None, u_follow=None, u_video_topic=None, u_cluster=None, u_category=None, u_search_keyword=None, u_reg=None, u_installed_apps=None, u_dislike_authors=None,):
    self.uid = uid
    self.u_age = u_age
    self.u_gender = u_gender
    self.u_area = u_area
    self.u_keyword = u_keyword
    self.u_follow = u_follow
    self.u_video_topic = u_video_topic
    self.u_cluster = u_cluster
    self.u_category = u_category
    self.u_search_keyword = u_search_keyword
    self.u_reg = u_reg
    self.u_installed_apps = u_installed_apps
    self.u_dislike_authors = u_dislike_authors

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.uid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.u_age = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.u_gender = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.u_area = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.u_keyword = []
          (_etype45, _size42) = iprot.readListBegin()
          for _i46 in xrange(_size42):
            _elem47 = KV()
            _elem47.read(iprot)
            self.u_keyword.append(_elem47)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.u_follow = []
          (_etype51, _size48) = iprot.readListBegin()
          for _i52 in xrange(_size48):
            _elem53 = KV()
            _elem53.read(iprot)
            self.u_follow.append(_elem53)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.u_video_topic = []
          (_etype57, _size54) = iprot.readListBegin()
          for _i58 in xrange(_size54):
            _elem59 = KV()
            _elem59.read(iprot)
            self.u_video_topic.append(_elem59)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.LIST:
          self.u_cluster = []
          (_etype63, _size60) = iprot.readListBegin()
          for _i64 in xrange(_size60):
            _elem65 = KV()
            _elem65.read(iprot)
            self.u_cluster.append(_elem65)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.LIST:
          self.u_category = []
          (_etype69, _size66) = iprot.readListBegin()
          for _i70 in xrange(_size66):
            _elem71 = KV()
            _elem71.read(iprot)
            self.u_category.append(_elem71)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.LIST:
          self.u_search_keyword = []
          (_etype75, _size72) = iprot.readListBegin()
          for _i76 in xrange(_size72):
            _elem77 = KV()
            _elem77.read(iprot)
            self.u_search_keyword.append(_elem77)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.u_reg = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.LIST:
          self.u_installed_apps = []
          (_etype81, _size78) = iprot.readListBegin()
          for _i82 in xrange(_size78):
            _elem83 = KV()
            _elem83.read(iprot)
            self.u_installed_apps.append(_elem83)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.LIST:
          self.u_dislike_authors = []
          (_etype87, _size84) = iprot.readListBegin()
          for _i88 in xrange(_size84):
            _elem89 = KV()
            _elem89.read(iprot)
            self.u_dislike_authors.append(_elem89)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('User')
    if self.uid is not None:
      oprot.writeFieldBegin('uid', TType.STRING, 1)
      oprot.writeString(self.uid)
      oprot.writeFieldEnd()
    if self.u_age is not None:
      oprot.writeFieldBegin('u_age', TType.I32, 2)
      oprot.writeI32(self.u_age)
      oprot.writeFieldEnd()
    if self.u_gender is not None:
      oprot.writeFieldBegin('u_gender', TType.I32, 3)
      oprot.writeI32(self.u_gender)
      oprot.writeFieldEnd()
    if self.u_area is not None:
      oprot.writeFieldBegin('u_area', TType.I32, 4)
      oprot.writeI32(self.u_area)
      oprot.writeFieldEnd()
    if self.u_keyword is not None:
      oprot.writeFieldBegin('u_keyword', TType.LIST, 5)
      oprot.writeListBegin(TType.STRUCT, len(self.u_keyword))
      for iter90 in self.u_keyword:
        iter90.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.u_follow is not None:
      oprot.writeFieldBegin('u_follow', TType.LIST, 6)
      oprot.writeListBegin(TType.STRUCT, len(self.u_follow))
      for iter91 in self.u_follow:
        iter91.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.u_video_topic is not None:
      oprot.writeFieldBegin('u_video_topic', TType.LIST, 7)
      oprot.writeListBegin(TType.STRUCT, len(self.u_video_topic))
      for iter92 in self.u_video_topic:
        iter92.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.u_cluster is not None:
      oprot.writeFieldBegin('u_cluster', TType.LIST, 8)
      oprot.writeListBegin(TType.STRUCT, len(self.u_cluster))
      for iter93 in self.u_cluster:
        iter93.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.u_category is not None:
      oprot.writeFieldBegin('u_category', TType.LIST, 9)
      oprot.writeListBegin(TType.STRUCT, len(self.u_category))
      for iter94 in self.u_category:
        iter94.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.u_search_keyword is not None:
      oprot.writeFieldBegin('u_search_keyword', TType.LIST, 10)
      oprot.writeListBegin(TType.STRUCT, len(self.u_search_keyword))
      for iter95 in self.u_search_keyword:
        iter95.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.u_reg is not None:
      oprot.writeFieldBegin('u_reg', TType.I32, 11)
      oprot.writeI32(self.u_reg)
      oprot.writeFieldEnd()
    if self.u_installed_apps is not None:
      oprot.writeFieldBegin('u_installed_apps', TType.LIST, 12)
      oprot.writeListBegin(TType.STRUCT, len(self.u_installed_apps))
      for iter96 in self.u_installed_apps:
        iter96.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.u_dislike_authors is not None:
      oprot.writeFieldBegin('u_dislike_authors', TType.LIST, 13)
      oprot.writeListBegin(TType.STRUCT, len(self.u_dislike_authors))
      for iter97 in self.u_dislike_authors:
        iter97.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Author:
  """
  Attributes:
   - aid
   - a_level
   - a_fans
   - a_category
   - a_video_num
   - a_video_play_num
   - a_video_total_impr
   - a_video_total_playtime
   - a_video_fans_play_num
   - a_video_fans_impr_num
   - a_video_comment_num
   - a_video_digg_num
   - a_video_share_num
   - a_star
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'aid', None, None, ), # 1
    (2, TType.I32, 'a_level', None, None, ), # 2
    (3, TType.I32, 'a_fans', None, None, ), # 3
    (4, TType.I32, 'a_category', None, None, ), # 4
    (5, TType.I32, 'a_video_num', None, None, ), # 5
    (6, TType.I32, 'a_video_play_num', None, None, ), # 6
    (7, TType.I32, 'a_video_total_impr', None, None, ), # 7
    (8, TType.I32, 'a_video_total_playtime', None, None, ), # 8
    (9, TType.I32, 'a_video_fans_play_num', None, None, ), # 9
    (10, TType.I32, 'a_video_fans_impr_num', None, None, ), # 10
    (11, TType.I32, 'a_video_comment_num', None, None, ), # 11
    (12, TType.I32, 'a_video_digg_num', None, None, ), # 12
    (13, TType.I32, 'a_video_share_num', None, None, ), # 13
    (14, TType.I32, 'a_star', None, None, ), # 14
  )

  def __init__(self, aid=None, a_level=None, a_fans=None, a_category=None, a_video_num=None, a_video_play_num=None, a_video_total_impr=None, a_video_total_playtime=None, a_video_fans_play_num=None, a_video_fans_impr_num=None, a_video_comment_num=None, a_video_digg_num=None, a_video_share_num=None, a_star=None,):
    self.aid = aid
    self.a_level = a_level
    self.a_fans = a_fans
    self.a_category = a_category
    self.a_video_num = a_video_num
    self.a_video_play_num = a_video_play_num
    self.a_video_total_impr = a_video_total_impr
    self.a_video_total_playtime = a_video_total_playtime
    self.a_video_fans_play_num = a_video_fans_play_num
    self.a_video_fans_impr_num = a_video_fans_impr_num
    self.a_video_comment_num = a_video_comment_num
    self.a_video_digg_num = a_video_digg_num
    self.a_video_share_num = a_video_share_num
    self.a_star = a_star

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.aid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.a_level = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.a_fans = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.a_category = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.a_video_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.a_video_play_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.a_video_total_impr = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.a_video_total_playtime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.a_video_fans_play_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.a_video_fans_impr_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.a_video_comment_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.a_video_digg_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I32:
          self.a_video_share_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I32:
          self.a_star = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Author')
    if self.aid is not None:
      oprot.writeFieldBegin('aid', TType.I64, 1)
      oprot.writeI64(self.aid)
      oprot.writeFieldEnd()
    if self.a_level is not None:
      oprot.writeFieldBegin('a_level', TType.I32, 2)
      oprot.writeI32(self.a_level)
      oprot.writeFieldEnd()
    if self.a_fans is not None:
      oprot.writeFieldBegin('a_fans', TType.I32, 3)
      oprot.writeI32(self.a_fans)
      oprot.writeFieldEnd()
    if self.a_category is not None:
      oprot.writeFieldBegin('a_category', TType.I32, 4)
      oprot.writeI32(self.a_category)
      oprot.writeFieldEnd()
    if self.a_video_num is not None:
      oprot.writeFieldBegin('a_video_num', TType.I32, 5)
      oprot.writeI32(self.a_video_num)
      oprot.writeFieldEnd()
    if self.a_video_play_num is not None:
      oprot.writeFieldBegin('a_video_play_num', TType.I32, 6)
      oprot.writeI32(self.a_video_play_num)
      oprot.writeFieldEnd()
    if self.a_video_total_impr is not None:
      oprot.writeFieldBegin('a_video_total_impr', TType.I32, 7)
      oprot.writeI32(self.a_video_total_impr)
      oprot.writeFieldEnd()
    if self.a_video_total_playtime is not None:
      oprot.writeFieldBegin('a_video_total_playtime', TType.I32, 8)
      oprot.writeI32(self.a_video_total_playtime)
      oprot.writeFieldEnd()
    if self.a_video_fans_play_num is not None:
      oprot.writeFieldBegin('a_video_fans_play_num', TType.I32, 9)
      oprot.writeI32(self.a_video_fans_play_num)
      oprot.writeFieldEnd()
    if self.a_video_fans_impr_num is not None:
      oprot.writeFieldBegin('a_video_fans_impr_num', TType.I32, 10)
      oprot.writeI32(self.a_video_fans_impr_num)
      oprot.writeFieldEnd()
    if self.a_video_comment_num is not None:
      oprot.writeFieldBegin('a_video_comment_num', TType.I32, 11)
      oprot.writeI32(self.a_video_comment_num)
      oprot.writeFieldEnd()
    if self.a_video_digg_num is not None:
      oprot.writeFieldBegin('a_video_digg_num', TType.I32, 12)
      oprot.writeI32(self.a_video_digg_num)
      oprot.writeFieldEnd()
    if self.a_video_share_num is not None:
      oprot.writeFieldBegin('a_video_share_num', TType.I32, 13)
      oprot.writeI32(self.a_video_share_num)
      oprot.writeFieldEnd()
    if self.a_star is not None:
      oprot.writeFieldBegin('a_star', TType.I32, 14)
      oprot.writeI32(self.a_star)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CidAuthor:
  """
  Attributes:
   - cid
   - author
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'cid', None, None, ), # 1
    (2, TType.STRUCT, 'author', (Author, Author.thrift_spec), None, ), # 2
  )

  def __init__(self, cid=None, author=None,):
    self.cid = cid
    self.author = author

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.cid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.author = Author()
          self.author.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CidAuthor')
    if self.cid is not None:
      oprot.writeFieldBegin('cid', TType.I64, 1)
      oprot.writeI64(self.cid)
      oprot.writeFieldEnd()
    if self.author is not None:
      oprot.writeFieldBegin('author', TType.STRUCT, 2)
      self.author.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ContentProfileGetReq:
  """
  Attributes:
   - cid_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'cid_list', (TType.I64,None), None, ), # 1
  )

  def __init__(self, cid_list=None,):
    self.cid_list = cid_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.cid_list = []
          (_etype101, _size98) = iprot.readListBegin()
          for _i102 in xrange(_size98):
            _elem103 = iprot.readI64()
            self.cid_list.append(_elem103)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ContentProfileGetReq')
    if self.cid_list is not None:
      oprot.writeFieldBegin('cid_list', TType.LIST, 1)
      oprot.writeListBegin(TType.I64, len(self.cid_list))
      for iter104 in self.cid_list:
        oprot.writeI64(iter104)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ContentProfileGetRsp:
  """
  Attributes:
   - content_list
   - status
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'content_list', (TType.STRUCT,(Content, Content.thrift_spec)), None, ), # 1
    (2, TType.STRING, 'status', None, None, ), # 2
  )

  def __init__(self, content_list=None, status=None,):
    self.content_list = content_list
    self.status = status

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.content_list = []
          (_etype108, _size105) = iprot.readListBegin()
          for _i109 in xrange(_size105):
            _elem110 = Content()
            _elem110.read(iprot)
            self.content_list.append(_elem110)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.status = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ContentProfileGetRsp')
    if self.content_list is not None:
      oprot.writeFieldBegin('content_list', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.content_list))
      for iter111 in self.content_list:
        iter111.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.STRING, 2)
      oprot.writeString(self.status)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UserProfileGetReq:
  """
  Attributes:
   - uid_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'uid_list', (TType.STRING,None), None, ), # 1
  )

  def __init__(self, uid_list=None,):
    self.uid_list = uid_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.uid_list = []
          (_etype115, _size112) = iprot.readListBegin()
          for _i116 in xrange(_size112):
            _elem117 = iprot.readString()
            self.uid_list.append(_elem117)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UserProfileGetReq')
    if self.uid_list is not None:
      oprot.writeFieldBegin('uid_list', TType.LIST, 1)
      oprot.writeListBegin(TType.STRING, len(self.uid_list))
      for iter118 in self.uid_list:
        oprot.writeString(iter118)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UserProfileGetRsp:
  """
  Attributes:
   - user_list
   - status
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'user_list', (TType.STRUCT,(User, User.thrift_spec)), None, ), # 1
    (2, TType.STRING, 'status', None, None, ), # 2
  )

  def __init__(self, user_list=None, status=None,):
    self.user_list = user_list
    self.status = status

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.user_list = []
          (_etype122, _size119) = iprot.readListBegin()
          for _i123 in xrange(_size119):
            _elem124 = User()
            _elem124.read(iprot)
            self.user_list.append(_elem124)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.status = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UserProfileGetRsp')
    if self.user_list is not None:
      oprot.writeFieldBegin('user_list', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.user_list))
      for iter125 in self.user_list:
        iter125.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.STRING, 2)
      oprot.writeString(self.status)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AuthorProfileAidGetReq:
  """
  Attributes:
   - aid_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'aid_list', (TType.I64,None), None, ), # 1
  )

  def __init__(self, aid_list=None,):
    self.aid_list = aid_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.aid_list = []
          (_etype129, _size126) = iprot.readListBegin()
          for _i130 in xrange(_size126):
            _elem131 = iprot.readI64()
            self.aid_list.append(_elem131)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AuthorProfileAidGetReq')
    if self.aid_list is not None:
      oprot.writeFieldBegin('aid_list', TType.LIST, 1)
      oprot.writeListBegin(TType.I64, len(self.aid_list))
      for iter132 in self.aid_list:
        oprot.writeI64(iter132)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AuthorProfileAidGetRsp:
  """
  Attributes:
   - author_list
   - status
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'author_list', (TType.STRUCT,(Author, Author.thrift_spec)), None, ), # 1
    (2, TType.STRING, 'status', None, None, ), # 2
  )

  def __init__(self, author_list=None, status=None,):
    self.author_list = author_list
    self.status = status

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.author_list = []
          (_etype136, _size133) = iprot.readListBegin()
          for _i137 in xrange(_size133):
            _elem138 = Author()
            _elem138.read(iprot)
            self.author_list.append(_elem138)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.status = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AuthorProfileAidGetRsp')
    if self.author_list is not None:
      oprot.writeFieldBegin('author_list', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.author_list))
      for iter139 in self.author_list:
        iter139.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.STRING, 2)
      oprot.writeString(self.status)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AuthorProfileCidGetReq:
  """
  Attributes:
   - cid_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'cid_list', (TType.I64,None), None, ), # 1
  )

  def __init__(self, cid_list=None,):
    self.cid_list = cid_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.cid_list = []
          (_etype143, _size140) = iprot.readListBegin()
          for _i144 in xrange(_size140):
            _elem145 = iprot.readI64()
            self.cid_list.append(_elem145)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AuthorProfileCidGetReq')
    if self.cid_list is not None:
      oprot.writeFieldBegin('cid_list', TType.LIST, 1)
      oprot.writeListBegin(TType.I64, len(self.cid_list))
      for iter146 in self.cid_list:
        oprot.writeI64(iter146)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AuthorProfileCidGetRsp:
  """
  Attributes:
   - c_author_list
   - status
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'c_author_list', (TType.STRUCT,(CidAuthor, CidAuthor.thrift_spec)), None, ), # 1
    (2, TType.STRING, 'status', None, None, ), # 2
  )

  def __init__(self, c_author_list=None, status=None,):
    self.c_author_list = c_author_list
    self.status = status

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.c_author_list = []
          (_etype150, _size147) = iprot.readListBegin()
          for _i151 in xrange(_size147):
            _elem152 = CidAuthor()
            _elem152.read(iprot)
            self.c_author_list.append(_elem152)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.status = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AuthorProfileCidGetRsp')
    if self.c_author_list is not None:
      oprot.writeFieldBegin('c_author_list', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.c_author_list))
      for iter153 in self.c_author_list:
        iter153.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.STRING, 2)
      oprot.writeString(self.status)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ContentProfilePutReq:
  """
  Attributes:
   - content_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'content_list', (TType.STRUCT,(Content, Content.thrift_spec)), None, ), # 1
  )

  def __init__(self, content_list=None,):
    self.content_list = content_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.content_list = []
          (_etype157, _size154) = iprot.readListBegin()
          for _i158 in xrange(_size154):
            _elem159 = Content()
            _elem159.read(iprot)
            self.content_list.append(_elem159)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ContentProfilePutReq')
    if self.content_list is not None:
      oprot.writeFieldBegin('content_list', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.content_list))
      for iter160 in self.content_list:
        iter160.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UserProfilePutReq:
  """
  Attributes:
   - user_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'user_list', (TType.STRUCT,(User, User.thrift_spec)), None, ), # 1
  )

  def __init__(self, user_list=None,):
    self.user_list = user_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.user_list = []
          (_etype164, _size161) = iprot.readListBegin()
          for _i165 in xrange(_size161):
            _elem166 = User()
            _elem166.read(iprot)
            self.user_list.append(_elem166)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UserProfilePutReq')
    if self.user_list is not None:
      oprot.writeFieldBegin('user_list', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.user_list))
      for iter167 in self.user_list:
        iter167.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AuthorProfilePutReq:
  """
  Attributes:
   - author_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'author_list', (TType.STRUCT,(Author, Author.thrift_spec)), None, ), # 1
  )

  def __init__(self, author_list=None,):
    self.author_list = author_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.author_list = []
          (_etype171, _size168) = iprot.readListBegin()
          for _i172 in xrange(_size168):
            _elem173 = Author()
            _elem173.read(iprot)
            self.author_list.append(_elem173)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AuthorProfilePutReq')
    if self.author_list is not None:
      oprot.writeFieldBegin('author_list', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.author_list))
      for iter174 in self.author_list:
        iter174.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ProfilePutRsp:
  """
  Attributes:
   - status
   - count
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'status', None, None, ), # 1
    (2, TType.I32, 'count', None, None, ), # 2
  )

  def __init__(self, status=None, count=None,):
    self.status = status
    self.count = count

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.status = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.count = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ProfilePutRsp')
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.STRING, 1)
      oprot.writeString(self.status)
      oprot.writeFieldEnd()
    if self.count is not None:
      oprot.writeFieldBegin('count', TType.I32, 2)
      oprot.writeI32(self.count)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
