#
# Autogenerated by Thrift Compiler (0.9.3)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class MonitorInfo:
  """
  Attributes:
   - win_notice_url
   - impression_tracking_url
   - click_tracking_url
   - close_tracking_url
   - video_start_url
   - video_full_screen_url
   - video_end_url
   - video_start_card_url
   - app_download_url
   - app_start_download_url
   - app_install_url
   - app_start_install_url
   - app_active_url
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'win_notice_url', (TType.STRING,None), None, ), # 1
    (2, TType.LIST, 'impression_tracking_url', (TType.STRING,None), None, ), # 2
    (3, TType.LIST, 'click_tracking_url', (TType.STRING,None), None, ), # 3
    (4, TType.LIST, 'close_tracking_url', (TType.STRING,None), None, ), # 4
    (5, TType.LIST, 'video_start_url', (TType.STRING,None), None, ), # 5
    (6, TType.LIST, 'video_full_screen_url', (TType.STRING,None), None, ), # 6
    (7, TType.LIST, 'video_end_url', (TType.STRING,None), None, ), # 7
    (8, TType.LIST, 'video_start_card_url', (TType.STRING,None), None, ), # 8
    (9, TType.LIST, 'app_download_url', (TType.STRING,None), None, ), # 9
    (10, TType.LIST, 'app_start_download_url', (TType.STRING,None), None, ), # 10
    (11, TType.LIST, 'app_install_url', (TType.STRING,None), None, ), # 11
    (12, TType.LIST, 'app_start_install_url', (TType.STRING,None), None, ), # 12
    (13, TType.LIST, 'app_active_url', (TType.STRING,None), None, ), # 13
  )

  def __init__(self, win_notice_url=None, impression_tracking_url=None, click_tracking_url=None, close_tracking_url=None, video_start_url=None, video_full_screen_url=None, video_end_url=None, video_start_card_url=None, app_download_url=None, app_start_download_url=None, app_install_url=None, app_start_install_url=None, app_active_url=None,):
    self.win_notice_url = win_notice_url
    self.impression_tracking_url = impression_tracking_url
    self.click_tracking_url = click_tracking_url
    self.close_tracking_url = close_tracking_url
    self.video_start_url = video_start_url
    self.video_full_screen_url = video_full_screen_url
    self.video_end_url = video_end_url
    self.video_start_card_url = video_start_card_url
    self.app_download_url = app_download_url
    self.app_start_download_url = app_start_download_url
    self.app_install_url = app_install_url
    self.app_start_install_url = app_start_install_url
    self.app_active_url = app_active_url

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.win_notice_url = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readString()
            self.win_notice_url.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.impression_tracking_url = []
          (_etype9, _size6) = iprot.readListBegin()
          for _i10 in xrange(_size6):
            _elem11 = iprot.readString()
            self.impression_tracking_url.append(_elem11)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.click_tracking_url = []
          (_etype15, _size12) = iprot.readListBegin()
          for _i16 in xrange(_size12):
            _elem17 = iprot.readString()
            self.click_tracking_url.append(_elem17)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.close_tracking_url = []
          (_etype21, _size18) = iprot.readListBegin()
          for _i22 in xrange(_size18):
            _elem23 = iprot.readString()
            self.close_tracking_url.append(_elem23)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.video_start_url = []
          (_etype27, _size24) = iprot.readListBegin()
          for _i28 in xrange(_size24):
            _elem29 = iprot.readString()
            self.video_start_url.append(_elem29)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.video_full_screen_url = []
          (_etype33, _size30) = iprot.readListBegin()
          for _i34 in xrange(_size30):
            _elem35 = iprot.readString()
            self.video_full_screen_url.append(_elem35)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.video_end_url = []
          (_etype39, _size36) = iprot.readListBegin()
          for _i40 in xrange(_size36):
            _elem41 = iprot.readString()
            self.video_end_url.append(_elem41)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.LIST:
          self.video_start_card_url = []
          (_etype45, _size42) = iprot.readListBegin()
          for _i46 in xrange(_size42):
            _elem47 = iprot.readString()
            self.video_start_card_url.append(_elem47)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.LIST:
          self.app_download_url = []
          (_etype51, _size48) = iprot.readListBegin()
          for _i52 in xrange(_size48):
            _elem53 = iprot.readString()
            self.app_download_url.append(_elem53)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.LIST:
          self.app_start_download_url = []
          (_etype57, _size54) = iprot.readListBegin()
          for _i58 in xrange(_size54):
            _elem59 = iprot.readString()
            self.app_start_download_url.append(_elem59)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.LIST:
          self.app_install_url = []
          (_etype63, _size60) = iprot.readListBegin()
          for _i64 in xrange(_size60):
            _elem65 = iprot.readString()
            self.app_install_url.append(_elem65)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.LIST:
          self.app_start_install_url = []
          (_etype69, _size66) = iprot.readListBegin()
          for _i70 in xrange(_size66):
            _elem71 = iprot.readString()
            self.app_start_install_url.append(_elem71)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.LIST:
          self.app_active_url = []
          (_etype75, _size72) = iprot.readListBegin()
          for _i76 in xrange(_size72):
            _elem77 = iprot.readString()
            self.app_active_url.append(_elem77)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('MonitorInfo')
    if self.win_notice_url is not None:
      oprot.writeFieldBegin('win_notice_url', TType.LIST, 1)
      oprot.writeListBegin(TType.STRING, len(self.win_notice_url))
      for iter78 in self.win_notice_url:
        oprot.writeString(iter78)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.impression_tracking_url is not None:
      oprot.writeFieldBegin('impression_tracking_url', TType.LIST, 2)
      oprot.writeListBegin(TType.STRING, len(self.impression_tracking_url))
      for iter79 in self.impression_tracking_url:
        oprot.writeString(iter79)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.click_tracking_url is not None:
      oprot.writeFieldBegin('click_tracking_url', TType.LIST, 3)
      oprot.writeListBegin(TType.STRING, len(self.click_tracking_url))
      for iter80 in self.click_tracking_url:
        oprot.writeString(iter80)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.close_tracking_url is not None:
      oprot.writeFieldBegin('close_tracking_url', TType.LIST, 4)
      oprot.writeListBegin(TType.STRING, len(self.close_tracking_url))
      for iter81 in self.close_tracking_url:
        oprot.writeString(iter81)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.video_start_url is not None:
      oprot.writeFieldBegin('video_start_url', TType.LIST, 5)
      oprot.writeListBegin(TType.STRING, len(self.video_start_url))
      for iter82 in self.video_start_url:
        oprot.writeString(iter82)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.video_full_screen_url is not None:
      oprot.writeFieldBegin('video_full_screen_url', TType.LIST, 6)
      oprot.writeListBegin(TType.STRING, len(self.video_full_screen_url))
      for iter83 in self.video_full_screen_url:
        oprot.writeString(iter83)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.video_end_url is not None:
      oprot.writeFieldBegin('video_end_url', TType.LIST, 7)
      oprot.writeListBegin(TType.STRING, len(self.video_end_url))
      for iter84 in self.video_end_url:
        oprot.writeString(iter84)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.video_start_card_url is not None:
      oprot.writeFieldBegin('video_start_card_url', TType.LIST, 8)
      oprot.writeListBegin(TType.STRING, len(self.video_start_card_url))
      for iter85 in self.video_start_card_url:
        oprot.writeString(iter85)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.app_download_url is not None:
      oprot.writeFieldBegin('app_download_url', TType.LIST, 9)
      oprot.writeListBegin(TType.STRING, len(self.app_download_url))
      for iter86 in self.app_download_url:
        oprot.writeString(iter86)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.app_start_download_url is not None:
      oprot.writeFieldBegin('app_start_download_url', TType.LIST, 10)
      oprot.writeListBegin(TType.STRING, len(self.app_start_download_url))
      for iter87 in self.app_start_download_url:
        oprot.writeString(iter87)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.app_install_url is not None:
      oprot.writeFieldBegin('app_install_url', TType.LIST, 11)
      oprot.writeListBegin(TType.STRING, len(self.app_install_url))
      for iter88 in self.app_install_url:
        oprot.writeString(iter88)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.app_start_install_url is not None:
      oprot.writeFieldBegin('app_start_install_url', TType.LIST, 12)
      oprot.writeListBegin(TType.STRING, len(self.app_start_install_url))
      for iter89 in self.app_start_install_url:
        oprot.writeString(iter89)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.app_active_url is not None:
      oprot.writeFieldBegin('app_active_url', TType.LIST, 13)
      oprot.writeListBegin(TType.STRING, len(self.app_active_url))
      for iter90 in self.app_active_url:
        oprot.writeString(iter90)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.win_notice_url)
    value = (value * 31) ^ hash(self.impression_tracking_url)
    value = (value * 31) ^ hash(self.click_tracking_url)
    value = (value * 31) ^ hash(self.close_tracking_url)
    value = (value * 31) ^ hash(self.video_start_url)
    value = (value * 31) ^ hash(self.video_full_screen_url)
    value = (value * 31) ^ hash(self.video_end_url)
    value = (value * 31) ^ hash(self.video_start_card_url)
    value = (value * 31) ^ hash(self.app_download_url)
    value = (value * 31) ^ hash(self.app_start_download_url)
    value = (value * 31) ^ hash(self.app_install_url)
    value = (value * 31) ^ hash(self.app_start_install_url)
    value = (value * 31) ^ hash(self.app_active_url)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AdItem:
  """
  Attributes:
   - creative_id
   - source
   - image_url
   - video_url
   - video_size
   - video_duration
   - landing_url
   - download_url
   - package_name
   - package_size
   - app_name
   - app_icon
   - app_version
   - creative_title
   - sponsor_name
   - sponsor_icon
   - creative_type
   - jump_type
   - schema_url
   - phone_number
   - start_time
   - end_time
   - logo_text
   - logo_icon
   - monitor_info
   - bid_price
   - image_array
   - token
   - ad_width
   - ad_height
   - need_encrypt
   - protocol
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'creative_id', None, None, ), # 1
    (2, TType.I32, 'source', None, None, ), # 2
    (3, TType.STRING, 'image_url', None, None, ), # 3
    (4, TType.STRING, 'video_url', None, None, ), # 4
    (5, TType.I32, 'video_size', None, None, ), # 5
    (6, TType.I32, 'video_duration', None, None, ), # 6
    (7, TType.STRING, 'landing_url', None, None, ), # 7
    (8, TType.STRING, 'download_url', None, None, ), # 8
    (9, TType.STRING, 'package_name', None, None, ), # 9
    (10, TType.I32, 'package_size', None, None, ), # 10
    (11, TType.STRING, 'app_name', None, None, ), # 11
    (12, TType.STRING, 'app_icon', None, None, ), # 12
    (13, TType.STRING, 'app_version', None, None, ), # 13
    (14, TType.STRING, 'creative_title', None, None, ), # 14
    (15, TType.STRING, 'sponsor_name', None, None, ), # 15
    (16, TType.STRING, 'sponsor_icon', None, None, ), # 16
    (17, TType.I32, 'creative_type', None, None, ), # 17
    (18, TType.I32, 'jump_type', None, None, ), # 18
    (19, TType.STRING, 'schema_url', None, None, ), # 19
    (20, TType.STRING, 'phone_number', None, None, ), # 20
    (21, TType.I32, 'start_time', None, None, ), # 21
    (22, TType.I32, 'end_time', None, None, ), # 22
    (23, TType.STRING, 'logo_text', None, None, ), # 23
    (24, TType.STRING, 'logo_icon', None, None, ), # 24
    (25, TType.STRUCT, 'monitor_info', (MonitorInfo, MonitorInfo.thrift_spec), None, ), # 25
    (26, TType.I64, 'bid_price', None, None, ), # 26
    (27, TType.LIST, 'image_array', (TType.STRING,None), None, ), # 27
    (28, TType.STRING, 'token', None, None, ), # 28
    (29, TType.I32, 'ad_width', None, None, ), # 29
    (30, TType.I32, 'ad_height', None, None, ), # 30
    (31, TType.BOOL, 'need_encrypt', None, None, ), # 31
    (32, TType.I32, 'protocol', None, None, ), # 32
  )

  def __init__(self, creative_id=None, source=None, image_url=None, video_url=None, video_size=None, video_duration=None, landing_url=None, download_url=None, package_name=None, package_size=None, app_name=None, app_icon=None, app_version=None, creative_title=None, sponsor_name=None, sponsor_icon=None, creative_type=None, jump_type=None, schema_url=None, phone_number=None, start_time=None, end_time=None, logo_text=None, logo_icon=None, monitor_info=None, bid_price=None, image_array=None, token=None, ad_width=None, ad_height=None, need_encrypt=None, protocol=None,):
    self.creative_id = creative_id
    self.source = source
    self.image_url = image_url
    self.video_url = video_url
    self.video_size = video_size
    self.video_duration = video_duration
    self.landing_url = landing_url
    self.download_url = download_url
    self.package_name = package_name
    self.package_size = package_size
    self.app_name = app_name
    self.app_icon = app_icon
    self.app_version = app_version
    self.creative_title = creative_title
    self.sponsor_name = sponsor_name
    self.sponsor_icon = sponsor_icon
    self.creative_type = creative_type
    self.jump_type = jump_type
    self.schema_url = schema_url
    self.phone_number = phone_number
    self.start_time = start_time
    self.end_time = end_time
    self.logo_text = logo_text
    self.logo_icon = logo_icon
    self.monitor_info = monitor_info
    self.bid_price = bid_price
    self.image_array = image_array
    self.token = token
    self.ad_width = ad_width
    self.ad_height = ad_height
    self.need_encrypt = need_encrypt
    self.protocol = protocol

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.creative_id = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.source = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.image_url = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.video_url = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.video_size = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.video_duration = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.landing_url = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.download_url = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.package_name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.package_size = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.app_name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.app_icon = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.app_version = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRING:
          self.creative_title = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.STRING:
          self.sponsor_name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.STRING:
          self.sponsor_icon = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.I32:
          self.creative_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.I32:
          self.jump_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.STRING:
          self.schema_url = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.STRING:
          self.phone_number = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.I32:
          self.start_time = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.I32:
          self.end_time = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.STRING:
          self.logo_text = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 24:
        if ftype == TType.STRING:
          self.logo_icon = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 25:
        if ftype == TType.STRUCT:
          self.monitor_info = MonitorInfo()
          self.monitor_info.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 26:
        if ftype == TType.I64:
          self.bid_price = iprot.readI64()
        else:
          iprot.skip(ftype)
      elif fid == 27:
        if ftype == TType.LIST:
          self.image_array = []
          (_etype94, _size91) = iprot.readListBegin()
          for _i95 in xrange(_size91):
            _elem96 = iprot.readString()
            self.image_array.append(_elem96)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 28:
        if ftype == TType.STRING:
          self.token = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 29:
        if ftype == TType.I32:
          self.ad_width = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.I32:
          self.ad_height = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 31:
        if ftype == TType.BOOL:
          self.need_encrypt = iprot.readBool()
        else:
          iprot.skip(ftype)
      elif fid == 32:
        if ftype == TType.I32:
          self.protocol = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AdItem')
    if self.creative_id is not None:
      oprot.writeFieldBegin('creative_id', TType.I64, 1)
      oprot.writeI64(self.creative_id)
      oprot.writeFieldEnd()
    if self.source is not None:
      oprot.writeFieldBegin('source', TType.I32, 2)
      oprot.writeI32(self.source)
      oprot.writeFieldEnd()
    if self.image_url is not None:
      oprot.writeFieldBegin('image_url', TType.STRING, 3)
      oprot.writeString(self.image_url)
      oprot.writeFieldEnd()
    if self.video_url is not None:
      oprot.writeFieldBegin('video_url', TType.STRING, 4)
      oprot.writeString(self.video_url)
      oprot.writeFieldEnd()
    if self.video_size is not None:
      oprot.writeFieldBegin('video_size', TType.I32, 5)
      oprot.writeI32(self.video_size)
      oprot.writeFieldEnd()
    if self.video_duration is not None:
      oprot.writeFieldBegin('video_duration', TType.I32, 6)
      oprot.writeI32(self.video_duration)
      oprot.writeFieldEnd()
    if self.landing_url is not None:
      oprot.writeFieldBegin('landing_url', TType.STRING, 7)
      oprot.writeString(self.landing_url)
      oprot.writeFieldEnd()
    if self.download_url is not None:
      oprot.writeFieldBegin('download_url', TType.STRING, 8)
      oprot.writeString(self.download_url)
      oprot.writeFieldEnd()
    if self.package_name is not None:
      oprot.writeFieldBegin('package_name', TType.STRING, 9)
      oprot.writeString(self.package_name)
      oprot.writeFieldEnd()
    if self.package_size is not None:
      oprot.writeFieldBegin('package_size', TType.I32, 10)
      oprot.writeI32(self.package_size)
      oprot.writeFieldEnd()
    if self.app_name is not None:
      oprot.writeFieldBegin('app_name', TType.STRING, 11)
      oprot.writeString(self.app_name)
      oprot.writeFieldEnd()
    if self.app_icon is not None:
      oprot.writeFieldBegin('app_icon', TType.STRING, 12)
      oprot.writeString(self.app_icon)
      oprot.writeFieldEnd()
    if self.app_version is not None:
      oprot.writeFieldBegin('app_version', TType.STRING, 13)
      oprot.writeString(self.app_version)
      oprot.writeFieldEnd()
    if self.creative_title is not None:
      oprot.writeFieldBegin('creative_title', TType.STRING, 14)
      oprot.writeString(self.creative_title)
      oprot.writeFieldEnd()
    if self.sponsor_name is not None:
      oprot.writeFieldBegin('sponsor_name', TType.STRING, 15)
      oprot.writeString(self.sponsor_name)
      oprot.writeFieldEnd()
    if self.sponsor_icon is not None:
      oprot.writeFieldBegin('sponsor_icon', TType.STRING, 16)
      oprot.writeString(self.sponsor_icon)
      oprot.writeFieldEnd()
    if self.creative_type is not None:
      oprot.writeFieldBegin('creative_type', TType.I32, 17)
      oprot.writeI32(self.creative_type)
      oprot.writeFieldEnd()
    if self.jump_type is not None:
      oprot.writeFieldBegin('jump_type', TType.I32, 18)
      oprot.writeI32(self.jump_type)
      oprot.writeFieldEnd()
    if self.schema_url is not None:
      oprot.writeFieldBegin('schema_url', TType.STRING, 19)
      oprot.writeString(self.schema_url)
      oprot.writeFieldEnd()
    if self.phone_number is not None:
      oprot.writeFieldBegin('phone_number', TType.STRING, 20)
      oprot.writeString(self.phone_number)
      oprot.writeFieldEnd()
    if self.start_time is not None:
      oprot.writeFieldBegin('start_time', TType.I32, 21)
      oprot.writeI32(self.start_time)
      oprot.writeFieldEnd()
    if self.end_time is not None:
      oprot.writeFieldBegin('end_time', TType.I32, 22)
      oprot.writeI32(self.end_time)
      oprot.writeFieldEnd()
    if self.logo_text is not None:
      oprot.writeFieldBegin('logo_text', TType.STRING, 23)
      oprot.writeString(self.logo_text)
      oprot.writeFieldEnd()
    if self.logo_icon is not None:
      oprot.writeFieldBegin('logo_icon', TType.STRING, 24)
      oprot.writeString(self.logo_icon)
      oprot.writeFieldEnd()
    if self.monitor_info is not None:
      oprot.writeFieldBegin('monitor_info', TType.STRUCT, 25)
      self.monitor_info.write(oprot)
      oprot.writeFieldEnd()
    if self.bid_price is not None:
      oprot.writeFieldBegin('bid_price', TType.I64, 26)
      oprot.writeI64(self.bid_price)
      oprot.writeFieldEnd()
    if self.image_array is not None:
      oprot.writeFieldBegin('image_array', TType.LIST, 27)
      oprot.writeListBegin(TType.STRING, len(self.image_array))
      for iter97 in self.image_array:
        oprot.writeString(iter97)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.token is not None:
      oprot.writeFieldBegin('token', TType.STRING, 28)
      oprot.writeString(self.token)
      oprot.writeFieldEnd()
    if self.ad_width is not None:
      oprot.writeFieldBegin('ad_width', TType.I32, 29)
      oprot.writeI32(self.ad_width)
      oprot.writeFieldEnd()
    if self.ad_height is not None:
      oprot.writeFieldBegin('ad_height', TType.I32, 30)
      oprot.writeI32(self.ad_height)
      oprot.writeFieldEnd()
    if self.need_encrypt is not None:
      oprot.writeFieldBegin('need_encrypt', TType.BOOL, 31)
      oprot.writeBool(self.need_encrypt)
      oprot.writeFieldEnd()
    if self.protocol is not None:
      oprot.writeFieldBegin('protocol', TType.I32, 32)
      oprot.writeI32(self.protocol)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.creative_id)
    value = (value * 31) ^ hash(self.source)
    value = (value * 31) ^ hash(self.image_url)
    value = (value * 31) ^ hash(self.video_url)
    value = (value * 31) ^ hash(self.video_size)
    value = (value * 31) ^ hash(self.video_duration)
    value = (value * 31) ^ hash(self.landing_url)
    value = (value * 31) ^ hash(self.download_url)
    value = (value * 31) ^ hash(self.package_name)
    value = (value * 31) ^ hash(self.package_size)
    value = (value * 31) ^ hash(self.app_name)
    value = (value * 31) ^ hash(self.app_icon)
    value = (value * 31) ^ hash(self.app_version)
    value = (value * 31) ^ hash(self.creative_title)
    value = (value * 31) ^ hash(self.sponsor_name)
    value = (value * 31) ^ hash(self.sponsor_icon)
    value = (value * 31) ^ hash(self.creative_type)
    value = (value * 31) ^ hash(self.jump_type)
    value = (value * 31) ^ hash(self.schema_url)
    value = (value * 31) ^ hash(self.phone_number)
    value = (value * 31) ^ hash(self.start_time)
    value = (value * 31) ^ hash(self.end_time)
    value = (value * 31) ^ hash(self.logo_text)
    value = (value * 31) ^ hash(self.logo_icon)
    value = (value * 31) ^ hash(self.monitor_info)
    value = (value * 31) ^ hash(self.bid_price)
    value = (value * 31) ^ hash(self.image_array)
    value = (value * 31) ^ hash(self.token)
    value = (value * 31) ^ hash(self.ad_width)
    value = (value * 31) ^ hash(self.ad_height)
    value = (value * 31) ^ hash(self.need_encrypt)
    value = (value * 31) ^ hash(self.protocol)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Req:
  """
  Attributes:
   - os_name
   - os_version
   - androidId
   - imei
   - mac
   - dpi
   - pos_id
   - count
   - carrier
   - network
   - req_ip
   - user_agent
   - screen_width
   - screen_height
   - manufacturer
   - model
   - app_version
   - area
   - device_brand
   - impr_ids
   - source
   - latitude
   - longitude
   - orientation
   - device_type
   - package_name
   - app_id
   - ad_width
   - ad_height
   - cpm
   - rom
   - ram
   - idfa
   - idfv
   - openudid
   - tk
   - platform
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'os_name', None, None, ), # 1
    (2, TType.STRING, 'os_version', None, None, ), # 2
    (3, TType.STRING, 'androidId', None, None, ), # 3
    (4, TType.STRING, 'imei', None, None, ), # 4
    (5, TType.STRING, 'mac', None, None, ), # 5
    (6, TType.I32, 'dpi', None, None, ), # 6
    (7, TType.I32, 'pos_id', None, None, ), # 7
    (8, TType.I32, 'count', None, None, ), # 8
    (9, TType.STRING, 'carrier', None, None, ), # 9
    (10, TType.STRING, 'network', None, None, ), # 10
    (11, TType.STRING, 'req_ip', None, None, ), # 11
    (12, TType.STRING, 'user_agent', None, None, ), # 12
    (13, TType.I32, 'screen_width', None, None, ), # 13
    (14, TType.I32, 'screen_height', None, None, ), # 14
    (15, TType.STRING, 'manufacturer', None, None, ), # 15
    (16, TType.STRING, 'model', None, None, ), # 16
    (17, TType.STRING, 'app_version', None, None, ), # 17
    (18, TType.STRING, 'area', None, None, ), # 18
    (19, TType.STRING, 'device_brand', None, None, ), # 19
    (20, TType.LIST, 'impr_ids', (TType.I64,None), None, ), # 20
    (21, TType.I32, 'source', None, None, ), # 21
    (22, TType.DOUBLE, 'latitude', None, None, ), # 22
    (23, TType.DOUBLE, 'longitude', None, None, ), # 23
    (24, TType.I32, 'orientation', None, None, ), # 24
    (25, TType.I32, 'device_type', None, None, ), # 25
    (26, TType.STRING, 'package_name', None, None, ), # 26
    (27, TType.I32, 'app_id', None, None, ), # 27
    (28, TType.I32, 'ad_width', None, None, ), # 28
    (29, TType.I32, 'ad_height', None, None, ), # 29
    (30, TType.I32, 'cpm', None, None, ), # 30
    (31, TType.I32, 'rom', None, None, ), # 31
    (32, TType.I32, 'ram', None, None, ), # 32
    (33, TType.STRING, 'idfa', None, None, ), # 33
    (34, TType.STRING, 'idfv', None, None, ), # 34
    (35, TType.STRING, 'openudid', None, None, ), # 35
    (36, TType.STRING, 'tk', None, None, ), # 36
    (37, TType.I32, 'platform', None, None, ), # 37
  )

  def __init__(self, os_name=None, os_version=None, androidId=None, imei=None, mac=None, dpi=None, pos_id=None, count=None, carrier=None, network=None, req_ip=None, user_agent=None, screen_width=None, screen_height=None, manufacturer=None, model=None, app_version=None, area=None, device_brand=None, impr_ids=None, source=None, latitude=None, longitude=None, orientation=None, device_type=None, package_name=None, app_id=None, ad_width=None, ad_height=None, cpm=None, rom=None, ram=None, idfa=None, idfv=None, openudid=None, tk=None, platform=None,):
    self.os_name = os_name
    self.os_version = os_version
    self.androidId = androidId
    self.imei = imei
    self.mac = mac
    self.dpi = dpi
    self.pos_id = pos_id
    self.count = count
    self.carrier = carrier
    self.network = network
    self.req_ip = req_ip
    self.user_agent = user_agent
    self.screen_width = screen_width
    self.screen_height = screen_height
    self.manufacturer = manufacturer
    self.model = model
    self.app_version = app_version
    self.area = area
    self.device_brand = device_brand
    self.impr_ids = impr_ids
    self.source = source
    self.latitude = latitude
    self.longitude = longitude
    self.orientation = orientation
    self.device_type = device_type
    self.package_name = package_name
    self.app_id = app_id
    self.ad_width = ad_width
    self.ad_height = ad_height
    self.cpm = cpm
    self.rom = rom
    self.ram = ram
    self.idfa = idfa
    self.idfv = idfv
    self.openudid = openudid
    self.tk = tk
    self.platform = platform

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.os_name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.os_version = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.androidId = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.imei = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.mac = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.dpi = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.pos_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.count = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.carrier = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.network = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.req_ip = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.user_agent = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I32:
          self.screen_width = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I32:
          self.screen_height = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.STRING:
          self.manufacturer = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.STRING:
          self.model = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.STRING:
          self.app_version = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.STRING:
          self.area = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.STRING:
          self.device_brand = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.LIST:
          self.impr_ids = []
          (_etype101, _size98) = iprot.readListBegin()
          for _i102 in xrange(_size98):
            _elem103 = iprot.readI64()
            self.impr_ids.append(_elem103)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.I32:
          self.source = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.DOUBLE:
          self.latitude = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.DOUBLE:
          self.longitude = iprot.readDouble()
        else:
          iprot.skip(ftype)
      elif fid == 24:
        if ftype == TType.I32:
          self.orientation = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 25:
        if ftype == TType.I32:
          self.device_type = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 26:
        if ftype == TType.STRING:
          self.package_name = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 27:
        if ftype == TType.I32:
          self.app_id = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 28:
        if ftype == TType.I32:
          self.ad_width = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 29:
        if ftype == TType.I32:
          self.ad_height = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.I32:
          self.cpm = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 31:
        if ftype == TType.I32:
          self.rom = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 32:
        if ftype == TType.I32:
          self.ram = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 33:
        if ftype == TType.STRING:
          self.idfa = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 34:
        if ftype == TType.STRING:
          self.idfv = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 35:
        if ftype == TType.STRING:
          self.openudid = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 36:
        if ftype == TType.STRING:
          self.tk = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 37:
        if ftype == TType.I32:
          self.platform = iprot.readI32()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Req')
    if self.os_name is not None:
      oprot.writeFieldBegin('os_name', TType.STRING, 1)
      oprot.writeString(self.os_name)
      oprot.writeFieldEnd()
    if self.os_version is not None:
      oprot.writeFieldBegin('os_version', TType.STRING, 2)
      oprot.writeString(self.os_version)
      oprot.writeFieldEnd()
    if self.androidId is not None:
      oprot.writeFieldBegin('androidId', TType.STRING, 3)
      oprot.writeString(self.androidId)
      oprot.writeFieldEnd()
    if self.imei is not None:
      oprot.writeFieldBegin('imei', TType.STRING, 4)
      oprot.writeString(self.imei)
      oprot.writeFieldEnd()
    if self.mac is not None:
      oprot.writeFieldBegin('mac', TType.STRING, 5)
      oprot.writeString(self.mac)
      oprot.writeFieldEnd()
    if self.dpi is not None:
      oprot.writeFieldBegin('dpi', TType.I32, 6)
      oprot.writeI32(self.dpi)
      oprot.writeFieldEnd()
    if self.pos_id is not None:
      oprot.writeFieldBegin('pos_id', TType.I32, 7)
      oprot.writeI32(self.pos_id)
      oprot.writeFieldEnd()
    if self.count is not None:
      oprot.writeFieldBegin('count', TType.I32, 8)
      oprot.writeI32(self.count)
      oprot.writeFieldEnd()
    if self.carrier is not None:
      oprot.writeFieldBegin('carrier', TType.STRING, 9)
      oprot.writeString(self.carrier)
      oprot.writeFieldEnd()
    if self.network is not None:
      oprot.writeFieldBegin('network', TType.STRING, 10)
      oprot.writeString(self.network)
      oprot.writeFieldEnd()
    if self.req_ip is not None:
      oprot.writeFieldBegin('req_ip', TType.STRING, 11)
      oprot.writeString(self.req_ip)
      oprot.writeFieldEnd()
    if self.user_agent is not None:
      oprot.writeFieldBegin('user_agent', TType.STRING, 12)
      oprot.writeString(self.user_agent)
      oprot.writeFieldEnd()
    if self.screen_width is not None:
      oprot.writeFieldBegin('screen_width', TType.I32, 13)
      oprot.writeI32(self.screen_width)
      oprot.writeFieldEnd()
    if self.screen_height is not None:
      oprot.writeFieldBegin('screen_height', TType.I32, 14)
      oprot.writeI32(self.screen_height)
      oprot.writeFieldEnd()
    if self.manufacturer is not None:
      oprot.writeFieldBegin('manufacturer', TType.STRING, 15)
      oprot.writeString(self.manufacturer)
      oprot.writeFieldEnd()
    if self.model is not None:
      oprot.writeFieldBegin('model', TType.STRING, 16)
      oprot.writeString(self.model)
      oprot.writeFieldEnd()
    if self.app_version is not None:
      oprot.writeFieldBegin('app_version', TType.STRING, 17)
      oprot.writeString(self.app_version)
      oprot.writeFieldEnd()
    if self.area is not None:
      oprot.writeFieldBegin('area', TType.STRING, 18)
      oprot.writeString(self.area)
      oprot.writeFieldEnd()
    if self.device_brand is not None:
      oprot.writeFieldBegin('device_brand', TType.STRING, 19)
      oprot.writeString(self.device_brand)
      oprot.writeFieldEnd()
    if self.impr_ids is not None:
      oprot.writeFieldBegin('impr_ids', TType.LIST, 20)
      oprot.writeListBegin(TType.I64, len(self.impr_ids))
      for iter104 in self.impr_ids:
        oprot.writeI64(iter104)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.source is not None:
      oprot.writeFieldBegin('source', TType.I32, 21)
      oprot.writeI32(self.source)
      oprot.writeFieldEnd()
    if self.latitude is not None:
      oprot.writeFieldBegin('latitude', TType.DOUBLE, 22)
      oprot.writeDouble(self.latitude)
      oprot.writeFieldEnd()
    if self.longitude is not None:
      oprot.writeFieldBegin('longitude', TType.DOUBLE, 23)
      oprot.writeDouble(self.longitude)
      oprot.writeFieldEnd()
    if self.orientation is not None:
      oprot.writeFieldBegin('orientation', TType.I32, 24)
      oprot.writeI32(self.orientation)
      oprot.writeFieldEnd()
    if self.device_type is not None:
      oprot.writeFieldBegin('device_type', TType.I32, 25)
      oprot.writeI32(self.device_type)
      oprot.writeFieldEnd()
    if self.package_name is not None:
      oprot.writeFieldBegin('package_name', TType.STRING, 26)
      oprot.writeString(self.package_name)
      oprot.writeFieldEnd()
    if self.app_id is not None:
      oprot.writeFieldBegin('app_id', TType.I32, 27)
      oprot.writeI32(self.app_id)
      oprot.writeFieldEnd()
    if self.ad_width is not None:
      oprot.writeFieldBegin('ad_width', TType.I32, 28)
      oprot.writeI32(self.ad_width)
      oprot.writeFieldEnd()
    if self.ad_height is not None:
      oprot.writeFieldBegin('ad_height', TType.I32, 29)
      oprot.writeI32(self.ad_height)
      oprot.writeFieldEnd()
    if self.cpm is not None:
      oprot.writeFieldBegin('cpm', TType.I32, 30)
      oprot.writeI32(self.cpm)
      oprot.writeFieldEnd()
    if self.rom is not None:
      oprot.writeFieldBegin('rom', TType.I32, 31)
      oprot.writeI32(self.rom)
      oprot.writeFieldEnd()
    if self.ram is not None:
      oprot.writeFieldBegin('ram', TType.I32, 32)
      oprot.writeI32(self.ram)
      oprot.writeFieldEnd()
    if self.idfa is not None:
      oprot.writeFieldBegin('idfa', TType.STRING, 33)
      oprot.writeString(self.idfa)
      oprot.writeFieldEnd()
    if self.idfv is not None:
      oprot.writeFieldBegin('idfv', TType.STRING, 34)
      oprot.writeString(self.idfv)
      oprot.writeFieldEnd()
    if self.openudid is not None:
      oprot.writeFieldBegin('openudid', TType.STRING, 35)
      oprot.writeString(self.openudid)
      oprot.writeFieldEnd()
    if self.tk is not None:
      oprot.writeFieldBegin('tk', TType.STRING, 36)
      oprot.writeString(self.tk)
      oprot.writeFieldEnd()
    if self.platform is not None:
      oprot.writeFieldBegin('platform', TType.I32, 37)
      oprot.writeI32(self.platform)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.os_name)
    value = (value * 31) ^ hash(self.os_version)
    value = (value * 31) ^ hash(self.androidId)
    value = (value * 31) ^ hash(self.imei)
    value = (value * 31) ^ hash(self.mac)
    value = (value * 31) ^ hash(self.dpi)
    value = (value * 31) ^ hash(self.pos_id)
    value = (value * 31) ^ hash(self.count)
    value = (value * 31) ^ hash(self.carrier)
    value = (value * 31) ^ hash(self.network)
    value = (value * 31) ^ hash(self.req_ip)
    value = (value * 31) ^ hash(self.user_agent)
    value = (value * 31) ^ hash(self.screen_width)
    value = (value * 31) ^ hash(self.screen_height)
    value = (value * 31) ^ hash(self.manufacturer)
    value = (value * 31) ^ hash(self.model)
    value = (value * 31) ^ hash(self.app_version)
    value = (value * 31) ^ hash(self.area)
    value = (value * 31) ^ hash(self.device_brand)
    value = (value * 31) ^ hash(self.impr_ids)
    value = (value * 31) ^ hash(self.source)
    value = (value * 31) ^ hash(self.latitude)
    value = (value * 31) ^ hash(self.longitude)
    value = (value * 31) ^ hash(self.orientation)
    value = (value * 31) ^ hash(self.device_type)
    value = (value * 31) ^ hash(self.package_name)
    value = (value * 31) ^ hash(self.app_id)
    value = (value * 31) ^ hash(self.ad_width)
    value = (value * 31) ^ hash(self.ad_height)
    value = (value * 31) ^ hash(self.cpm)
    value = (value * 31) ^ hash(self.rom)
    value = (value * 31) ^ hash(self.ram)
    value = (value * 31) ^ hash(self.idfa)
    value = (value * 31) ^ hash(self.idfv)
    value = (value * 31) ^ hash(self.openudid)
    value = (value * 31) ^ hash(self.tk)
    value = (value * 31) ^ hash(self.platform)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Rsp:
  """
  Attributes:
   - status
   - message
   - ads
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'status', None, None, ), # 1
    (2, TType.STRING, 'message', None, None, ), # 2
    (3, TType.LIST, 'ads', (TType.STRUCT,(AdItem, AdItem.thrift_spec)), None, ), # 3
  )

  def __init__(self, status=None, message=None, ads=None,):
    self.status = status
    self.message = message
    self.ads = ads

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.status = iprot.readI32()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.message = iprot.readString()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.ads = []
          (_etype108, _size105) = iprot.readListBegin()
          for _i109 in xrange(_size105):
            _elem110 = AdItem()
            _elem110.read(iprot)
            self.ads.append(_elem110)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Rsp')
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I32, 1)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.message is not None:
      oprot.writeFieldBegin('message', TType.STRING, 2)
      oprot.writeString(self.message)
      oprot.writeFieldEnd()
    if self.ads is not None:
      oprot.writeFieldBegin('ads', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.ads))
      for iter111 in self.ads:
        iter111.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.status)
    value = (value * 31) ^ hash(self.message)
    value = (value * 31) ^ hash(self.ads)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
