#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class KV:
  """
  Attributes:
   - key
   - weight
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'key', None, None, ), # 1
    (2, TType.DOUBLE, 'weight', None, None, ), # 2
  )

  def __init__(self, key=None, weight=None,):
    self.key = key
    self.weight = weight

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.key = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.DOUBLE:
          self.weight = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('KV')
    if self.key is not None:
      oprot.writeFieldBegin('key', TType.I64, 1)
      oprot.writeI64(self.key)
      oprot.writeFieldEnd()
    if self.weight is not None:
      oprot.writeFieldBegin('weight', TType.DOUBLE, 2)
      oprot.writeDouble(self.weight)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AD:
  """
  Attributes:
   - creative_id
   - ad_user_id
   - title
   - image_url
   - sponsor_name
   - industry_catagory
   - campaign_id
   - unit_id
   - bid_price
   - cost_type
   - creative_type
   - create_time
   - start_time
   - end_time
   - product_type
   - landing_url
   - ext
   - unit_day_budget
   - camp_day_budget
   - monitor_url
   - area_code
   - device_brand
   - network
   - time_target
   - balance
   - impr_num
   - click_num
   - status
   - unit_day_cost
   - camp_day_cost
   - unit_impr_num
   - unit_click_num
   - camp_impr_num
   - camp_click_num
   - creative_day_impr_num
   - creative_day_click_num
   - download_url
   - sponsor_icon
   - package_info
   - btn_text_key
   - btn_text_value
   - video_resource
   - quantity
   - unit_day_impr_num
   - ad_title_keyword
   - position
   - brush
   - schema_url
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'creative_id', None, None, ), # 1
    (2, TType.I32, 'ad_user_id', None, None, ), # 2
    (3, TType.STRING, 'title', None, None, ), # 3
    (4, TType.STRING, 'image_url', None, None, ), # 4
    (5, TType.STRING, 'sponsor_name', None, None, ), # 5
    (6, TType.I16, 'industry_catagory', None, None, ), # 6
    (7, TType.I32, 'campaign_id', None, None, ), # 7
    (8, TType.I32, 'unit_id', None, None, ), # 8
    (9, TType.I64, 'bid_price', None, None, ), # 9
    (10, TType.I16, 'cost_type', None, None, ), # 10
    (11, TType.I16, 'creative_type', None, None, ), # 11
    (12, TType.I32, 'create_time', None, None, ), # 12
    (13, TType.I32, 'start_time', None, None, ), # 13
    (14, TType.I32, 'end_time', None, None, ), # 14
    (15, TType.I16, 'product_type', None, None, ), # 15
    (16, TType.STRING, 'landing_url', None, None, ), # 16
    (17, TType.STRING, 'ext', None, None, ), # 17
    (18, TType.I64, 'unit_day_budget', None, None, ), # 18
    (19, TType.I64, 'camp_day_budget', None, None, ), # 19
    (20, TType.STRING, 'monitor_url', None, None, ), # 20
    (21, TType.LIST, 'area_code', (TType.STRUCT,(KV, KV.thrift_spec)), None, ), # 21
    (22, TType.LIST, 'device_brand', (TType.STRUCT,(KV, KV.thrift_spec)), None, ), # 22
    (23, TType.LIST, 'network', (TType.STRUCT,(KV, KV.thrift_spec)), None, ), # 23
    (24, TType.LIST, 'time_target', (TType.I64,None), None, ), # 24
    (25, TType.I64, 'balance', None, None, ), # 25
    (26, TType.I32, 'impr_num', None, None, ), # 26
    (27, TType.I32, 'click_num', None, None, ), # 27
    (28, TType.I16, 'status', None, None, ), # 28
    (29, TType.I64, 'unit_day_cost', None, None, ), # 29
    (30, TType.I64, 'camp_day_cost', None, None, ), # 30
    (31, TType.I32, 'unit_impr_num', None, None, ), # 31
    (32, TType.I32, 'unit_click_num', None, None, ), # 32
    (33, TType.I32, 'camp_impr_num', None, None, ), # 33
    (34, TType.I32, 'camp_click_num', None, None, ), # 34
    (35, TType.I32, 'creative_day_impr_num', None, None, ), # 35
    (36, TType.I32, 'creative_day_click_num', None, None, ), # 36
    (37, TType.STRING, 'download_url', None, None, ), # 37
    (38, TType.STRING, 'sponsor_icon', None, None, ), # 38
    (39, TType.STRING, 'package_info', None, None, ), # 39
    (40, TType.I16, 'btn_text_key', None, None, ), # 40
    (41, TType.STRING, 'btn_text_value', None, None, ), # 41
    (42, TType.STRING, 'video_resource', None, None, ), # 42
    (43, TType.I32, 'quantity', None, None, ), # 43
    (44, TType.I32, 'unit_day_impr_num', None, None, ), # 44
    (45, TType.STRING, 'ad_title_keyword', None, None, ), # 45
    (46, TType.I16, 'position', None, None, ), # 46
    (47, TType.STRING, 'brush', None, None, ), # 47
    (48, TType.STRING, 'schema_url', None, None, ), # 48
  )

  def __init__(self, creative_id=None, ad_user_id=None, title=None, image_url=None, sponsor_name=None, industry_catagory=None, campaign_id=None, unit_id=None, bid_price=None, cost_type=None, creative_type=None, create_time=None, start_time=None, end_time=None, product_type=None, landing_url=None, ext=None, unit_day_budget=None, camp_day_budget=None, monitor_url=None, area_code=None, device_brand=None, network=None, time_target=None, balance=None, impr_num=None, click_num=None, status=None, unit_day_cost=None, camp_day_cost=None, unit_impr_num=None, unit_click_num=None, camp_impr_num=None, camp_click_num=None, creative_day_impr_num=None, creative_day_click_num=None, download_url=None, sponsor_icon=None, package_info=None, btn_text_key=None, btn_text_value=None, video_resource=None, quantity=None, unit_day_impr_num=None, ad_title_keyword=None, position=None, brush=None, schema_url=None,):
    self.creative_id = creative_id
    self.ad_user_id = ad_user_id
    self.title = title
    self.image_url = image_url
    self.sponsor_name = sponsor_name
    self.industry_catagory = industry_catagory
    self.campaign_id = campaign_id
    self.unit_id = unit_id
    self.bid_price = bid_price
    self.cost_type = cost_type
    self.creative_type = creative_type
    self.create_time = create_time
    self.start_time = start_time
    self.end_time = end_time
    self.product_type = product_type
    self.landing_url = landing_url
    self.ext = ext
    self.unit_day_budget = unit_day_budget
    self.camp_day_budget = camp_day_budget
    self.monitor_url = monitor_url
    self.area_code = area_code
    self.device_brand = device_brand
    self.network = network
    self.time_target = time_target
    self.balance = balance
    self.impr_num = impr_num
    self.click_num = click_num
    self.status = status
    self.unit_day_cost = unit_day_cost
    self.camp_day_cost = camp_day_cost
    self.unit_impr_num = unit_impr_num
    self.unit_click_num = unit_click_num
    self.camp_impr_num = camp_impr_num
    self.camp_click_num = camp_click_num
    self.creative_day_impr_num = creative_day_impr_num
    self.creative_day_click_num = creative_day_click_num
    self.download_url = download_url
    self.sponsor_icon = sponsor_icon
    self.package_info = package_info
    self.btn_text_key = btn_text_key
    self.btn_text_value = btn_text_value
    self.video_resource = video_resource
    self.quantity = quantity
    self.unit_day_impr_num = unit_day_impr_num
    self.ad_title_keyword = ad_title_keyword
    self.position = position
    self.brush = brush
    self.schema_url = schema_url

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.creative_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.ad_user_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.title = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.image_url = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.sponsor_name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I16:
          self.industry_catagory = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.campaign_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.unit_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I64:
          self.bid_price = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I16:
          self.cost_type = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I16:
          self.creative_type = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.create_time = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I32:
          self.start_time = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I32:
          self.end_time = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.I16:
          self.product_type = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.STRING:
          self.landing_url = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.STRING:
          self.ext = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.I64:
          self.unit_day_budget = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.I64:
          self.camp_day_budget = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.STRING:
          self.monitor_url = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.LIST:
          self.area_code = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = KV()
            _elem5.read(iprot)
            self.area_code.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.LIST:
          self.device_brand = []
          (_etype9, _size6) = iprot.readListBegin()
          for _i10 in xrange(_size6):
            _elem11 = KV()
            _elem11.read(iprot)
            self.device_brand.append(_elem11)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.LIST:
          self.network = []
          (_etype15, _size12) = iprot.readListBegin()
          for _i16 in xrange(_size12):
            _elem17 = KV()
            _elem17.read(iprot)
            self.network.append(_elem17)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 24:
        if ftype == TType.LIST:
          self.time_target = []
          (_etype21, _size18) = iprot.readListBegin()
          for _i22 in xrange(_size18):
            _elem23 = iprot.readI64();
            self.time_target.append(_elem23)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 25:
        if ftype == TType.I64:
          self.balance = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 26:
        if ftype == TType.I32:
          self.impr_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 27:
        if ftype == TType.I32:
          self.click_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 28:
        if ftype == TType.I16:
          self.status = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 29:
        if ftype == TType.I64:
          self.unit_day_cost = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.I64:
          self.camp_day_cost = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 31:
        if ftype == TType.I32:
          self.unit_impr_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 32:
        if ftype == TType.I32:
          self.unit_click_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 33:
        if ftype == TType.I32:
          self.camp_impr_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 34:
        if ftype == TType.I32:
          self.camp_click_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 35:
        if ftype == TType.I32:
          self.creative_day_impr_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 36:
        if ftype == TType.I32:
          self.creative_day_click_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 37:
        if ftype == TType.STRING:
          self.download_url = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 38:
        if ftype == TType.STRING:
          self.sponsor_icon = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 39:
        if ftype == TType.STRING:
          self.package_info = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 40:
        if ftype == TType.I16:
          self.btn_text_key = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 41:
        if ftype == TType.STRING:
          self.btn_text_value = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 42:
        if ftype == TType.STRING:
          self.video_resource = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 43:
        if ftype == TType.I32:
          self.quantity = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 44:
        if ftype == TType.I32:
          self.unit_day_impr_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 45:
        if ftype == TType.STRING:
          self.ad_title_keyword = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 46:
        if ftype == TType.I16:
          self.position = iprot.readI16();
        else:
          iprot.skip(ftype)
      elif fid == 47:
        if ftype == TType.STRING:
          self.brush = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 48:
        if ftype == TType.STRING:
          self.schema_url = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AD')
    if self.creative_id is not None:
      oprot.writeFieldBegin('creative_id', TType.I32, 1)
      oprot.writeI32(self.creative_id)
      oprot.writeFieldEnd()
    if self.ad_user_id is not None:
      oprot.writeFieldBegin('ad_user_id', TType.I32, 2)
      oprot.writeI32(self.ad_user_id)
      oprot.writeFieldEnd()
    if self.title is not None:
      oprot.writeFieldBegin('title', TType.STRING, 3)
      oprot.writeString(self.title)
      oprot.writeFieldEnd()
    if self.image_url is not None:
      oprot.writeFieldBegin('image_url', TType.STRING, 4)
      oprot.writeString(self.image_url)
      oprot.writeFieldEnd()
    if self.sponsor_name is not None:
      oprot.writeFieldBegin('sponsor_name', TType.STRING, 5)
      oprot.writeString(self.sponsor_name)
      oprot.writeFieldEnd()
    if self.industry_catagory is not None:
      oprot.writeFieldBegin('industry_catagory', TType.I16, 6)
      oprot.writeI16(self.industry_catagory)
      oprot.writeFieldEnd()
    if self.campaign_id is not None:
      oprot.writeFieldBegin('campaign_id', TType.I32, 7)
      oprot.writeI32(self.campaign_id)
      oprot.writeFieldEnd()
    if self.unit_id is not None:
      oprot.writeFieldBegin('unit_id', TType.I32, 8)
      oprot.writeI32(self.unit_id)
      oprot.writeFieldEnd()
    if self.bid_price is not None:
      oprot.writeFieldBegin('bid_price', TType.I64, 9)
      oprot.writeI64(self.bid_price)
      oprot.writeFieldEnd()
    if self.cost_type is not None:
      oprot.writeFieldBegin('cost_type', TType.I16, 10)
      oprot.writeI16(self.cost_type)
      oprot.writeFieldEnd()
    if self.creative_type is not None:
      oprot.writeFieldBegin('creative_type', TType.I16, 11)
      oprot.writeI16(self.creative_type)
      oprot.writeFieldEnd()
    if self.create_time is not None:
      oprot.writeFieldBegin('create_time', TType.I32, 12)
      oprot.writeI32(self.create_time)
      oprot.writeFieldEnd()
    if self.start_time is not None:
      oprot.writeFieldBegin('start_time', TType.I32, 13)
      oprot.writeI32(self.start_time)
      oprot.writeFieldEnd()
    if self.end_time is not None:
      oprot.writeFieldBegin('end_time', TType.I32, 14)
      oprot.writeI32(self.end_time)
      oprot.writeFieldEnd()
    if self.product_type is not None:
      oprot.writeFieldBegin('product_type', TType.I16, 15)
      oprot.writeI16(self.product_type)
      oprot.writeFieldEnd()
    if self.landing_url is not None:
      oprot.writeFieldBegin('landing_url', TType.STRING, 16)
      oprot.writeString(self.landing_url)
      oprot.writeFieldEnd()
    if self.ext is not None:
      oprot.writeFieldBegin('ext', TType.STRING, 17)
      oprot.writeString(self.ext)
      oprot.writeFieldEnd()
    if self.unit_day_budget is not None:
      oprot.writeFieldBegin('unit_day_budget', TType.I64, 18)
      oprot.writeI64(self.unit_day_budget)
      oprot.writeFieldEnd()
    if self.camp_day_budget is not None:
      oprot.writeFieldBegin('camp_day_budget', TType.I64, 19)
      oprot.writeI64(self.camp_day_budget)
      oprot.writeFieldEnd()
    if self.monitor_url is not None:
      oprot.writeFieldBegin('monitor_url', TType.STRING, 20)
      oprot.writeString(self.monitor_url)
      oprot.writeFieldEnd()
    if self.area_code is not None:
      oprot.writeFieldBegin('area_code', TType.LIST, 21)
      oprot.writeListBegin(TType.STRUCT, len(self.area_code))
      for iter24 in self.area_code:
        iter24.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.device_brand is not None:
      oprot.writeFieldBegin('device_brand', TType.LIST, 22)
      oprot.writeListBegin(TType.STRUCT, len(self.device_brand))
      for iter25 in self.device_brand:
        iter25.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.network is not None:
      oprot.writeFieldBegin('network', TType.LIST, 23)
      oprot.writeListBegin(TType.STRUCT, len(self.network))
      for iter26 in self.network:
        iter26.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.time_target is not None:
      oprot.writeFieldBegin('time_target', TType.LIST, 24)
      oprot.writeListBegin(TType.I64, len(self.time_target))
      for iter27 in self.time_target:
        oprot.writeI64(iter27)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.balance is not None:
      oprot.writeFieldBegin('balance', TType.I64, 25)
      oprot.writeI64(self.balance)
      oprot.writeFieldEnd()
    if self.impr_num is not None:
      oprot.writeFieldBegin('impr_num', TType.I32, 26)
      oprot.writeI32(self.impr_num)
      oprot.writeFieldEnd()
    if self.click_num is not None:
      oprot.writeFieldBegin('click_num', TType.I32, 27)
      oprot.writeI32(self.click_num)
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.I16, 28)
      oprot.writeI16(self.status)
      oprot.writeFieldEnd()
    if self.unit_day_cost is not None:
      oprot.writeFieldBegin('unit_day_cost', TType.I64, 29)
      oprot.writeI64(self.unit_day_cost)
      oprot.writeFieldEnd()
    if self.camp_day_cost is not None:
      oprot.writeFieldBegin('camp_day_cost', TType.I64, 30)
      oprot.writeI64(self.camp_day_cost)
      oprot.writeFieldEnd()
    if self.unit_impr_num is not None:
      oprot.writeFieldBegin('unit_impr_num', TType.I32, 31)
      oprot.writeI32(self.unit_impr_num)
      oprot.writeFieldEnd()
    if self.unit_click_num is not None:
      oprot.writeFieldBegin('unit_click_num', TType.I32, 32)
      oprot.writeI32(self.unit_click_num)
      oprot.writeFieldEnd()
    if self.camp_impr_num is not None:
      oprot.writeFieldBegin('camp_impr_num', TType.I32, 33)
      oprot.writeI32(self.camp_impr_num)
      oprot.writeFieldEnd()
    if self.camp_click_num is not None:
      oprot.writeFieldBegin('camp_click_num', TType.I32, 34)
      oprot.writeI32(self.camp_click_num)
      oprot.writeFieldEnd()
    if self.creative_day_impr_num is not None:
      oprot.writeFieldBegin('creative_day_impr_num', TType.I32, 35)
      oprot.writeI32(self.creative_day_impr_num)
      oprot.writeFieldEnd()
    if self.creative_day_click_num is not None:
      oprot.writeFieldBegin('creative_day_click_num', TType.I32, 36)
      oprot.writeI32(self.creative_day_click_num)
      oprot.writeFieldEnd()
    if self.download_url is not None:
      oprot.writeFieldBegin('download_url', TType.STRING, 37)
      oprot.writeString(self.download_url)
      oprot.writeFieldEnd()
    if self.sponsor_icon is not None:
      oprot.writeFieldBegin('sponsor_icon', TType.STRING, 38)
      oprot.writeString(self.sponsor_icon)
      oprot.writeFieldEnd()
    if self.package_info is not None:
      oprot.writeFieldBegin('package_info', TType.STRING, 39)
      oprot.writeString(self.package_info)
      oprot.writeFieldEnd()
    if self.btn_text_key is not None:
      oprot.writeFieldBegin('btn_text_key', TType.I16, 40)
      oprot.writeI16(self.btn_text_key)
      oprot.writeFieldEnd()
    if self.btn_text_value is not None:
      oprot.writeFieldBegin('btn_text_value', TType.STRING, 41)
      oprot.writeString(self.btn_text_value)
      oprot.writeFieldEnd()
    if self.video_resource is not None:
      oprot.writeFieldBegin('video_resource', TType.STRING, 42)
      oprot.writeString(self.video_resource)
      oprot.writeFieldEnd()
    if self.quantity is not None:
      oprot.writeFieldBegin('quantity', TType.I32, 43)
      oprot.writeI32(self.quantity)
      oprot.writeFieldEnd()
    if self.unit_day_impr_num is not None:
      oprot.writeFieldBegin('unit_day_impr_num', TType.I32, 44)
      oprot.writeI32(self.unit_day_impr_num)
      oprot.writeFieldEnd()
    if self.ad_title_keyword is not None:
      oprot.writeFieldBegin('ad_title_keyword', TType.STRING, 45)
      oprot.writeString(self.ad_title_keyword)
      oprot.writeFieldEnd()
    if self.position is not None:
      oprot.writeFieldBegin('position', TType.I16, 46)
      oprot.writeI16(self.position)
      oprot.writeFieldEnd()
    if self.brush is not None:
      oprot.writeFieldBegin('brush', TType.STRING, 47)
      oprot.writeString(self.brush)
      oprot.writeFieldEnd()
    if self.schema_url is not None:
      oprot.writeFieldBegin('schema_url', TType.STRING, 48)
      oprot.writeString(self.schema_url)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ADGetReq:
  """
  Attributes:
   - creative_id_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'creative_id_list', (TType.I32,None), None, ), # 1
  )

  def __init__(self, creative_id_list=None,):
    self.creative_id_list = creative_id_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.creative_id_list = []
          (_etype31, _size28) = iprot.readListBegin()
          for _i32 in xrange(_size28):
            _elem33 = iprot.readI32();
            self.creative_id_list.append(_elem33)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ADGetReq')
    if self.creative_id_list is not None:
      oprot.writeFieldBegin('creative_id_list', TType.LIST, 1)
      oprot.writeListBegin(TType.I32, len(self.creative_id_list))
      for iter34 in self.creative_id_list:
        oprot.writeI32(iter34)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ADGetRsp:
  """
  Attributes:
   - ad_list
   - status
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'ad_list', (TType.STRUCT,(AD, AD.thrift_spec)), None, ), # 1
    (2, TType.STRING, 'status', None, None, ), # 2
  )

  def __init__(self, ad_list=None, status=None,):
    self.ad_list = ad_list
    self.status = status

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.ad_list = []
          (_etype38, _size35) = iprot.readListBegin()
          for _i39 in xrange(_size35):
            _elem40 = AD()
            _elem40.read(iprot)
            self.ad_list.append(_elem40)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.status = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ADGetRsp')
    if self.ad_list is not None:
      oprot.writeFieldBegin('ad_list', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.ad_list))
      for iter41 in self.ad_list:
        iter41.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.STRING, 2)
      oprot.writeString(self.status)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ADPutReq:
  """
  Attributes:
   - ad_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'ad_list', (TType.STRUCT,(AD, AD.thrift_spec)), None, ), # 1
  )

  def __init__(self, ad_list=None,):
    self.ad_list = ad_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.ad_list = []
          (_etype45, _size42) = iprot.readListBegin()
          for _i46 in xrange(_size42):
            _elem47 = AD()
            _elem47.read(iprot)
            self.ad_list.append(_elem47)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ADPutReq')
    if self.ad_list is not None:
      oprot.writeFieldBegin('ad_list', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.ad_list))
      for iter48 in self.ad_list:
        iter48.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ADPutRsp:
  """
  Attributes:
   - status
   - count
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'status', None, None, ), # 1
    (2, TType.I32, 'count', None, None, ), # 2
  )

  def __init__(self, status=None, count=None,):
    self.status = status
    self.count = count

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.status = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.count = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ADPutRsp')
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.STRING, 1)
      oprot.writeString(self.status)
      oprot.writeFieldEnd()
    if self.count is not None:
      oprot.writeFieldBegin('count', TType.I32, 2)
      oprot.writeI32(self.count)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Content:
  """
  Attributes:
   - cid
   - c_category
   - c_keyword
   - c_topic
   - c_author_id
   - c_create_time
   - c_duration
   - c_down_num
   - c_digg_num
   - c_bury_num
   - c_play_num
   - c_comment_num
   - c_favorate_num
   - c_share_btn_num
   - c_share_platform_num
   - c_share_ok_num
   - c_crawl_digg_num
   - c_crawl_bury_num
   - c_crawl_play_num
   - c_crawl_comment_num
   - c_crawl_favorate_num
   - c_crawl_share_num
   - c_cover_image
   - c_title_len
   - c_title_reo
   - c_total_impr
   - c_total_playtime
   - c_title_regular
   - c_title_semantic
   - c_cover_content
   - c_cover_resolution
   - c_cover_cont_ads
   - c_cover_vul
   - c_video_watermark
   - c_video_cont_ads
   - c_video_original
   - c_video_exclusive
   - c_video_content_safe
   - c_usertag
   - c_enable
   - c_usertags
   - c_dislike_count
   - c_shoot_type
   - c_recommend_label
   - c_enable_product
   - c_total_show_time
   - c_video_quality
   - c_video_vul
   - c_media_type
   - c_extend_info
   - c_card_type
   - c_pic_num
   - c_article_length
   - c_pic_down_num
   - c_total_view_percent
   - c_feed_play_num
   - c_total_feedplaytime
   - c_rmd_location
   - c_description
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'cid', None, None, ), # 1
    (2, TType.LIST, 'c_category', (TType.STRUCT,(KV, KV.thrift_spec)), None, ), # 2
    (3, TType.LIST, 'c_keyword', (TType.STRUCT,(KV, KV.thrift_spec)), None, ), # 3
    (4, TType.LIST, 'c_topic', (TType.STRUCT,(KV, KV.thrift_spec)), None, ), # 4
    (5, TType.I64, 'c_author_id', None, None, ), # 5
    (6, TType.I32, 'c_create_time', None, None, ), # 6
    (7, TType.I32, 'c_duration', None, None, ), # 7
    (8, TType.I32, 'c_down_num', None, None, ), # 8
    (9, TType.I32, 'c_digg_num', None, None, ), # 9
    (10, TType.I32, 'c_bury_num', None, None, ), # 10
    (11, TType.I32, 'c_play_num', None, None, ), # 11
    (12, TType.I32, 'c_comment_num', None, None, ), # 12
    (13, TType.I32, 'c_favorate_num', None, None, ), # 13
    (14, TType.I32, 'c_share_btn_num', None, None, ), # 14
    (15, TType.I32, 'c_share_platform_num', None, None, ), # 15
    (16, TType.I32, 'c_share_ok_num', None, None, ), # 16
    (17, TType.I32, 'c_crawl_digg_num', None, None, ), # 17
    (18, TType.I32, 'c_crawl_bury_num', None, None, ), # 18
    (19, TType.I32, 'c_crawl_play_num', None, None, ), # 19
    (20, TType.I32, 'c_crawl_comment_num', None, None, ), # 20
    (21, TType.I32, 'c_crawl_favorate_num', None, None, ), # 21
    (22, TType.I32, 'c_crawl_share_num', None, None, ), # 22
    (23, TType.I32, 'c_cover_image', None, None, ), # 23
    (24, TType.I32, 'c_title_len', None, None, ), # 24
    (25, TType.I32, 'c_title_reo', None, None, ), # 25
    (26, TType.I32, 'c_total_impr', None, None, ), # 26
    (27, TType.I32, 'c_total_playtime', None, None, ), # 27
    (28, TType.I32, 'c_title_regular', None, None, ), # 28
    (29, TType.I32, 'c_title_semantic', None, None, ), # 29
    (30, TType.I32, 'c_cover_content', None, None, ), # 30
    (31, TType.I32, 'c_cover_resolution', None, None, ), # 31
    (32, TType.I32, 'c_cover_cont_ads', None, None, ), # 32
    (33, TType.I32, 'c_cover_vul', None, None, ), # 33
    (34, TType.I32, 'c_video_watermark', None, None, ), # 34
    (35, TType.I32, 'c_video_cont_ads', None, None, ), # 35
    (36, TType.I32, 'c_video_original', None, None, ), # 36
    (37, TType.I32, 'c_video_exclusive', None, None, ), # 37
    (38, TType.I32, 'c_video_content_safe', None, None, ), # 38
    (39, TType.I32, 'c_usertag', None, None, ), # 39
    (40, TType.I32, 'c_enable', None, None, ), # 40
    (41, TType.LIST, 'c_usertags', (TType.STRUCT,(KV, KV.thrift_spec)), None, ), # 41
    (42, TType.I32, 'c_dislike_count', None, None, ), # 42
    (43, TType.I32, 'c_shoot_type', None, None, ), # 43
    (44, TType.LIST, 'c_recommend_label', (TType.STRUCT,(KV, KV.thrift_spec)), None, ), # 44
    (45, TType.LIST, 'c_enable_product', (TType.STRUCT,(KV, KV.thrift_spec)), None, ), # 45
    (46, TType.I32, 'c_total_show_time', None, None, ), # 46
    (47, TType.I32, 'c_video_quality', None, None, ), # 47
    (48, TType.I32, 'c_video_vul', None, None, ), # 48
    (49, TType.I32, 'c_media_type', None, None, ), # 49
    (50, TType.MAP, 'c_extend_info', (TType.STRING,None,TType.STRING,None), None, ), # 50
    (51, TType.LIST, 'c_card_type', (TType.STRUCT,(KV, KV.thrift_spec)), None, ), # 51
    (52, TType.I32, 'c_pic_num', None, None, ), # 52
    (53, TType.I32, 'c_article_length', None, None, ), # 53
    (54, TType.I32, 'c_pic_down_num', None, None, ), # 54
    (55, TType.DOUBLE, 'c_total_view_percent', None, None, ), # 55
    (56, TType.I32, 'c_feed_play_num', None, None, ), # 56
    (57, TType.I32, 'c_total_feedplaytime', None, None, ), # 57
    (58, TType.STRING, 'c_rmd_location', None, None, ), # 58
    (59, TType.STRING, 'c_description', None, None, ), # 59
  )

  def __init__(self, cid=None, c_category=None, c_keyword=None, c_topic=None, c_author_id=None, c_create_time=None, c_duration=None, c_down_num=None, c_digg_num=None, c_bury_num=None, c_play_num=None, c_comment_num=None, c_favorate_num=None, c_share_btn_num=None, c_share_platform_num=None, c_share_ok_num=None, c_crawl_digg_num=None, c_crawl_bury_num=None, c_crawl_play_num=None, c_crawl_comment_num=None, c_crawl_favorate_num=None, c_crawl_share_num=None, c_cover_image=None, c_title_len=None, c_title_reo=None, c_total_impr=None, c_total_playtime=None, c_title_regular=None, c_title_semantic=None, c_cover_content=None, c_cover_resolution=None, c_cover_cont_ads=None, c_cover_vul=None, c_video_watermark=None, c_video_cont_ads=None, c_video_original=None, c_video_exclusive=None, c_video_content_safe=None, c_usertag=None, c_enable=None, c_usertags=None, c_dislike_count=None, c_shoot_type=None, c_recommend_label=None, c_enable_product=None, c_total_show_time=None, c_video_quality=None, c_video_vul=None, c_media_type=None, c_extend_info=None, c_card_type=None, c_pic_num=None, c_article_length=None, c_pic_down_num=None, c_total_view_percent=None, c_feed_play_num=None, c_total_feedplaytime=None, c_rmd_location=None, c_description=None,):
    self.cid = cid
    self.c_category = c_category
    self.c_keyword = c_keyword
    self.c_topic = c_topic
    self.c_author_id = c_author_id
    self.c_create_time = c_create_time
    self.c_duration = c_duration
    self.c_down_num = c_down_num
    self.c_digg_num = c_digg_num
    self.c_bury_num = c_bury_num
    self.c_play_num = c_play_num
    self.c_comment_num = c_comment_num
    self.c_favorate_num = c_favorate_num
    self.c_share_btn_num = c_share_btn_num
    self.c_share_platform_num = c_share_platform_num
    self.c_share_ok_num = c_share_ok_num
    self.c_crawl_digg_num = c_crawl_digg_num
    self.c_crawl_bury_num = c_crawl_bury_num
    self.c_crawl_play_num = c_crawl_play_num
    self.c_crawl_comment_num = c_crawl_comment_num
    self.c_crawl_favorate_num = c_crawl_favorate_num
    self.c_crawl_share_num = c_crawl_share_num
    self.c_cover_image = c_cover_image
    self.c_title_len = c_title_len
    self.c_title_reo = c_title_reo
    self.c_total_impr = c_total_impr
    self.c_total_playtime = c_total_playtime
    self.c_title_regular = c_title_regular
    self.c_title_semantic = c_title_semantic
    self.c_cover_content = c_cover_content
    self.c_cover_resolution = c_cover_resolution
    self.c_cover_cont_ads = c_cover_cont_ads
    self.c_cover_vul = c_cover_vul
    self.c_video_watermark = c_video_watermark
    self.c_video_cont_ads = c_video_cont_ads
    self.c_video_original = c_video_original
    self.c_video_exclusive = c_video_exclusive
    self.c_video_content_safe = c_video_content_safe
    self.c_usertag = c_usertag
    self.c_enable = c_enable
    self.c_usertags = c_usertags
    self.c_dislike_count = c_dislike_count
    self.c_shoot_type = c_shoot_type
    self.c_recommend_label = c_recommend_label
    self.c_enable_product = c_enable_product
    self.c_total_show_time = c_total_show_time
    self.c_video_quality = c_video_quality
    self.c_video_vul = c_video_vul
    self.c_media_type = c_media_type
    self.c_extend_info = c_extend_info
    self.c_card_type = c_card_type
    self.c_pic_num = c_pic_num
    self.c_article_length = c_article_length
    self.c_pic_down_num = c_pic_down_num
    self.c_total_view_percent = c_total_view_percent
    self.c_feed_play_num = c_feed_play_num
    self.c_total_feedplaytime = c_total_feedplaytime
    self.c_rmd_location = c_rmd_location
    self.c_description = c_description

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.cid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.c_category = []
          (_etype52, _size49) = iprot.readListBegin()
          for _i53 in xrange(_size49):
            _elem54 = KV()
            _elem54.read(iprot)
            self.c_category.append(_elem54)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.c_keyword = []
          (_etype58, _size55) = iprot.readListBegin()
          for _i59 in xrange(_size55):
            _elem60 = KV()
            _elem60.read(iprot)
            self.c_keyword.append(_elem60)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.c_topic = []
          (_etype64, _size61) = iprot.readListBegin()
          for _i65 in xrange(_size61):
            _elem66 = KV()
            _elem66.read(iprot)
            self.c_topic.append(_elem66)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.c_author_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.c_create_time = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.c_duration = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.c_down_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.c_digg_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.c_bury_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.c_play_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.c_comment_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I32:
          self.c_favorate_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I32:
          self.c_share_btn_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.I32:
          self.c_share_platform_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.I32:
          self.c_share_ok_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.I32:
          self.c_crawl_digg_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.I32:
          self.c_crawl_bury_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.I32:
          self.c_crawl_play_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.I32:
          self.c_crawl_comment_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.I32:
          self.c_crawl_favorate_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.I32:
          self.c_crawl_share_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.I32:
          self.c_cover_image = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 24:
        if ftype == TType.I32:
          self.c_title_len = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 25:
        if ftype == TType.I32:
          self.c_title_reo = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 26:
        if ftype == TType.I32:
          self.c_total_impr = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 27:
        if ftype == TType.I32:
          self.c_total_playtime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 28:
        if ftype == TType.I32:
          self.c_title_regular = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 29:
        if ftype == TType.I32:
          self.c_title_semantic = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.I32:
          self.c_cover_content = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 31:
        if ftype == TType.I32:
          self.c_cover_resolution = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 32:
        if ftype == TType.I32:
          self.c_cover_cont_ads = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 33:
        if ftype == TType.I32:
          self.c_cover_vul = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 34:
        if ftype == TType.I32:
          self.c_video_watermark = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 35:
        if ftype == TType.I32:
          self.c_video_cont_ads = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 36:
        if ftype == TType.I32:
          self.c_video_original = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 37:
        if ftype == TType.I32:
          self.c_video_exclusive = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 38:
        if ftype == TType.I32:
          self.c_video_content_safe = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 39:
        if ftype == TType.I32:
          self.c_usertag = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 40:
        if ftype == TType.I32:
          self.c_enable = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 41:
        if ftype == TType.LIST:
          self.c_usertags = []
          (_etype70, _size67) = iprot.readListBegin()
          for _i71 in xrange(_size67):
            _elem72 = KV()
            _elem72.read(iprot)
            self.c_usertags.append(_elem72)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 42:
        if ftype == TType.I32:
          self.c_dislike_count = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 43:
        if ftype == TType.I32:
          self.c_shoot_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 44:
        if ftype == TType.LIST:
          self.c_recommend_label = []
          (_etype76, _size73) = iprot.readListBegin()
          for _i77 in xrange(_size73):
            _elem78 = KV()
            _elem78.read(iprot)
            self.c_recommend_label.append(_elem78)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 45:
        if ftype == TType.LIST:
          self.c_enable_product = []
          (_etype82, _size79) = iprot.readListBegin()
          for _i83 in xrange(_size79):
            _elem84 = KV()
            _elem84.read(iprot)
            self.c_enable_product.append(_elem84)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 46:
        if ftype == TType.I32:
          self.c_total_show_time = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 47:
        if ftype == TType.I32:
          self.c_video_quality = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 48:
        if ftype == TType.I32:
          self.c_video_vul = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 49:
        if ftype == TType.I32:
          self.c_media_type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 50:
        if ftype == TType.MAP:
          self.c_extend_info = {}
          (_ktype86, _vtype87, _size85 ) = iprot.readMapBegin()
          for _i89 in xrange(_size85):
            _key90 = iprot.readString();
            _val91 = iprot.readString();
            self.c_extend_info[_key90] = _val91
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 51:
        if ftype == TType.LIST:
          self.c_card_type = []
          (_etype95, _size92) = iprot.readListBegin()
          for _i96 in xrange(_size92):
            _elem97 = KV()
            _elem97.read(iprot)
            self.c_card_type.append(_elem97)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 52:
        if ftype == TType.I32:
          self.c_pic_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 53:
        if ftype == TType.I32:
          self.c_article_length = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 54:
        if ftype == TType.I32:
          self.c_pic_down_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 55:
        if ftype == TType.DOUBLE:
          self.c_total_view_percent = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 56:
        if ftype == TType.I32:
          self.c_feed_play_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 57:
        if ftype == TType.I32:
          self.c_total_feedplaytime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 58:
        if ftype == TType.STRING:
          self.c_rmd_location = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 59:
        if ftype == TType.STRING:
          self.c_description = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Content')
    if self.cid is not None:
      oprot.writeFieldBegin('cid', TType.I64, 1)
      oprot.writeI64(self.cid)
      oprot.writeFieldEnd()
    if self.c_category is not None:
      oprot.writeFieldBegin('c_category', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.c_category))
      for iter98 in self.c_category:
        iter98.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.c_keyword is not None:
      oprot.writeFieldBegin('c_keyword', TType.LIST, 3)
      oprot.writeListBegin(TType.STRUCT, len(self.c_keyword))
      for iter99 in self.c_keyword:
        iter99.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.c_topic is not None:
      oprot.writeFieldBegin('c_topic', TType.LIST, 4)
      oprot.writeListBegin(TType.STRUCT, len(self.c_topic))
      for iter100 in self.c_topic:
        iter100.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.c_author_id is not None:
      oprot.writeFieldBegin('c_author_id', TType.I64, 5)
      oprot.writeI64(self.c_author_id)
      oprot.writeFieldEnd()
    if self.c_create_time is not None:
      oprot.writeFieldBegin('c_create_time', TType.I32, 6)
      oprot.writeI32(self.c_create_time)
      oprot.writeFieldEnd()
    if self.c_duration is not None:
      oprot.writeFieldBegin('c_duration', TType.I32, 7)
      oprot.writeI32(self.c_duration)
      oprot.writeFieldEnd()
    if self.c_down_num is not None:
      oprot.writeFieldBegin('c_down_num', TType.I32, 8)
      oprot.writeI32(self.c_down_num)
      oprot.writeFieldEnd()
    if self.c_digg_num is not None:
      oprot.writeFieldBegin('c_digg_num', TType.I32, 9)
      oprot.writeI32(self.c_digg_num)
      oprot.writeFieldEnd()
    if self.c_bury_num is not None:
      oprot.writeFieldBegin('c_bury_num', TType.I32, 10)
      oprot.writeI32(self.c_bury_num)
      oprot.writeFieldEnd()
    if self.c_play_num is not None:
      oprot.writeFieldBegin('c_play_num', TType.I32, 11)
      oprot.writeI32(self.c_play_num)
      oprot.writeFieldEnd()
    if self.c_comment_num is not None:
      oprot.writeFieldBegin('c_comment_num', TType.I32, 12)
      oprot.writeI32(self.c_comment_num)
      oprot.writeFieldEnd()
    if self.c_favorate_num is not None:
      oprot.writeFieldBegin('c_favorate_num', TType.I32, 13)
      oprot.writeI32(self.c_favorate_num)
      oprot.writeFieldEnd()
    if self.c_share_btn_num is not None:
      oprot.writeFieldBegin('c_share_btn_num', TType.I32, 14)
      oprot.writeI32(self.c_share_btn_num)
      oprot.writeFieldEnd()
    if self.c_share_platform_num is not None:
      oprot.writeFieldBegin('c_share_platform_num', TType.I32, 15)
      oprot.writeI32(self.c_share_platform_num)
      oprot.writeFieldEnd()
    if self.c_share_ok_num is not None:
      oprot.writeFieldBegin('c_share_ok_num', TType.I32, 16)
      oprot.writeI32(self.c_share_ok_num)
      oprot.writeFieldEnd()
    if self.c_crawl_digg_num is not None:
      oprot.writeFieldBegin('c_crawl_digg_num', TType.I32, 17)
      oprot.writeI32(self.c_crawl_digg_num)
      oprot.writeFieldEnd()
    if self.c_crawl_bury_num is not None:
      oprot.writeFieldBegin('c_crawl_bury_num', TType.I32, 18)
      oprot.writeI32(self.c_crawl_bury_num)
      oprot.writeFieldEnd()
    if self.c_crawl_play_num is not None:
      oprot.writeFieldBegin('c_crawl_play_num', TType.I32, 19)
      oprot.writeI32(self.c_crawl_play_num)
      oprot.writeFieldEnd()
    if self.c_crawl_comment_num is not None:
      oprot.writeFieldBegin('c_crawl_comment_num', TType.I32, 20)
      oprot.writeI32(self.c_crawl_comment_num)
      oprot.writeFieldEnd()
    if self.c_crawl_favorate_num is not None:
      oprot.writeFieldBegin('c_crawl_favorate_num', TType.I32, 21)
      oprot.writeI32(self.c_crawl_favorate_num)
      oprot.writeFieldEnd()
    if self.c_crawl_share_num is not None:
      oprot.writeFieldBegin('c_crawl_share_num', TType.I32, 22)
      oprot.writeI32(self.c_crawl_share_num)
      oprot.writeFieldEnd()
    if self.c_cover_image is not None:
      oprot.writeFieldBegin('c_cover_image', TType.I32, 23)
      oprot.writeI32(self.c_cover_image)
      oprot.writeFieldEnd()
    if self.c_title_len is not None:
      oprot.writeFieldBegin('c_title_len', TType.I32, 24)
      oprot.writeI32(self.c_title_len)
      oprot.writeFieldEnd()
    if self.c_title_reo is not None:
      oprot.writeFieldBegin('c_title_reo', TType.I32, 25)
      oprot.writeI32(self.c_title_reo)
      oprot.writeFieldEnd()
    if self.c_total_impr is not None:
      oprot.writeFieldBegin('c_total_impr', TType.I32, 26)
      oprot.writeI32(self.c_total_impr)
      oprot.writeFieldEnd()
    if self.c_total_playtime is not None:
      oprot.writeFieldBegin('c_total_playtime', TType.I32, 27)
      oprot.writeI32(self.c_total_playtime)
      oprot.writeFieldEnd()
    if self.c_title_regular is not None:
      oprot.writeFieldBegin('c_title_regular', TType.I32, 28)
      oprot.writeI32(self.c_title_regular)
      oprot.writeFieldEnd()
    if self.c_title_semantic is not None:
      oprot.writeFieldBegin('c_title_semantic', TType.I32, 29)
      oprot.writeI32(self.c_title_semantic)
      oprot.writeFieldEnd()
    if self.c_cover_content is not None:
      oprot.writeFieldBegin('c_cover_content', TType.I32, 30)
      oprot.writeI32(self.c_cover_content)
      oprot.writeFieldEnd()
    if self.c_cover_resolution is not None:
      oprot.writeFieldBegin('c_cover_resolution', TType.I32, 31)
      oprot.writeI32(self.c_cover_resolution)
      oprot.writeFieldEnd()
    if self.c_cover_cont_ads is not None:
      oprot.writeFieldBegin('c_cover_cont_ads', TType.I32, 32)
      oprot.writeI32(self.c_cover_cont_ads)
      oprot.writeFieldEnd()
    if self.c_cover_vul is not None:
      oprot.writeFieldBegin('c_cover_vul', TType.I32, 33)
      oprot.writeI32(self.c_cover_vul)
      oprot.writeFieldEnd()
    if self.c_video_watermark is not None:
      oprot.writeFieldBegin('c_video_watermark', TType.I32, 34)
      oprot.writeI32(self.c_video_watermark)
      oprot.writeFieldEnd()
    if self.c_video_cont_ads is not None:
      oprot.writeFieldBegin('c_video_cont_ads', TType.I32, 35)
      oprot.writeI32(self.c_video_cont_ads)
      oprot.writeFieldEnd()
    if self.c_video_original is not None:
      oprot.writeFieldBegin('c_video_original', TType.I32, 36)
      oprot.writeI32(self.c_video_original)
      oprot.writeFieldEnd()
    if self.c_video_exclusive is not None:
      oprot.writeFieldBegin('c_video_exclusive', TType.I32, 37)
      oprot.writeI32(self.c_video_exclusive)
      oprot.writeFieldEnd()
    if self.c_video_content_safe is not None:
      oprot.writeFieldBegin('c_video_content_safe', TType.I32, 38)
      oprot.writeI32(self.c_video_content_safe)
      oprot.writeFieldEnd()
    if self.c_usertag is not None:
      oprot.writeFieldBegin('c_usertag', TType.I32, 39)
      oprot.writeI32(self.c_usertag)
      oprot.writeFieldEnd()
    if self.c_enable is not None:
      oprot.writeFieldBegin('c_enable', TType.I32, 40)
      oprot.writeI32(self.c_enable)
      oprot.writeFieldEnd()
    if self.c_usertags is not None:
      oprot.writeFieldBegin('c_usertags', TType.LIST, 41)
      oprot.writeListBegin(TType.STRUCT, len(self.c_usertags))
      for iter101 in self.c_usertags:
        iter101.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.c_dislike_count is not None:
      oprot.writeFieldBegin('c_dislike_count', TType.I32, 42)
      oprot.writeI32(self.c_dislike_count)
      oprot.writeFieldEnd()
    if self.c_shoot_type is not None:
      oprot.writeFieldBegin('c_shoot_type', TType.I32, 43)
      oprot.writeI32(self.c_shoot_type)
      oprot.writeFieldEnd()
    if self.c_recommend_label is not None:
      oprot.writeFieldBegin('c_recommend_label', TType.LIST, 44)
      oprot.writeListBegin(TType.STRUCT, len(self.c_recommend_label))
      for iter102 in self.c_recommend_label:
        iter102.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.c_enable_product is not None:
      oprot.writeFieldBegin('c_enable_product', TType.LIST, 45)
      oprot.writeListBegin(TType.STRUCT, len(self.c_enable_product))
      for iter103 in self.c_enable_product:
        iter103.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.c_total_show_time is not None:
      oprot.writeFieldBegin('c_total_show_time', TType.I32, 46)
      oprot.writeI32(self.c_total_show_time)
      oprot.writeFieldEnd()
    if self.c_video_quality is not None:
      oprot.writeFieldBegin('c_video_quality', TType.I32, 47)
      oprot.writeI32(self.c_video_quality)
      oprot.writeFieldEnd()
    if self.c_video_vul is not None:
      oprot.writeFieldBegin('c_video_vul', TType.I32, 48)
      oprot.writeI32(self.c_video_vul)
      oprot.writeFieldEnd()
    if self.c_media_type is not None:
      oprot.writeFieldBegin('c_media_type', TType.I32, 49)
      oprot.writeI32(self.c_media_type)
      oprot.writeFieldEnd()
    if self.c_extend_info is not None:
      oprot.writeFieldBegin('c_extend_info', TType.MAP, 50)
      oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.c_extend_info))
      for kiter104,viter105 in self.c_extend_info.items():
        oprot.writeString(kiter104)
        oprot.writeString(viter105)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.c_card_type is not None:
      oprot.writeFieldBegin('c_card_type', TType.LIST, 51)
      oprot.writeListBegin(TType.STRUCT, len(self.c_card_type))
      for iter106 in self.c_card_type:
        iter106.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.c_pic_num is not None:
      oprot.writeFieldBegin('c_pic_num', TType.I32, 52)
      oprot.writeI32(self.c_pic_num)
      oprot.writeFieldEnd()
    if self.c_article_length is not None:
      oprot.writeFieldBegin('c_article_length', TType.I32, 53)
      oprot.writeI32(self.c_article_length)
      oprot.writeFieldEnd()
    if self.c_pic_down_num is not None:
      oprot.writeFieldBegin('c_pic_down_num', TType.I32, 54)
      oprot.writeI32(self.c_pic_down_num)
      oprot.writeFieldEnd()
    if self.c_total_view_percent is not None:
      oprot.writeFieldBegin('c_total_view_percent', TType.DOUBLE, 55)
      oprot.writeDouble(self.c_total_view_percent)
      oprot.writeFieldEnd()
    if self.c_feed_play_num is not None:
      oprot.writeFieldBegin('c_feed_play_num', TType.I32, 56)
      oprot.writeI32(self.c_feed_play_num)
      oprot.writeFieldEnd()
    if self.c_total_feedplaytime is not None:
      oprot.writeFieldBegin('c_total_feedplaytime', TType.I32, 57)
      oprot.writeI32(self.c_total_feedplaytime)
      oprot.writeFieldEnd()
    if self.c_rmd_location is not None:
      oprot.writeFieldBegin('c_rmd_location', TType.STRING, 58)
      oprot.writeString(self.c_rmd_location)
      oprot.writeFieldEnd()
    if self.c_description is not None:
      oprot.writeFieldBegin('c_description', TType.STRING, 59)
      oprot.writeString(self.c_description)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class User:
  """
  Attributes:
   - uid
   - u_age
   - u_gender
   - u_area
   - u_keyword
   - u_follow
   - u_video_topic
   - u_cluster
   - u_category
   - u_search_keyword
   - u_reg
   - u_installed_apps
   - u_dislike_authors
   - u_dislike_keywords
   - u_apps_category
   - u_model_price
   - u_dislike_category
   - u_redpacket
   - u_l_keyword
   - u_l_video_topic
   - u_l_category
   - u_redpacket_map
   - u_device_platform
   - u_device_brand
   - u_active_time
   - u_area_id
   - u_app_id
   - u_first_catg
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'uid', None, None, ), # 1
    (2, TType.I32, 'u_age', None, None, ), # 2
    (3, TType.I32, 'u_gender', None, None, ), # 3
    (4, TType.I32, 'u_area', None, None, ), # 4
    (5, TType.LIST, 'u_keyword', (TType.STRUCT,(KV, KV.thrift_spec)), None, ), # 5
    (6, TType.LIST, 'u_follow', (TType.STRUCT,(KV, KV.thrift_spec)), None, ), # 6
    (7, TType.LIST, 'u_video_topic', (TType.STRUCT,(KV, KV.thrift_spec)), None, ), # 7
    (8, TType.LIST, 'u_cluster', (TType.STRUCT,(KV, KV.thrift_spec)), None, ), # 8
    (9, TType.LIST, 'u_category', (TType.STRUCT,(KV, KV.thrift_spec)), None, ), # 9
    (10, TType.LIST, 'u_search_keyword', (TType.STRUCT,(KV, KV.thrift_spec)), None, ), # 10
    (11, TType.I32, 'u_reg', None, None, ), # 11
    (12, TType.LIST, 'u_installed_apps', (TType.STRUCT,(KV, KV.thrift_spec)), None, ), # 12
    (13, TType.LIST, 'u_dislike_authors', (TType.STRUCT,(KV, KV.thrift_spec)), None, ), # 13
    (14, TType.LIST, 'u_dislike_keywords', (TType.STRUCT,(KV, KV.thrift_spec)), None, ), # 14
    (15, TType.LIST, 'u_apps_category', (TType.STRUCT,(KV, KV.thrift_spec)), None, ), # 15
    (16, TType.I32, 'u_model_price', None, None, ), # 16
    (17, TType.LIST, 'u_dislike_category', (TType.STRUCT,(KV, KV.thrift_spec)), None, ), # 17
    (18, TType.I32, 'u_redpacket', None, None, ), # 18
    (19, TType.LIST, 'u_l_keyword', (TType.STRUCT,(KV, KV.thrift_spec)), None, ), # 19
    (20, TType.LIST, 'u_l_video_topic', (TType.STRUCT,(KV, KV.thrift_spec)), None, ), # 20
    (21, TType.LIST, 'u_l_category', (TType.STRUCT,(KV, KV.thrift_spec)), None, ), # 21
    (22, TType.MAP, 'u_redpacket_map', (TType.I32,None,TType.I32,None), None, ), # 22
    (23, TType.STRING, 'u_device_platform', None, None, ), # 23
    (24, TType.STRING, 'u_device_brand', None, None, ), # 24
    (25, TType.LIST, 'u_active_time', (TType.STRUCT,(KV, KV.thrift_spec)), None, ), # 25
    (26, TType.I32, 'u_area_id', None, None, ), # 26
    (27, TType.I32, 'u_app_id', None, None, ), # 27
    (28, TType.LIST, 'u_first_catg', (TType.STRUCT,(KV, KV.thrift_spec)), None, ), # 28
  )

  def __init__(self, uid=None, u_age=None, u_gender=None, u_area=None, u_keyword=None, u_follow=None, u_video_topic=None, u_cluster=None, u_category=None, u_search_keyword=None, u_reg=None, u_installed_apps=None, u_dislike_authors=None, u_dislike_keywords=None, u_apps_category=None, u_model_price=None, u_dislike_category=None, u_redpacket=None, u_l_keyword=None, u_l_video_topic=None, u_l_category=None, u_redpacket_map=None, u_device_platform=None, u_device_brand=None, u_active_time=None, u_area_id=None, u_app_id=None, u_first_catg=None,):
    self.uid = uid
    self.u_age = u_age
    self.u_gender = u_gender
    self.u_area = u_area
    self.u_keyword = u_keyword
    self.u_follow = u_follow
    self.u_video_topic = u_video_topic
    self.u_cluster = u_cluster
    self.u_category = u_category
    self.u_search_keyword = u_search_keyword
    self.u_reg = u_reg
    self.u_installed_apps = u_installed_apps
    self.u_dislike_authors = u_dislike_authors
    self.u_dislike_keywords = u_dislike_keywords
    self.u_apps_category = u_apps_category
    self.u_model_price = u_model_price
    self.u_dislike_category = u_dislike_category
    self.u_redpacket = u_redpacket
    self.u_l_keyword = u_l_keyword
    self.u_l_video_topic = u_l_video_topic
    self.u_l_category = u_l_category
    self.u_redpacket_map = u_redpacket_map
    self.u_device_platform = u_device_platform
    self.u_device_brand = u_device_brand
    self.u_active_time = u_active_time
    self.u_area_id = u_area_id
    self.u_app_id = u_app_id
    self.u_first_catg = u_first_catg

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.uid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.u_age = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.u_gender = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.u_area = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.u_keyword = []
          (_etype110, _size107) = iprot.readListBegin()
          for _i111 in xrange(_size107):
            _elem112 = KV()
            _elem112.read(iprot)
            self.u_keyword.append(_elem112)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.u_follow = []
          (_etype116, _size113) = iprot.readListBegin()
          for _i117 in xrange(_size113):
            _elem118 = KV()
            _elem118.read(iprot)
            self.u_follow.append(_elem118)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.u_video_topic = []
          (_etype122, _size119) = iprot.readListBegin()
          for _i123 in xrange(_size119):
            _elem124 = KV()
            _elem124.read(iprot)
            self.u_video_topic.append(_elem124)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.LIST:
          self.u_cluster = []
          (_etype128, _size125) = iprot.readListBegin()
          for _i129 in xrange(_size125):
            _elem130 = KV()
            _elem130.read(iprot)
            self.u_cluster.append(_elem130)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.LIST:
          self.u_category = []
          (_etype134, _size131) = iprot.readListBegin()
          for _i135 in xrange(_size131):
            _elem136 = KV()
            _elem136.read(iprot)
            self.u_category.append(_elem136)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.LIST:
          self.u_search_keyword = []
          (_etype140, _size137) = iprot.readListBegin()
          for _i141 in xrange(_size137):
            _elem142 = KV()
            _elem142.read(iprot)
            self.u_search_keyword.append(_elem142)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.u_reg = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.LIST:
          self.u_installed_apps = []
          (_etype146, _size143) = iprot.readListBegin()
          for _i147 in xrange(_size143):
            _elem148 = KV()
            _elem148.read(iprot)
            self.u_installed_apps.append(_elem148)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.LIST:
          self.u_dislike_authors = []
          (_etype152, _size149) = iprot.readListBegin()
          for _i153 in xrange(_size149):
            _elem154 = KV()
            _elem154.read(iprot)
            self.u_dislike_authors.append(_elem154)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.LIST:
          self.u_dislike_keywords = []
          (_etype158, _size155) = iprot.readListBegin()
          for _i159 in xrange(_size155):
            _elem160 = KV()
            _elem160.read(iprot)
            self.u_dislike_keywords.append(_elem160)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.LIST:
          self.u_apps_category = []
          (_etype164, _size161) = iprot.readListBegin()
          for _i165 in xrange(_size161):
            _elem166 = KV()
            _elem166.read(iprot)
            self.u_apps_category.append(_elem166)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.I32:
          self.u_model_price = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 17:
        if ftype == TType.LIST:
          self.u_dislike_category = []
          (_etype170, _size167) = iprot.readListBegin()
          for _i171 in xrange(_size167):
            _elem172 = KV()
            _elem172.read(iprot)
            self.u_dislike_category.append(_elem172)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 18:
        if ftype == TType.I32:
          self.u_redpacket = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 19:
        if ftype == TType.LIST:
          self.u_l_keyword = []
          (_etype176, _size173) = iprot.readListBegin()
          for _i177 in xrange(_size173):
            _elem178 = KV()
            _elem178.read(iprot)
            self.u_l_keyword.append(_elem178)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.LIST:
          self.u_l_video_topic = []
          (_etype182, _size179) = iprot.readListBegin()
          for _i183 in xrange(_size179):
            _elem184 = KV()
            _elem184.read(iprot)
            self.u_l_video_topic.append(_elem184)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 21:
        if ftype == TType.LIST:
          self.u_l_category = []
          (_etype188, _size185) = iprot.readListBegin()
          for _i189 in xrange(_size185):
            _elem190 = KV()
            _elem190.read(iprot)
            self.u_l_category.append(_elem190)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 22:
        if ftype == TType.MAP:
          self.u_redpacket_map = {}
          (_ktype192, _vtype193, _size191 ) = iprot.readMapBegin()
          for _i195 in xrange(_size191):
            _key196 = iprot.readI32();
            _val197 = iprot.readI32();
            self.u_redpacket_map[_key196] = _val197
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 23:
        if ftype == TType.STRING:
          self.u_device_platform = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 24:
        if ftype == TType.STRING:
          self.u_device_brand = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 25:
        if ftype == TType.LIST:
          self.u_active_time = []
          (_etype201, _size198) = iprot.readListBegin()
          for _i202 in xrange(_size198):
            _elem203 = KV()
            _elem203.read(iprot)
            self.u_active_time.append(_elem203)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 26:
        if ftype == TType.I32:
          self.u_area_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 27:
        if ftype == TType.I32:
          self.u_app_id = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 28:
        if ftype == TType.LIST:
          self.u_first_catg = []
          (_etype207, _size204) = iprot.readListBegin()
          for _i208 in xrange(_size204):
            _elem209 = KV()
            _elem209.read(iprot)
            self.u_first_catg.append(_elem209)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('User')
    if self.uid is not None:
      oprot.writeFieldBegin('uid', TType.STRING, 1)
      oprot.writeString(self.uid)
      oprot.writeFieldEnd()
    if self.u_age is not None:
      oprot.writeFieldBegin('u_age', TType.I32, 2)
      oprot.writeI32(self.u_age)
      oprot.writeFieldEnd()
    if self.u_gender is not None:
      oprot.writeFieldBegin('u_gender', TType.I32, 3)
      oprot.writeI32(self.u_gender)
      oprot.writeFieldEnd()
    if self.u_area is not None:
      oprot.writeFieldBegin('u_area', TType.I32, 4)
      oprot.writeI32(self.u_area)
      oprot.writeFieldEnd()
    if self.u_keyword is not None:
      oprot.writeFieldBegin('u_keyword', TType.LIST, 5)
      oprot.writeListBegin(TType.STRUCT, len(self.u_keyword))
      for iter210 in self.u_keyword:
        iter210.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.u_follow is not None:
      oprot.writeFieldBegin('u_follow', TType.LIST, 6)
      oprot.writeListBegin(TType.STRUCT, len(self.u_follow))
      for iter211 in self.u_follow:
        iter211.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.u_video_topic is not None:
      oprot.writeFieldBegin('u_video_topic', TType.LIST, 7)
      oprot.writeListBegin(TType.STRUCT, len(self.u_video_topic))
      for iter212 in self.u_video_topic:
        iter212.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.u_cluster is not None:
      oprot.writeFieldBegin('u_cluster', TType.LIST, 8)
      oprot.writeListBegin(TType.STRUCT, len(self.u_cluster))
      for iter213 in self.u_cluster:
        iter213.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.u_category is not None:
      oprot.writeFieldBegin('u_category', TType.LIST, 9)
      oprot.writeListBegin(TType.STRUCT, len(self.u_category))
      for iter214 in self.u_category:
        iter214.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.u_search_keyword is not None:
      oprot.writeFieldBegin('u_search_keyword', TType.LIST, 10)
      oprot.writeListBegin(TType.STRUCT, len(self.u_search_keyword))
      for iter215 in self.u_search_keyword:
        iter215.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.u_reg is not None:
      oprot.writeFieldBegin('u_reg', TType.I32, 11)
      oprot.writeI32(self.u_reg)
      oprot.writeFieldEnd()
    if self.u_installed_apps is not None:
      oprot.writeFieldBegin('u_installed_apps', TType.LIST, 12)
      oprot.writeListBegin(TType.STRUCT, len(self.u_installed_apps))
      for iter216 in self.u_installed_apps:
        iter216.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.u_dislike_authors is not None:
      oprot.writeFieldBegin('u_dislike_authors', TType.LIST, 13)
      oprot.writeListBegin(TType.STRUCT, len(self.u_dislike_authors))
      for iter217 in self.u_dislike_authors:
        iter217.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.u_dislike_keywords is not None:
      oprot.writeFieldBegin('u_dislike_keywords', TType.LIST, 14)
      oprot.writeListBegin(TType.STRUCT, len(self.u_dislike_keywords))
      for iter218 in self.u_dislike_keywords:
        iter218.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.u_apps_category is not None:
      oprot.writeFieldBegin('u_apps_category', TType.LIST, 15)
      oprot.writeListBegin(TType.STRUCT, len(self.u_apps_category))
      for iter219 in self.u_apps_category:
        iter219.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.u_model_price is not None:
      oprot.writeFieldBegin('u_model_price', TType.I32, 16)
      oprot.writeI32(self.u_model_price)
      oprot.writeFieldEnd()
    if self.u_dislike_category is not None:
      oprot.writeFieldBegin('u_dislike_category', TType.LIST, 17)
      oprot.writeListBegin(TType.STRUCT, len(self.u_dislike_category))
      for iter220 in self.u_dislike_category:
        iter220.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.u_redpacket is not None:
      oprot.writeFieldBegin('u_redpacket', TType.I32, 18)
      oprot.writeI32(self.u_redpacket)
      oprot.writeFieldEnd()
    if self.u_l_keyword is not None:
      oprot.writeFieldBegin('u_l_keyword', TType.LIST, 19)
      oprot.writeListBegin(TType.STRUCT, len(self.u_l_keyword))
      for iter221 in self.u_l_keyword:
        iter221.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.u_l_video_topic is not None:
      oprot.writeFieldBegin('u_l_video_topic', TType.LIST, 20)
      oprot.writeListBegin(TType.STRUCT, len(self.u_l_video_topic))
      for iter222 in self.u_l_video_topic:
        iter222.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.u_l_category is not None:
      oprot.writeFieldBegin('u_l_category', TType.LIST, 21)
      oprot.writeListBegin(TType.STRUCT, len(self.u_l_category))
      for iter223 in self.u_l_category:
        iter223.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.u_redpacket_map is not None:
      oprot.writeFieldBegin('u_redpacket_map', TType.MAP, 22)
      oprot.writeMapBegin(TType.I32, TType.I32, len(self.u_redpacket_map))
      for kiter224,viter225 in self.u_redpacket_map.items():
        oprot.writeI32(kiter224)
        oprot.writeI32(viter225)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.u_device_platform is not None:
      oprot.writeFieldBegin('u_device_platform', TType.STRING, 23)
      oprot.writeString(self.u_device_platform)
      oprot.writeFieldEnd()
    if self.u_device_brand is not None:
      oprot.writeFieldBegin('u_device_brand', TType.STRING, 24)
      oprot.writeString(self.u_device_brand)
      oprot.writeFieldEnd()
    if self.u_active_time is not None:
      oprot.writeFieldBegin('u_active_time', TType.LIST, 25)
      oprot.writeListBegin(TType.STRUCT, len(self.u_active_time))
      for iter226 in self.u_active_time:
        iter226.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.u_area_id is not None:
      oprot.writeFieldBegin('u_area_id', TType.I32, 26)
      oprot.writeI32(self.u_area_id)
      oprot.writeFieldEnd()
    if self.u_app_id is not None:
      oprot.writeFieldBegin('u_app_id', TType.I32, 27)
      oprot.writeI32(self.u_app_id)
      oprot.writeFieldEnd()
    if self.u_first_catg is not None:
      oprot.writeFieldBegin('u_first_catg', TType.LIST, 28)
      oprot.writeListBegin(TType.STRUCT, len(self.u_first_catg))
      for iter227 in self.u_first_catg:
        iter227.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Author:
  """
  Attributes:
   - aid
   - a_level
   - a_fans
   - a_category
   - a_video_num
   - a_video_play_num
   - a_video_total_impr
   - a_video_total_playtime
   - a_video_fans_play_num
   - a_video_fans_impr_num
   - a_video_comment_num
   - a_video_digg_num
   - a_video_share_num
   - a_star
   - a_rec_hold
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'aid', None, None, ), # 1
    (2, TType.I32, 'a_level', None, None, ), # 2
    (3, TType.I32, 'a_fans', None, None, ), # 3
    (4, TType.I32, 'a_category', None, None, ), # 4
    (5, TType.I32, 'a_video_num', None, None, ), # 5
    (6, TType.I32, 'a_video_play_num', None, None, ), # 6
    (7, TType.I32, 'a_video_total_impr', None, None, ), # 7
    (8, TType.I32, 'a_video_total_playtime', None, None, ), # 8
    (9, TType.I32, 'a_video_fans_play_num', None, None, ), # 9
    (10, TType.I32, 'a_video_fans_impr_num', None, None, ), # 10
    (11, TType.I32, 'a_video_comment_num', None, None, ), # 11
    (12, TType.I32, 'a_video_digg_num', None, None, ), # 12
    (13, TType.I32, 'a_video_share_num', None, None, ), # 13
    (14, TType.I32, 'a_star', None, None, ), # 14
    (15, TType.I32, 'a_rec_hold', None, None, ), # 15
  )

  def __init__(self, aid=None, a_level=None, a_fans=None, a_category=None, a_video_num=None, a_video_play_num=None, a_video_total_impr=None, a_video_total_playtime=None, a_video_fans_play_num=None, a_video_fans_impr_num=None, a_video_comment_num=None, a_video_digg_num=None, a_video_share_num=None, a_star=None, a_rec_hold=None,):
    self.aid = aid
    self.a_level = a_level
    self.a_fans = a_fans
    self.a_category = a_category
    self.a_video_num = a_video_num
    self.a_video_play_num = a_video_play_num
    self.a_video_total_impr = a_video_total_impr
    self.a_video_total_playtime = a_video_total_playtime
    self.a_video_fans_play_num = a_video_fans_play_num
    self.a_video_fans_impr_num = a_video_fans_impr_num
    self.a_video_comment_num = a_video_comment_num
    self.a_video_digg_num = a_video_digg_num
    self.a_video_share_num = a_video_share_num
    self.a_star = a_star
    self.a_rec_hold = a_rec_hold

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.aid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.a_level = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.a_fans = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.a_category = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I32:
          self.a_video_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.a_video_play_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.a_video_total_impr = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I32:
          self.a_video_total_playtime = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.a_video_fans_play_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I32:
          self.a_video_fans_impr_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.I32:
          self.a_video_comment_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.I32:
          self.a_video_digg_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.I32:
          self.a_video_share_num = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.I32:
          self.a_star = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.I32:
          self.a_rec_hold = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Author')
    if self.aid is not None:
      oprot.writeFieldBegin('aid', TType.I64, 1)
      oprot.writeI64(self.aid)
      oprot.writeFieldEnd()
    if self.a_level is not None:
      oprot.writeFieldBegin('a_level', TType.I32, 2)
      oprot.writeI32(self.a_level)
      oprot.writeFieldEnd()
    if self.a_fans is not None:
      oprot.writeFieldBegin('a_fans', TType.I32, 3)
      oprot.writeI32(self.a_fans)
      oprot.writeFieldEnd()
    if self.a_category is not None:
      oprot.writeFieldBegin('a_category', TType.I32, 4)
      oprot.writeI32(self.a_category)
      oprot.writeFieldEnd()
    if self.a_video_num is not None:
      oprot.writeFieldBegin('a_video_num', TType.I32, 5)
      oprot.writeI32(self.a_video_num)
      oprot.writeFieldEnd()
    if self.a_video_play_num is not None:
      oprot.writeFieldBegin('a_video_play_num', TType.I32, 6)
      oprot.writeI32(self.a_video_play_num)
      oprot.writeFieldEnd()
    if self.a_video_total_impr is not None:
      oprot.writeFieldBegin('a_video_total_impr', TType.I32, 7)
      oprot.writeI32(self.a_video_total_impr)
      oprot.writeFieldEnd()
    if self.a_video_total_playtime is not None:
      oprot.writeFieldBegin('a_video_total_playtime', TType.I32, 8)
      oprot.writeI32(self.a_video_total_playtime)
      oprot.writeFieldEnd()
    if self.a_video_fans_play_num is not None:
      oprot.writeFieldBegin('a_video_fans_play_num', TType.I32, 9)
      oprot.writeI32(self.a_video_fans_play_num)
      oprot.writeFieldEnd()
    if self.a_video_fans_impr_num is not None:
      oprot.writeFieldBegin('a_video_fans_impr_num', TType.I32, 10)
      oprot.writeI32(self.a_video_fans_impr_num)
      oprot.writeFieldEnd()
    if self.a_video_comment_num is not None:
      oprot.writeFieldBegin('a_video_comment_num', TType.I32, 11)
      oprot.writeI32(self.a_video_comment_num)
      oprot.writeFieldEnd()
    if self.a_video_digg_num is not None:
      oprot.writeFieldBegin('a_video_digg_num', TType.I32, 12)
      oprot.writeI32(self.a_video_digg_num)
      oprot.writeFieldEnd()
    if self.a_video_share_num is not None:
      oprot.writeFieldBegin('a_video_share_num', TType.I32, 13)
      oprot.writeI32(self.a_video_share_num)
      oprot.writeFieldEnd()
    if self.a_star is not None:
      oprot.writeFieldBegin('a_star', TType.I32, 14)
      oprot.writeI32(self.a_star)
      oprot.writeFieldEnd()
    if self.a_rec_hold is not None:
      oprot.writeFieldBegin('a_rec_hold', TType.I32, 15)
      oprot.writeI32(self.a_rec_hold)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CidAuthor:
  """
  Attributes:
   - cid
   - author
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'cid', None, None, ), # 1
    (2, TType.STRUCT, 'author', (Author, Author.thrift_spec), None, ), # 2
  )

  def __init__(self, cid=None, author=None,):
    self.cid = cid
    self.author = author

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.cid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.author = Author()
          self.author.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CidAuthor')
    if self.cid is not None:
      oprot.writeFieldBegin('cid', TType.I64, 1)
      oprot.writeI64(self.cid)
      oprot.writeFieldEnd()
    if self.author is not None:
      oprot.writeFieldBegin('author', TType.STRUCT, 2)
      self.author.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ContentProfileGetReq:
  """
  Attributes:
   - cid_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'cid_list', (TType.I64,None), None, ), # 1
  )

  def __init__(self, cid_list=None,):
    self.cid_list = cid_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.cid_list = []
          (_etype231, _size228) = iprot.readListBegin()
          for _i232 in xrange(_size228):
            _elem233 = iprot.readI64();
            self.cid_list.append(_elem233)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ContentProfileGetReq')
    if self.cid_list is not None:
      oprot.writeFieldBegin('cid_list', TType.LIST, 1)
      oprot.writeListBegin(TType.I64, len(self.cid_list))
      for iter234 in self.cid_list:
        oprot.writeI64(iter234)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ContentProfileGetRsp:
  """
  Attributes:
   - content_list
   - status
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'content_list', (TType.STRUCT,(Content, Content.thrift_spec)), None, ), # 1
    (2, TType.STRING, 'status', None, None, ), # 2
  )

  def __init__(self, content_list=None, status=None,):
    self.content_list = content_list
    self.status = status

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.content_list = []
          (_etype238, _size235) = iprot.readListBegin()
          for _i239 in xrange(_size235):
            _elem240 = Content()
            _elem240.read(iprot)
            self.content_list.append(_elem240)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.status = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ContentProfileGetRsp')
    if self.content_list is not None:
      oprot.writeFieldBegin('content_list', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.content_list))
      for iter241 in self.content_list:
        iter241.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.STRING, 2)
      oprot.writeString(self.status)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UserProfileGetReq:
  """
  Attributes:
   - uid_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'uid_list', (TType.STRING,None), None, ), # 1
  )

  def __init__(self, uid_list=None,):
    self.uid_list = uid_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.uid_list = []
          (_etype245, _size242) = iprot.readListBegin()
          for _i246 in xrange(_size242):
            _elem247 = iprot.readString();
            self.uid_list.append(_elem247)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UserProfileGetReq')
    if self.uid_list is not None:
      oprot.writeFieldBegin('uid_list', TType.LIST, 1)
      oprot.writeListBegin(TType.STRING, len(self.uid_list))
      for iter248 in self.uid_list:
        oprot.writeString(iter248)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UserProfileGetRsp:
  """
  Attributes:
   - user_list
   - status
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'user_list', (TType.STRUCT,(User, User.thrift_spec)), None, ), # 1
    (2, TType.STRING, 'status', None, None, ), # 2
  )

  def __init__(self, user_list=None, status=None,):
    self.user_list = user_list
    self.status = status

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.user_list = []
          (_etype252, _size249) = iprot.readListBegin()
          for _i253 in xrange(_size249):
            _elem254 = User()
            _elem254.read(iprot)
            self.user_list.append(_elem254)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.status = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UserProfileGetRsp')
    if self.user_list is not None:
      oprot.writeFieldBegin('user_list', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.user_list))
      for iter255 in self.user_list:
        iter255.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.STRING, 2)
      oprot.writeString(self.status)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AuthorProfileAidGetReq:
  """
  Attributes:
   - aid_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'aid_list', (TType.I64,None), None, ), # 1
  )

  def __init__(self, aid_list=None,):
    self.aid_list = aid_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.aid_list = []
          (_etype259, _size256) = iprot.readListBegin()
          for _i260 in xrange(_size256):
            _elem261 = iprot.readI64();
            self.aid_list.append(_elem261)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AuthorProfileAidGetReq')
    if self.aid_list is not None:
      oprot.writeFieldBegin('aid_list', TType.LIST, 1)
      oprot.writeListBegin(TType.I64, len(self.aid_list))
      for iter262 in self.aid_list:
        oprot.writeI64(iter262)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AuthorProfileAidGetRsp:
  """
  Attributes:
   - author_list
   - status
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'author_list', (TType.STRUCT,(Author, Author.thrift_spec)), None, ), # 1
    (2, TType.STRING, 'status', None, None, ), # 2
  )

  def __init__(self, author_list=None, status=None,):
    self.author_list = author_list
    self.status = status

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.author_list = []
          (_etype266, _size263) = iprot.readListBegin()
          for _i267 in xrange(_size263):
            _elem268 = Author()
            _elem268.read(iprot)
            self.author_list.append(_elem268)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.status = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AuthorProfileAidGetRsp')
    if self.author_list is not None:
      oprot.writeFieldBegin('author_list', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.author_list))
      for iter269 in self.author_list:
        iter269.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.STRING, 2)
      oprot.writeString(self.status)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AuthorProfileCidGetReq:
  """
  Attributes:
   - cid_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'cid_list', (TType.I64,None), None, ), # 1
  )

  def __init__(self, cid_list=None,):
    self.cid_list = cid_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.cid_list = []
          (_etype273, _size270) = iprot.readListBegin()
          for _i274 in xrange(_size270):
            _elem275 = iprot.readI64();
            self.cid_list.append(_elem275)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AuthorProfileCidGetReq')
    if self.cid_list is not None:
      oprot.writeFieldBegin('cid_list', TType.LIST, 1)
      oprot.writeListBegin(TType.I64, len(self.cid_list))
      for iter276 in self.cid_list:
        oprot.writeI64(iter276)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AuthorProfileCidGetRsp:
  """
  Attributes:
   - c_author_list
   - status
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'c_author_list', (TType.STRUCT,(CidAuthor, CidAuthor.thrift_spec)), None, ), # 1
    (2, TType.STRING, 'status', None, None, ), # 2
  )

  def __init__(self, c_author_list=None, status=None,):
    self.c_author_list = c_author_list
    self.status = status

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.c_author_list = []
          (_etype280, _size277) = iprot.readListBegin()
          for _i281 in xrange(_size277):
            _elem282 = CidAuthor()
            _elem282.read(iprot)
            self.c_author_list.append(_elem282)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.status = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AuthorProfileCidGetRsp')
    if self.c_author_list is not None:
      oprot.writeFieldBegin('c_author_list', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.c_author_list))
      for iter283 in self.c_author_list:
        iter283.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.STRING, 2)
      oprot.writeString(self.status)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ContentProfilePutReq:
  """
  Attributes:
   - content_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'content_list', (TType.STRUCT,(Content, Content.thrift_spec)), None, ), # 1
  )

  def __init__(self, content_list=None,):
    self.content_list = content_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.content_list = []
          (_etype287, _size284) = iprot.readListBegin()
          for _i288 in xrange(_size284):
            _elem289 = Content()
            _elem289.read(iprot)
            self.content_list.append(_elem289)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ContentProfilePutReq')
    if self.content_list is not None:
      oprot.writeFieldBegin('content_list', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.content_list))
      for iter290 in self.content_list:
        iter290.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UserProfilePutReq:
  """
  Attributes:
   - user_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'user_list', (TType.STRUCT,(User, User.thrift_spec)), None, ), # 1
  )

  def __init__(self, user_list=None,):
    self.user_list = user_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.user_list = []
          (_etype294, _size291) = iprot.readListBegin()
          for _i295 in xrange(_size291):
            _elem296 = User()
            _elem296.read(iprot)
            self.user_list.append(_elem296)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UserProfilePutReq')
    if self.user_list is not None:
      oprot.writeFieldBegin('user_list', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.user_list))
      for iter297 in self.user_list:
        iter297.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AuthorProfilePutReq:
  """
  Attributes:
   - author_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'author_list', (TType.STRUCT,(Author, Author.thrift_spec)), None, ), # 1
  )

  def __init__(self, author_list=None,):
    self.author_list = author_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.author_list = []
          (_etype301, _size298) = iprot.readListBegin()
          for _i302 in xrange(_size298):
            _elem303 = Author()
            _elem303.read(iprot)
            self.author_list.append(_elem303)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AuthorProfilePutReq')
    if self.author_list is not None:
      oprot.writeFieldBegin('author_list', TType.LIST, 1)
      oprot.writeListBegin(TType.STRUCT, len(self.author_list))
      for iter304 in self.author_list:
        iter304.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ProfilePutRsp:
  """
  Attributes:
   - status
   - count
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'status', None, None, ), # 1
    (2, TType.I32, 'count', None, None, ), # 2
  )

  def __init__(self, status=None, count=None,):
    self.status = status
    self.count = count

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.status = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.count = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ProfilePutRsp')
    if self.status is not None:
      oprot.writeFieldBegin('status', TType.STRING, 1)
      oprot.writeString(self.status)
      oprot.writeFieldEnd()
    if self.count is not None:
      oprot.writeFieldBegin('count', TType.I32, 2)
      oprot.writeI32(self.count)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
